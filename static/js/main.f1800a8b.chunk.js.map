{"version":3,"sources":["ui/features/uniCardsFeatures/uniCards/uniCards.module.css","ui/features/modalsFeatures/modals.module.css","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeck.module.css","ui/App.module.css","ui/common/input/Input.module.css","ui/common/button/Button.module.css","ui/common/loadingToggle/Loading.module.css","ui/common/header/header.module.css","bll/types.tsx","dal/api.ts","bll/auth_reducer.tsx","bll/newPswd_reducer.tsx","bll/profile_reducer.tsx","bll/pswdRecover_reducer.tsx","bll/registr_reducer.tsx","bll/cards_reducer.tsx","bll/cardsDeck_reducer.tsx","bll/store.tsx","ui/common/input/Input.tsx","ui/common/button/Button.tsx","ui/common/loadingToggle/Loading.tsx","ui/features/authFeatures/loginization/loginization.tsx","ui/features/authFeatures/loginization/loginizationContainer.tsx","ui/features/authFeatures/loginization/loginizationPage.tsx","ui/features/authFeatures/profile/profile.tsx","ui/features/authFeatures/registration/registration.tsx","ui/features/authFeatures/registration/registrationContainer.tsx","ui/features/authFeatures/registration/registrationPage.tsx","ui/features/authFeatures/newPassword/NewPswd.tsx","ui/features/authFeatures/newPassword/NewPswdContainer.tsx","ui/features/authFeatures/newPassword/NewPswdPage.tsx","ui/features/authFeatures/passwordRecover/PswdRecover.tsx","ui/features/authFeatures/passwordRecover/PswdRecoverContainer.tsx","ui/features/authFeatures/passwordRecover/PswdRecoverPage.tsx","ui/common/withAuth.tsx","ui/features/uniCardsFeatures/uniCards/uniCards.tsx","ui/features/uniCardsFeatures/uniCards/uniCardsContainer.tsx","ui/features/uniCardsFeatures/uniCards/uniCardsPage.tsx","ui/features/uniCardsFeatures/uniCardsDeck/singleDeck.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeck.tsx","ui/features/modalsFeatures/modalForDecks/modalDelete.tsx","ui/features/modalsFeatures/modalForDecks/modalContainerDelete.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsContainerDeck.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeckPage.tsx","ui/features/modalsFeatures/defaultModal/modal.tsx","ui/features/modalsFeatures/defaultModal/modalContainer.tsx","ui/features/modalsFeatures/defaultModal/modalsPage.tsx","ui/features/modalsFeatures/modalForDecks/modalsPageDelete.tsx","ui/features/uniCardsFeatures/uniCards/singleCard.tsx","ui/features/uniCardsFeatures/uniCards/singleCardContainer.tsx","ui/common/routes.tsx","ui/common/header/headers.tsx","ui/common/header/headerContainer.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","REGISTRATE_ERROR","LOGIN_ERROR","LOGIN_SUCCESS","IS_LOADING","SET_TOKEN","EDIT_CARD","CREATE_CARD","GET_DECKS","GET_DECK_ID","CREATE_DECK","instance","axios","create","baseURL","authAPI","loginizationAPI","email","password","rememberMe","a","post","response","data","registrationAPI","passwordRecoverAPI","html1","html2","setNewPasswordAPI","resetPasswordToken","cardsDeckAPI","getCardsDecks","token","get","addNewCardsDeck","cardsPack","updateCardsDeck","put","deleteCardsDeck","id","delete","cardsAPI","getCards","addCard","card","updateCard","_id","question","deleteCard","initialState","authSuccess","myName","errorMessage","isLoading","isLoadingAC","value","type","setTokenAC","loginizationErrorAC","authReducer","state","action","loginSuccess","success","message","newPasswordTC","dispatch","error","setNewPasswordErrorAC","setNewPasswordSuccessAC","recoverSuccess","newPasswordReducer","profileReducer","passwordRecoverSuccessAC","passwordRecoverErrorAC","passwordRecoveringReducer","registeredSuccess","registrationErrorAC","registrationReducer","cards","currentCard","answer","cardsPack_id","grade","rating","shots","created","updated","__v","cardID","cardsDeckID","getCardsAC","cardsReducer","length","find","c","cardId","newCard","successBoolean","decks","currentDeckId","setCardsDecksAC","cardsDeckReducer","deckId","cardsDeck","reducerPack","combineReducers","auth","newPass","profile","recoverPass","registr","store","createStore","applyMiddleware","thunkMiddleware","Input","inputOnChangeNumber","inputPlaceholder","checked","inputType","inputOnChange","inputOnChangeChecked","className","s","inputWrapper","onChange","e","currentTarget","Number","placeholder","Button","buttonOnClick","buttonName","buttonOnClickBoolean","booleanValue","buttonWrapper","onClick","Loading","useState","points","setPoints","useSelector","loadingProgress","setTimeout","Loginization","login","setPassword","setLogin","setRememberMe","signIn","loginError","styles","loginizationWrapper","LoginizationContainer","useDispatch","to","TO_PROFILE","name","loginizationTC","LoginizationPage","ProfilePage","profileWrappe","Registration","repeatingPassword","setRepeatingPassword","registerMe","similar","wrongRepeatingPassword","messageFromServer","registrationWrapper","RegistrationContainer","setSimilar","useEffect","TO_AUTH","registrationTC","RegistrationPage","NewPswd","newPassword","setNewPassword","newPasswordRepeat","setNewPasswordRepeat","differentPassword","getDataFromServer","responseStatusMessage","newPasswordWrapper","withRouter","props","setDifferentPassword","match","params","NewPswdPage","PswdRecover","putUserEmail","userEmail","pswdRecoverWrapper","PswdRecoverContainer","responseStatus","PswdRecoverPage","WithAuthHOC","Component","TO_REGISTRATION","UniCards","setSearchInput","searchInput","setNewCardName","newCardName","cardsElements","map","mainList","itemName","TO_CARD","itemScore","buttonsInTheList","uniCardsWrapper","mainListWrapper","getCardsTC","createCardTC","SingleDeck","editDeck","editNameInput","deleteDeck","setEditNameInput","editGradeInput","setEditGradeInput","editDeckInputField","setEditDeckInputField","TO_CARDS","UniCardsDeck","createNewDeck","setDeckName","deckName","deckElements","deck","key","loading","ModalDelete","children","setIsOpenModal","main","modelWrapper","childrenWrapper","ModalContainerDelete","answerFromModal","isOpenModal","titleName","UniCardsContainerDeck","cardPacks","getDecksTC","newCardsDeck","newCardsPack","createNewCardDeckTC","user_id","_deckId","editedDeck","data2","editDeckTC","setCurrentDeckIdAC","deleteDeckTC","Modal","isOpen","ModalContainer","onModelButtonClickName","modalTitle","setIsOpen","ModalsPage","ModalsPageDelete","SingleCard","setIsShowed","isShowed","isShowedNext","onNextClicked","setIsShowedNext","cardMainStyle","answeringButtons","withAuth","setCardAC","AllRoutes","path","render","TO_NEW_PASSWORD","exact","Header","setLinks","links","headerWrapper","HedaerContainer","App","Main","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.f1800a8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniCardsWrapper\":\"uniCards_uniCardsWrapper__2U9Xb\",\"mainListWrapper\":\"uniCards_mainListWrapper__11Wk1\",\"mainList\":\"uniCards_mainList__2BJJo\",\"buttonsInTheList\":\"uniCards_buttonsInTheList__1seOh\",\"itemName\":\"uniCards_itemName__3_6vV\",\"cardMainStyle\":\"uniCards_cardMainStyle__3Wahs\",\"answeringButtons\":\"uniCards_answeringButtons__2RmW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"modals_main__3TZoQ\",\"modelWrapper\":\"modals_modelWrapper__39OvK\",\"childrenWrapper\":\"modals_childrenWrapper__2xHz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniCardsDeckWrapper\":\"uniCardsDeck_uniCardsDeckWrapper__3s82f\",\"mainListWrapper\":\"uniCardsDeck_mainListWrapper__9Pt5w\",\"mainList\":\"uniCardsDeck_mainList__1uF9i\",\"buttonsInTheList\":\"uniCardsDeck_buttonsInTheList__--3H8\",\"loading\":\"uniCardsDeck_loading__1fvb3\",\"itemName\":\"uniCardsDeck_itemName__1E4gY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LKvuZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Input_inputWrapper__2iRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__11CDY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingProgress\":\"Loading_loadingProgress__25Q2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__1bHj-\"};","export interface IState {\r\n\r\n}\r\nexport interface IStatePasswordRecover {\r\n  success: boolean\r\n  message: string\r\n}\r\nexport interface IStateRegistr {\r\n  message: string,\r\n  registeredSuccess: boolean\r\n}\r\nexport interface IStateLogin {\r\n  id: string,\r\n  myName: string,\r\n  authSuccess: boolean,\r\n  errorMessage: string,\r\n  token: string\r\n  isLoading: boolean\r\n}\r\nexport interface IStateCards {\r\n  cards: Array<CardsType>\r\n  currentCard: CardsType\r\n  cardsDeckID: string\r\n  cardID: string\r\n  success: boolean\r\n}\r\nexport type IStateCardsDeck  = {\r\n  decks: Array<CardsDeckType>,\r\n  currentDeckId: string\r\n}\r\n\r\nexport const FIRST_ACTION = 'FIRST_ACTION'\r\nexport const SECOND_ACTION = 'SECOND_ACTION'\r\nexport const REGISTRATE_SUCCESS = 'registr_reducer/REGISTRATE_SUCCESS'\r\nexport const REGISTRATE_ERROR = 'registr_reducer/REGISTRATE_ERROR'\r\nexport const LOGIN_ERROR = 'auth_reducer/LOGIN_ERROR'\r\nexport const LOGIN_SUCCESS = 'auth_reducer/LOGIN_SUCCESS'\r\nexport const PASSWORD_RECOVER_SUCCESS = 'PASSWORD_RECOVER_SUCCESS';\r\nexport const PASSWORD_RECOVER_ERROR = 'PASSWORD_RECOVER_ERROR';\r\nexport const NEW_PASSWORD_SUCCESS = 'NEW_PASSWORD_SUCCESS';\r\nexport const NEW_PASSWORD_ERROR = 'NEW_PASSWORD_ERROR';\r\nexport const IS_LOADING = 'auth_reducer/IS_LOADING';\r\nexport const SET_TOKEN = 'auth_reducer/SET_TOKEN';\r\nexport const EDIT_CARD = 'cards_reducer/EDIT_CARD';\r\nexport const DELETE_CARD = 'cards_reducer/DELETE_CARD';\r\nexport const CREATE_CARD = 'cards_reducer/CREATE_CARD';\r\nexport const GET_DECKS = 'cardsDeck_reducer/GET_DECKS';\r\nexport const GET_DECK_ID = 'cardsDeck_reducer/GET_DECK_ID';\r\nexport const CREATE_DECK = 'cardsDeck_reducer/CREATE_DECK';\r\nexport const DELETE_DECK = 'cardsDeck_reducer/DELETE_DECK';\r\nexport const SET_CARDS = 'SET_CARDS';\r\nexport const SET_CARD = 'SET_CARD';\r\n\r\n                                                      // typos\r\n\r\nexport type CardsDeckType = {\r\n  _id: string\r\n  user_id: string\r\n  name: string\r\n  path: string // папка\r\n  grade: number // средняя оценка карточек\r\n  shots: number // количество попыток\r\n  rating: number // лайки\r\n  type:  string//\"pack \" // ещё будет \"folder\" (папка)\r\n  created: string\r\n  updated: string\r\n}\r\n\r\nexport type CardsType = {\r\n  answer: string\r\n  question: string\r\n  cardsPack_id: string\r\n  grade: number\r\n  rating: number\r\n  shots: number\r\n  type: string\r\n  created: string\r\n  updated: string\r\n  __v: number\r\n  _id: string\r\n}\r\n\r\nexport interface ISetCards {\r\n  type: typeof SET_CARDS\r\n  cards: Array<CardsType>\r\n}\r\nexport interface ISetCard {\r\n  type: typeof SET_CARD\r\n  cardId: string\r\n}\r\nexport interface IGetCardsDecks {\r\n  type: typeof GET_DECKS\r\n  decks: Array<CardsDeckType>\r\n}\r\nexport interface IGetDeckId {\r\n  type: typeof GET_DECK_ID\r\n  deckId: string\r\n}\r\nexport interface ICreateDeleteDeckActionCreator {\r\n  type: typeof CREATE_DECK | typeof DELETE_DECK\r\n  cardsDeck: CardsDeckType\r\n}\r\nexport interface ICreateCardActionCreator {\r\n  type: typeof CREATE_CARD\r\n  newCard: CardsType\r\n  successBoolean: boolean\r\n}\r\nexport interface IDeleteCardActionCreator {\r\n  type: typeof DELETE_CARD\r\n  cardsDeckID: string\r\n  cardId: string\r\n}\r\nexport interface IEditCardActionCreator {\r\n  type: typeof EDIT_CARD\r\n  cards: Array<CardsType>\r\n  cardsDeckID: string\r\n  cardID: string\r\n}\r\nexport interface IisLoadingActionCreator {\r\n  type: typeof IS_LOADING\r\n  value: boolean\r\n}\r\nexport interface ISetToken {\r\n  type: typeof SET_TOKEN\r\n  token: string\r\n}\r\nexport interface firstActionCreator {\r\n  type: typeof FIRST_ACTION\r\n  payload: any\r\n}\r\nexport interface secondActionCreator {\r\n  type: typeof SECOND_ACTION\r\n  payload: any\r\n}\r\nexport interface ILoginSuccess {\r\n  type: typeof LOGIN_SUCCESS,\r\n  id: string,\r\n  loginSuccess: boolean,\r\n  myName: string,\r\n  token: string\r\n}\r\nexport interface ILoginError {\r\n  type: typeof LOGIN_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IRegistrateSuccess {\r\n  type: typeof REGISTRATE_SUCCESS,\r\n  registeredSuccess:boolean\r\n}\r\nexport interface IRegistrateError {\r\n  type: typeof REGISTRATE_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IPasswordRecoverSuccess {\r\n  type: typeof PASSWORD_RECOVER_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface IPasswordRecoverError {\r\n  type: typeof PASSWORD_RECOVER_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface INewPasswordSuccess {\r\n  type: typeof NEW_PASSWORD_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface INewPasswordError {\r\n  type: typeof NEW_PASSWORD_ERROR,\r\n  errorMessage: string\r\n}\r\n\r\nexport type ChatActionTypes = firstActionCreator| secondActionCreator| IRegistrateSuccess | IRegistrateError |\r\n    IPasswordRecoverSuccess | IPasswordRecoverError | ILoginSuccess | ILoginError | INewPasswordSuccess |\r\n    INewPasswordError | IisLoadingActionCreator | IEditCardActionCreator | IDeleteCardActionCreator |\r\n    ICreateCardActionCreator | ICreateDeleteDeckActionCreator | IGetCardsDecks | ISetToken | ISetCards |\r\n    IGetDeckId | ISetCard\r\n","import axios from \"axios\";\r\nimport {CardsDeckType} from \"../bll/types\";\r\n\r\nexport const baseURL = 'https://cards-nya-back.herokuapp.com/1.0/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport interface ILoginization {\r\n    _id: string;\r\n    success: boolean;\r\n    name: string;\r\n    error: string;\r\n    token: string;\r\n}\r\n\r\nexport interface IRegistration {\r\n    success: boolean;\r\n\r\n    error: string;\r\n}\r\ntype CardsDecksDataType = {\r\n    cardPacks: Array<CardsDeckType>;\r\n    success: boolean;\r\n    token: string;\r\n    error: string;\r\n}\r\ninterface IAddNewCardsDeck {\r\n    newCardsPack: CardsDeckType,\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport const authAPI = {\r\n    loginizationAPI: async (email: string, password: string, rememberMe: boolean) => {\r\n        const response = await instance.post<ILoginization>('/auth/login', {email, password, rememberMe});\r\n        return response.data;\r\n    },\r\n    registrationAPI: async (email: string, password: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/register', {email, password});\r\n        return response.data;\r\n    },\r\n    passwordRecoverAPI: async (email: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/forgot', {\r\n            email,\r\n            html1: \"<a href='http://localhost:3000/kartonki#/new-password/\",\r\n            html2: \"'>reset-password-link</a>\"\r\n        });\r\n        return response.data;\r\n    },\r\n    setNewPasswordAPI: async (password: string, resetPasswordToken: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/set-new-password', {password, resetPasswordToken});\r\n        return response.data;\r\n    }\r\n};\r\nexport const cardsDeckAPI = {\r\n    getCardsDecks: async (token: string) => {\r\n        const response = await instance.get<CardsDecksDataType>(\r\n            `/cards/pack?token=${token}`);\r\n        return response.data;\r\n    },\r\n    addNewCardsDeck: async (cardsPack: { user_id: string; name: string }, token: string) => {\r\n        const response = await instance.post<IAddNewCardsDeck>(\r\n            `/cards/pack`, {cardsPack, token});\r\n        return response.data;\r\n    },\r\n    updateCardsDeck: async(cardsPack: { grade: number; name: string; _id: string },token:string,) => {\r\n        const response = await instance.put<CardsDecksDataType>(\r\n            `/cards/pack`, {cardsPack, token });\r\n        return response.data;\r\n    },\r\n    deleteCardsDeck: async(token:string, id: string) => {\r\n        const response = await instance.delete<CardsDecksDataType>(\r\n            `/cards/pack?token=${token}&id=${id}`);\r\n        return response.data;\r\n    },\r\n};\r\n\r\n export const cardsAPI = {\r\n     getCards: async (token: string, id: string) => {\r\n         const response =await instance.get(`/cards/card?token=${token}&cardsPack_id=${id}`);\r\n         return response.data;\r\n     },\r\n     addCard: async (card: { cardsPack_id:string, question:string }, token: string) => {\r\n         debugger\r\n         const response = await instance.post(`/cards/card`, {\r\n             card,\r\n             token,\r\n         });\r\n         return response.data;\r\n     },\r\n     updateCard: async (token: string, id: string) => {\r\n         const response = await instance.put(`/cards/card`, {\r\n             token,\r\n             card: {\r\n                 _id: id,\r\n                 question: 'updated question',\r\n             }\r\n         });\r\n\r\n         return response.data;\r\n     },\r\n     deleteCard: async (token: string, id: string) => {\r\n         const response = await instance.delete(`/cards/card?token=${token}&id=${id}`);\r\n\r\n         return response.data;\r\n     },\r\n };","import {\r\n    ChatActionTypes,\r\n    IisLoadingActionCreator,\r\n    ILoginError,\r\n    ILoginSuccess,\r\n    IS_LOADING,\r\n    ISetToken,\r\n    IStateLogin,\r\n    LOGIN_ERROR,\r\n    LOGIN_SUCCESS,\r\n    SET_TOKEN\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStateLogin = {\r\n    id: '',\r\n    authSuccess: false,\r\n    myName: '',\r\n    errorMessage: '',\r\n    token: '',\r\n    isLoading: false,\r\n}\r\n\r\n\r\nconst authReducer = (state: IStateLogin = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state, authSuccess: action.loginSuccess, myName: action.myName,\r\n                token: action.token, id: action.id\r\n            }\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state, errorMessage: action.errorMessage\r\n            }\r\n        case IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.token\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// global loading Action Creator\r\nexport const isLoadingAC = (value: boolean):IisLoadingActionCreator => ({type: IS_LOADING, value});\r\nexport const setTokenAC = (token: string):ISetToken => ({type: SET_TOKEN, token});\r\n\r\n\r\nconst loginizationSuccessAC = (loginSuccess: boolean, myName:string, token:string, id: string):ILoginSuccess =>\r\n    ({type: LOGIN_SUCCESS, loginSuccess, myName, token, id})\r\nconst loginizationErrorAC = (errorMessage: string):ILoginError => ({type: LOGIN_ERROR, errorMessage})\r\n\r\n\r\n\r\nexport const loginizationTC = (email:string, password:string, rememberMe: boolean) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await authAPI.loginizationAPI(email, password, rememberMe);\r\n            if (data.error)\r\n                dispatch(loginizationErrorAC(data.error))\r\n            else dispatch(loginizationSuccessAC(data.success, data.name, data.token, data._id ))\r\n        } catch (e) {\r\n            dispatch(loginizationErrorAC(e.response.data.error))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport default authReducer;","import {\r\n    ChatActionTypes,\r\n    NEW_PASSWORD_SUCCESS,\r\n    NEW_PASSWORD_ERROR,\r\n    INewPasswordSuccess, INewPasswordError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst newPasswordReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case NEW_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Successful!'\r\n            };\r\n        case NEW_PASSWORD_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const newPasswordTC = (password: string, resetPasswordToken: string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await authAPI.setNewPasswordAPI(password, resetPasswordToken);\r\n            if(data.error) {\r\n                dispatch(setNewPasswordErrorAC(data.error));\r\n            } else\r\n                dispatch(setNewPasswordSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(setNewPasswordErrorAC(e.response.data.error));\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators\r\nconst setNewPasswordSuccessAC = (recoverSuccess: boolean)\r\n    : INewPasswordSuccess => ({type: NEW_PASSWORD_SUCCESS, recoverSuccess});\r\n\r\nexport const setNewPasswordErrorAC = (errorMessage: string)\r\n    : INewPasswordError => ({type: NEW_PASSWORD_ERROR, errorMessage});\r\n\r\n\r\nexport default newPasswordReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer;","import {\r\n    ChatActionTypes,\r\n    PASSWORD_RECOVER_ERROR,\r\n    PASSWORD_RECOVER_SUCCESS,\r\n    IPasswordRecoverSuccess,\r\n    IPasswordRecoverError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst passwordRecoveringReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case PASSWORD_RECOVER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Успешно! Проверьте свой email.'\r\n            };\r\n        case PASSWORD_RECOVER_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const passwordRecoverTC = (email:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await authAPI.passwordRecoverAPI(email);\r\n            if(data.error) {\r\n                dispatch(passwordRecoverErrorAC(data.error));\r\n            } else\r\n                dispatch(passwordRecoverSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(passwordRecoverErrorAC(e.response.data.error));\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators (success error)\r\nconst passwordRecoverSuccessAC = (recoverSuccess: boolean)\r\n    : IPasswordRecoverSuccess => ({type: PASSWORD_RECOVER_SUCCESS, recoverSuccess});\r\n\r\nexport const passwordRecoverErrorAC = (errorMessage: string)\r\n    : IPasswordRecoverError => ({type: PASSWORD_RECOVER_ERROR, errorMessage});\r\n\r\n\r\n\r\nexport default passwordRecoveringReducer;","import {\r\n    ChatActionTypes,\r\n    REGISTRATE_ERROR,\r\n    REGISTRATE_SUCCESS,\r\n    IRegistrateSuccess,\r\n    IRegistrateError, IStateRegistr\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState:IStateRegistr = {\r\n    message: '',\r\n    registeredSuccess: false\r\n};\r\n\r\nconst registrationReducer = (state:IStateRegistr = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case REGISTRATE_SUCCESS:\r\n            return {...state, message: 'successich', registeredSuccess: action.registeredSuccess}\r\n        case REGISTRATE_ERROR:\r\n            return {...state, message: action.errorMessage}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst registrationSuccessAC = (registeredSuccess: boolean)\r\n    : IRegistrateSuccess => ({type: REGISTRATE_SUCCESS, registeredSuccess});\r\nexport const registrationErrorAC = (errorMessage: string)\r\n    : IRegistrateError => ({type: REGISTRATE_ERROR, errorMessage});\r\n\r\n\r\nexport const registrationTC = (email:string, password:string) =>\r\n     async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await authAPI.registrationAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(registrationErrorAC(data.error));\r\n            } else\r\n                dispatch(registrationSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(registrationErrorAC(e.response.data.error))\r\n        }\r\n         dispatch(isLoadingAC(false));\r\n}\r\n\r\nexport default registrationReducer;\r\n","import {\r\n    CardsType,\r\n    ChatActionTypes,\r\n    CREATE_CARD,\r\n    DELETE_CARD,\r\n    EDIT_CARD,\r\n    ICreateCardActionCreator,\r\n    IEditCardActionCreator,\r\n    ISetCard,\r\n    ISetCards,\r\n    IStateCards,\r\n    SET_CARD,\r\n    SET_CARDS,\r\n} from \"./types\";\r\nimport {isLoadingAC, setTokenAC} from \"./auth_reducer\";\r\nimport {cardsAPI} from \"../dal/api\";\r\n\r\n\r\nconst initialState: IStateCards = {\r\n    cards: [],\r\n    currentCard: {\r\n        answer: \"default\",\r\n        question: \"default\",\r\n        cardsPack_id: \"default\",\r\n        grade: 0.00,\r\n        rating: 0,\r\n        shots: 0,\r\n        type: \"card\",\r\n        created: \"2020-05-13T11:05:44.867Z\",\r\n        updated: \"2020-05-13T11:05:44.867Z\",\r\n        __v: 0,\r\n        _id: \"default\",\r\n    },\r\n    cardID: '',\r\n    cardsDeckID: '',\r\n    success: false\r\n};\r\n\r\n\r\nconst cardsReducer = (state: IStateCards = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case SET_CARDS:\r\n            if(action.cards.length > 0){\r\n            return {...state, cards: action.cards}\r\n            } else {\r\n                return {...state}\r\n            }\r\n        case SET_CARD:\r\n            return {\r\n                ...state, currentCard: state.cards.find( c => {\r\n                    return (c._id === action.cardId)\r\n                })\r\n            }\r\n        case EDIT_CARD:\r\n            return {\r\n                ...state, cards: action.cards,\r\n            };\r\n        case DELETE_CARD:\r\n            return {\r\n                ...state,\r\n            };\r\n        case CREATE_CARD:\r\n            return {\r\n                ...state, cards: [...state.cards, action.newCard], success: action.successBoolean\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creator\r\nconst editCardAC = (cards: Array<CardsType>, cardsDeckID: string, cardID: string): IEditCardActionCreator =>\r\n    ({type: EDIT_CARD, cards, cardsDeckID, cardID});\r\nexport const setCardAC = (cardId: string):ISetCard => ({type:SET_CARD, cardId})\r\n// const deleteCardAC = (cardsDeckID: string, cardId: string): IDeleteCardActionCreator =>\r\n//     ({type: DELETE_CARD, cardsDeckID, cardId});\r\nconst createCardAC = (newCard: CardsType, successBoolean: boolean): ICreateCardActionCreator =>\r\n    ({type: CREATE_CARD, newCard, successBoolean});\r\nconst getCardsAC = (cards: Array<CardsType>): ISetCards => ({type: SET_CARDS, cards});\r\n\r\n// Thunk\r\nexport const getCardsTC = (token: string, id: string) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.getCards(token, id);\r\n            dispatch(getCardsAC(data.cards));\r\n            dispatch(setTokenAC(data.token));\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const createCardTC = (card: { cardsPack_id:string, question:string }, token: string) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.addCard(card, token);\r\n            dispatch(createCardAC(data.newCard, data.success));\r\n            dispatch(setTokenAC(data.token));\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const editCardTC = (token: string, id: string) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.updateCard(token, id);\r\n            dispatch(editCardAC(data.cards, data.cardsDeckID, data.cardID))\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const deleteCardTC = (token: string, cardID: string, id: string) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.deleteCard(token, cardID);\r\n            dispatch(setTokenAC(data.token));\r\n            if(data.success) {\r\n                const data2 = await cardsAPI.getCards(data.token, id);\r\n                dispatch(getCardsAC(data2.cards))\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\n\r\n\r\nexport default cardsReducer;","import {\r\n    CardsDeckType,\r\n    ChatActionTypes,\r\n    CREATE_DECK,\r\n    DELETE_DECK,\r\n    GET_DECK_ID,\r\n    GET_DECKS,\r\n    ICreateDeleteDeckActionCreator,\r\n    IGetCardsDecks,\r\n    IGetDeckId,\r\n    IStateCardsDeck,\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {isLoadingAC, setTokenAC} from \"./auth_reducer\";\r\nimport {cardsDeckAPI} from \"../dal/api\";\r\n\r\n\r\nconst initialState: IStateCardsDeck = {\r\n    decks: [],\r\n    currentDeckId: ''\r\n};\r\n\r\n\r\nconst cardsDeckReducer = (state: IStateCardsDeck = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case GET_DECKS:\r\n            return {\r\n                ...state, decks: action.decks\r\n            };\r\n        case GET_DECK_ID:\r\n            return {\r\n                ...state, currentDeckId: action.deckId\r\n            }\r\n        case CREATE_DECK:\r\n            return {\r\n                ...state,\r\n                decks: [action.cardsDeck, ...state.decks]\r\n            };\r\n        case DELETE_DECK:\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst setCardsDecksAC = (decks: Array<CardsDeckType>): IGetCardsDecks => ({type: GET_DECKS, decks})\r\nexport const setCurrentDeckIdAC = (deckId: string): IGetDeckId => ({type: GET_DECK_ID, deckId})\r\nconst setNewCardsDeckAC = (newCardsDeck: CardsDeckType)\r\n    : ICreateDeleteDeckActionCreator => ({type: CREATE_DECK, cardsDeck: newCardsDeck})\r\n\r\nexport const getDecksTC = (token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.getCardsDecks(token)\r\n            dispatch(setCardsDecksAC(data.cardPacks))\r\n            dispatch(setTokenAC(data.token))\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\nexport const createNewCardDeckTC = (cardsDeck: { user_id: string; name: string }, token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.addNewCardsDeck(cardsDeck, token)\r\n            if (data.success === true)\r\n                dispatch(setNewCardsDeckAC(data.newCardsPack,))\r\n            dispatch(setTokenAC(data.token))\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport const editDeckTC = (editedDeck: { grade: number; name: string; _id: string }, token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.updateCardsDeck(editedDeck, token)\r\n            if (data.success === true) {\r\n                const data2 = await cardsDeckAPI.getCardsDecks(data.token)\r\n                dispatch(setCardsDecksAC(data2.cardPacks))\r\n                dispatch(setTokenAC(data2.token))\r\n            }\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport const deleteDeckTC = (token: string, deckId: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.deleteCardsDeck(token, deckId)\r\n            dispatch(setTokenAC(data.token));\r\n            if (data.success) {\r\n                const data2 = await cardsDeckAPI.getCardsDecks(data.token)\r\n                dispatch(setCardsDecksAC(data2.cardPacks))\r\n                dispatch(setTokenAC(data2.token))\r\n            }\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\nexport default cardsDeckReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport authReducer from './auth_reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport newPasswordReducer from \"./newPswd_reducer\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport passwordRecoveringReducer from \"./pswdRecover_reducer\";\r\nimport registrationReducer from \"./registr_reducer\";\r\nimport cardsReducer from \"./cards_reducer\";\r\nimport cardsDeckReducer from \"./cardsDeck_reducer\";\r\n\r\nconst reducerPack = combineReducers({\r\n    auth: authReducer,\r\n    newPass: newPasswordReducer,\r\n    profile: profileReducer,\r\n    recoverPass: passwordRecoveringReducer,\r\n    registr: registrationReducer,\r\n    cards: cardsReducer,\r\n    decks: cardsDeckReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducerPack>\r\n\r\nconst store = createStore(reducerPack, applyMiddleware(thunkMiddleware) );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ninterface IPropsInput {\r\n    inputPlaceholder?: string | undefined,\r\n    value?: string  | number | undefined,\r\n    checked?: boolean | undefined,\r\n    inputType?:string | undefined,\r\n    inputOnChange?: (value: string  ) => void,\r\n    inputOnChangeNumber?: (value: number  ) => void,\r\n    inputOnChangeChecked?: (value: boolean ) => void\r\n}\r\nconst Input: React.FC<IPropsInput> = ({inputOnChangeNumber,\r\n                                          inputPlaceholder,\r\n                                          value ,\r\n                                          checked,\r\n                                          inputType,\r\n                                          inputOnChange,\r\n                                          inputOnChangeChecked\r\n                                      }) => {\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputOnChange) {\r\n            inputOnChange(e.currentTarget.value)\r\n        } else if(inputOnChangeChecked) {\r\n            inputOnChangeChecked(e.currentTarget.checked)\r\n        } else if (inputOnChangeNumber) {\r\n            inputOnChangeNumber(Number(e.currentTarget.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <input onChange={onChange} placeholder={inputPlaceholder}\r\n                   value={value} checked={checked} type={inputType}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ninterface IPropsButton {\r\n    stringValue?: string,\r\n    booleanValue?: boolean\r\n    buttonOnClick?: () => void,\r\n    buttonOnClickBoolean?: (value: boolean | undefined) => void,\r\n    buttonName?: string\r\n}\r\n\r\nconst Button: React.FC<IPropsButton> = ({buttonOnClick, buttonName,\r\n                                            buttonOnClickBoolean,booleanValue}) => {\r\n    const onClick = () => {\r\n        if (buttonOnClick) buttonOnClick()\r\n        else if (buttonOnClickBoolean) buttonOnClickBoolean(booleanValue)\r\n            }\r\n\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button onClick={onClick}>{buttonName ? buttonName : 'submit'}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React, {useState} from 'react';\r\nimport s from './Loading.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\n\r\nconst Loading = () => {\r\n    let [points, setPoints] = useState<string>('.');\r\n    let isLoading = useSelector((state: RootState) => state.auth.isLoading);\r\n    const loadingProgress = () => {\r\n        setTimeout(() => {\r\n            points.length < 5\r\n                ? setPoints(points + '.')\r\n                : setPoints('.')\r\n        }, 1000);\r\n        return points\r\n    };\r\n    return (\r\n        <div>\r\n            <span className={s.loadingProgress}>\r\n                {isLoading && 'LOADING' + loadingProgress()}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport styles from './loginization.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRememberMe: (value: boolean) => void,\r\n    signIn: () => void,\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    loginError: string,\r\n    isLoading: boolean,\r\n}\r\n\r\nconst Loginization: React.FC<IProps> = ({login, password, setPassword,\r\n                                            setLogin, setRememberMe, signIn,\r\n                                            rememberMe,loginError, isLoading}) => {\r\n  return (\r\n    <div className={styles.loginizationWrapper}>\r\n      <h2>Loginization Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'checkbox'} checked={rememberMe} inputOnChangeChecked={setRememberMe}/>\r\n        </div>\r\n        <div>\r\n            <Button buttonName={'Sign In'} buttonOnClick={signIn}/>\r\n        </div>\r\n        {isLoading && <Loading/>}\r\n        {loginError? <span>loginError</span> : null}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loginization;\r\n","import React, {useState} from 'react';\r\nimport Loginization from \"./loginization\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginizationTC} from \"../../../../bll/auth_reducer\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {TO_PROFILE} from \"../../../common/routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginizationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {authSuccess, errorMessage, isLoading} = useSelector((state: RootState) => state.auth)\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\nconst signIn =  () => {\r\n     dispatch(loginizationTC(login, password, rememberMe))\r\n}\r\n\r\n    return (\r\n        <>\r\n            {!authSuccess\r\n                ? <Loginization setLogin={setLogin} setPassword={setPassword}\r\n                                setRememberMe={setRememberMe} loginError={errorMessage}\r\n                                login={login} password={password} rememberMe={rememberMe}\r\n                                signIn={signIn} isLoading={isLoading}\r\n                />\r\n                : <Redirect to={TO_PROFILE}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginizationContainer;\r\n","import React from 'react';\r\nimport LoginizationContainer from \"./loginizationContainer\";\r\n\r\n\r\nconst LoginizationPage = () => {\r\n    return (\r\n        <LoginizationContainer />\r\n    );\r\n};\r\n\r\nexport default LoginizationPage;\r\n","import React from 'react';\r\nimport styles from './profile.module.css'\r\n\r\n\r\nconst ProfilePage = () => {\r\n  return (\r\n    <div className={styles.profileWrappe}>\r\n      <h2>Profile Page</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport styles from './registr.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRepeatingPassword: (value: string) => void,\r\n    wrongRepeatingPassword: () => void,\r\n    registerMe: () => void,\r\n    login: string,\r\n    password: string,\r\n    repeatingPassword: string,\r\n    similar: boolean\r\n    messageFromServer: string\r\n    isLoading: boolean\r\n}\r\n\r\nconst Registration: React.FC<IProps> = ({login, password,\r\n                                            repeatingPassword,\r\n                                            setPassword, setLogin, setRepeatingPassword,\r\n                                            registerMe, similar,\r\n                                            wrongRepeatingPassword, messageFromServer, isLoading}) => {\r\n    return (\r\n    <div className={styles.registrationWrapper}>\r\n        <h2>Registration Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={repeatingPassword} inputOnChange={setRepeatingPassword}\r\n                   inputPlaceholder={'repeat your password'}/>\r\n                   {!similar && <span>password does not match!</span>}\r\n        </div>\r\n        <div>\r\n            <Button  buttonOnClick={similar? registerMe : wrongRepeatingPassword} buttonName={'Sign Up'}/>\r\n            {isLoading && <Loading/>}\r\n            {<span>{messageFromServer}</span>}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Registration from \"./registration\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationErrorAC, registrationTC} from \"../../../../bll/registr_reducer\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TO_AUTH} from \"../../../common/routes\";\r\n\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {registeredSuccess, message} = useSelector((state: RootState) => state.registr)\r\n    const {isLoading} = useSelector((state: RootState) => state.auth);\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [repeatingPassword, setRepeatingPassword] = useState<string>('');\r\n    const [similar, setSimilar] = useState<boolean>(false);\r\n    useEffect(()=> {\r\n        if(repeatingPassword === password && repeatingPassword) setSimilar(true)\r\n            else setSimilar(false)\r\n    }, [repeatingPassword, password]);\r\n    const registerMe = () => {dispatch(registrationTC(login, password))\r\n    }\r\n    const wrongRepeatingPassword = () => {\r\n        dispatch(registrationErrorAC('wrong credentials'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!registeredSuccess\r\n           ? <Registration setLogin={setLogin}\r\n                          setPassword={setPassword}\r\n                          login={login} password={password}\r\n                          repeatingPassword={repeatingPassword}\r\n                          setRepeatingPassword={setRepeatingPassword}\r\n                          similar={similar}\r\n                          registerMe={registerMe}\r\n                           messageFromServer={message}\r\n                          wrongRepeatingPassword={wrongRepeatingPassword}\r\n                           isLoading={isLoading}\r\n            />\r\n            : <Redirect to={TO_AUTH}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegistrationContainer;\r\n","import React from 'react';\r\nimport RegistrationContainer from \"./registrationContainer\";\r\n\r\n\r\nconst RegistrationPage = () => {\r\n    return (\r\n        <RegistrationContainer />\r\n    );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react';\r\nimport styles from './newPswd.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsNewPswd {\r\n    setNewPassword: (value: string) => void,\r\n    setNewPasswordRepeat: (value: string) => void,\r\n    newPassword: string,\r\n    newPasswordRepeat: string,\r\n    responseStatusMessage: string,\r\n    getDataFromServer: ()=> void,\r\n    similar: boolean,\r\n    differentPassword: string,\r\n    isLoading: boolean\r\n}\r\n\r\nconst NewPswd: React.FC<IPropsNewPswd> = ({newPassword, isLoading, setNewPassword,\r\n                                              newPasswordRepeat,setNewPasswordRepeat,\r\n                                              differentPassword,getDataFromServer,\r\n                                              responseStatusMessage}) => {\r\n  return (\r\n    <div className={styles.newPasswordWrapper}>\r\n      <h2>New Password Page</h2>\r\n        <div>\r\n            <Input inputType='password' value={newPassword}\r\n                   inputOnChange={setNewPassword} inputPlaceholder='New password'\r\n            />\r\n        </div>\r\n        <div>\r\n            <Input inputType='password' value={newPasswordRepeat}\r\n                   inputOnChange={setNewPasswordRepeat} inputPlaceholder='Repeat new password'\r\n            />\r\n\r\n        </div>\r\n        <div>\r\n            <span>{differentPassword}</span>\r\n            <Button buttonName='set new password'\r\n                    buttonOnClick={getDataFromServer}\r\n\r\n            />\r\n            {isLoading && <Loading/>}\r\n            <span>{responseStatusMessage}</span>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPswd;\r\n","import React, {useEffect, useState} from 'react';\r\nimport NewPswd from \"./NewPswd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {newPasswordTC} from \"../../../../bll/newPswd_reducer\";\r\n\r\n\r\nconst NewPswdContainer = (props: any) => {\r\n    const dispatch = useDispatch();\r\n    const [similar, setSimilar] = useState(false);\r\n    let [newPassword, setNewPassword] = useState<string>('');\r\n    let [newPasswordRepeat, setNewPasswordRepeat] = useState<string>('');\r\n    const [differentPassword, setDifferentPassword] = useState<string>('');\r\n\r\n    let responseStatusMessage = useSelector((state: RootState) => state.newPass.message);\r\n    const isLoading = useSelector((state: RootState) => state.auth.isLoading)\r\n\r\n    useEffect(()=> {\r\n        if(newPassword === newPasswordRepeat && newPasswordRepeat) {\r\n            setSimilar(true);\r\n            setDifferentPassword('');\r\n        } else {\r\n            setSimilar(false)\r\n            setDifferentPassword('Enter similar pass')\r\n        }\r\n    }, [newPassword, newPasswordRepeat]);\r\n\r\n    const resetPasswordToken = props.match.params.token;\r\n    const getDataFromServer = async() => {\r\n        // Вызов санки\r\n       similar && dispatch(newPasswordTC(newPassword, resetPasswordToken))\r\n        };\r\n\r\n    return (\r\n        <NewPswd newPassword={newPassword} setNewPassword={setNewPassword}\r\n                 newPasswordRepeat={newPasswordRepeat} setNewPasswordRepeat={setNewPasswordRepeat}\r\n                  responseStatusMessage={responseStatusMessage}\r\n                 getDataFromServer={getDataFromServer} similar={similar} differentPassword={differentPassword}\r\n                 isLoading={isLoading}\r\n\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(NewPswdContainer);\r\n","import React from 'react';\r\nimport NewPswdContainer from \"./NewPswdContainer\";\r\n\r\n// Отрисовка\r\nconst NewPswdPage = () => {\r\n    return (\r\n        <NewPswdContainer/>\r\n    );\r\n};\r\n\r\nexport default NewPswdPage;\r\n","import React from 'react';\r\nimport styles from './pswdRecover.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsPswdRecover {\r\n    putUserEmail: (value: string) => void,\r\n    userEmail: string,\r\n    responseStatus: boolean,\r\n    getDataFromServer: ()=> void,\r\n    responseStatusMessage: string,\r\n    isLoading: boolean\r\n}\r\n\r\nconst PswdRecover: React.FC<IPropsPswdRecover> = ({putUserEmail, userEmail,responseStatusMessage,\r\n                                                      getDataFromServer,isLoading  }) => {\r\n  return (\r\n    <div className={styles.pswdRecoverWrapper}>\r\n        <h2>Password Recovering Page</h2>\r\n        <div>\r\n            <Input inputType='email' value={userEmail} inputOnChange={putUserEmail}\r\n                   inputPlaceholder={'email'}\r\n            />\r\n            <span> {responseStatusMessage} </span>\r\n        </div>\r\n        <div>\r\n            <Button buttonName='Recover' buttonOnClick={getDataFromServer}/>\r\n        </div>\r\n        {isLoading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PswdRecover;\r\n","import React, {useState} from 'react';\r\nimport PswdRecover from \"./PswdRecover\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {passwordRecoverTC} from \"../../../../bll/pswdRecover_reducer\";\r\n\r\n\r\nconst PswdRecoverContainer = () => {\r\n    //\r\n    let [userEmail, putUserEmail] = useState<string>('');\r\n    let {success, message} = useSelector((state: RootState) => state.recoverPass);\r\n    const isLoading = useSelector((state: RootState) => state.auth.isLoading)\r\n    const dispatch = useDispatch();\r\n    const getDataFromServer = () => {\r\n        // Вызов санки\r\n        dispatch(passwordRecoverTC(userEmail))\r\n    };\r\n\r\n    return (\r\n        <PswdRecover userEmail={userEmail} putUserEmail={putUserEmail} responseStatus={success}\r\n                     getDataFromServer={getDataFromServer} responseStatusMessage={message}\r\n                     isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PswdRecoverContainer;\r\n","import React from 'react';\r\nimport PswdRecoverContainer from \"./PswdRecoverContainer\";\r\n\r\n// Отрисовка\r\nconst PswdRecoverPage = () => {\r\n    return (\r\n        <PswdRecoverContainer/>\r\n    );\r\n};\r\n\r\nexport default PswdRecoverPage;\r\n","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../bll/store\";\r\nimport {TO_AUTH, TO_REGISTRATION} from \"./routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst WithAuthHOC = (Component: any) => {\r\n    const WrapperContainer = () => {\r\n        const {authSuccess} = useSelector((state: RootState) => state.auth)\r\n        if (authSuccess)\r\n            return <Component/>\r\n        return (\r\n            <>\r\n                <span>need authorization</span>\r\n                <NavLink to={TO_AUTH}> Let's Sign In!</NavLink>\r\n                <div>don't have an account?</div>\r\n                <NavLink to={TO_REGISTRATION}>RegistrationPage</NavLink>\r\n            </>\r\n        )\r\n    }\r\n    return WrapperContainer;\r\n};\r\n\r\n\r\nexport default WithAuthHOC;","import React from 'react';\r\nimport styles from './uniCards.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport { CardsType } from '../../../../bll/types';\r\nimport {TO_CARD} from \"../../../common/routes\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n    setSearchInput: (value: string) => void,\r\n    searchInput: string,\r\n    setNewCardName: (value: string) => void,\r\n    newCardName: string,\r\n    cards: Array<CardsType>,\r\n    addCard: () => void\r\n}\r\n\r\nconst UniCards: React.FC<IProps> = ({setSearchInput,searchInput, cards,setNewCardName,\r\n                                        newCardName,addCard}) => {\r\n    const cardsElements = cards.map( c => <div className={styles.mainList}>\r\n        <div className={styles.itemName}>\r\n            <NavLink to={TO_CARD + `/${c._id}`}> {c.question}</NavLink>\r\n        </div>\r\n        <div className={styles.itemScore}>{c.grade}</div>\r\n        <div className={styles.buttonsInTheList}>\r\n            <Button buttonName={'edit'}/>\r\n            <Button buttonName={'delete'}/>\r\n        </div>\r\n    </div>)\r\n    return (\r\n        <div className={styles.uniCardsWrapper}>\r\n            <h2>UniCards</h2>\r\n            <Input inputPlaceholder={'item name'} value={searchInput}\r\n                   inputType={'text'} inputOnChange={setSearchInput} />\r\n            <Button buttonName={'search'}/>\r\n            <div className={styles.mainListWrapper}>\r\n                <Button buttonOnClick={addCard} buttonName={'add new Item'}/>\r\n                <Input inputPlaceholder={`Enter your Card's name`}\r\n                       inputType={'text'} value={newCardName} inputOnChange={setNewCardName}/>\r\n                {cardsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UniCards;\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport UniCards from \"./uniCards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {createCardTC, getCardsTC} from \"../../../../bll/cards_reducer\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n\r\nconst UniCardsContainer = (props: any) => {\r\n    const [searchInput, setSearchInput] = useState<string>('')\r\n    const [newCardName, setNewCardName] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n    const {token} = useSelector((state: RootState) => state.auth)\r\n    const {cards} = useSelector((state: RootState) => state.cards)\r\n    const {deckId} = props.match.params\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(token, deckId))\r\n    }, [deckId])\r\n    const addCard = () => {\r\n        const card = {cardsPack_id: deckId, question: newCardName}\r\n        dispatch(createCardTC(card, token))\r\n    }\r\n    return (\r\n        <UniCards cards={cards} searchInput={searchInput} setSearchInput={setSearchInput}\r\n                  newCardName={newCardName} setNewCardName={setNewCardName}\r\n                  addCard={addCard}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(UniCardsContainer);\r\n","import React from 'react';\r\nimport WithAuthHOC from \"../../../common/withAuth\";\r\nimport UniCardsContainer from \"./uniCardsContainer\";\r\n\r\n\r\nconst UniCardsPage = () => {\r\n  return (\r\n      <UniCardsContainer />\r\n  );\r\n};\r\n\r\nexport default WithAuthHOC(UniCardsPage);\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./uniCardsDeck.module.css\";\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {TO_CARDS} from \"../../../common/routes\";\r\n\r\ninterface IProps {\r\n    deleteDeck: (value: string) => void,\r\n    name: string,\r\n    grade: number,\r\n    deckId: string,\r\n    editDeck: (value: string) => void,\r\n    editNameInput: string,\r\n    setEditNameInput: (value: string) => void,\r\n    editGradeInput: number,\r\n    setEditGradeInput: (value: number) => void\r\n}\r\n\r\nconst SingleDeck: React.FC<IProps> = ({\r\n                                          editDeck,\r\n                                          deckId, name, editNameInput,\r\n                                          grade, deleteDeck, setEditNameInput,\r\n                                          editGradeInput, setEditGradeInput\r\n                                      }) => {\r\n    const [editDeckInputField, setEditDeckInputField] = useState<boolean>(false)\r\n    const editDeckInputFieldHandler = () => {\r\n        editDeck(deckId)\r\n        setEditDeckInputField(false)\r\n        setEditNameInput('')\r\n        setEditGradeInput(0)\r\n\r\n    }\r\n    return (\r\n        <div className={styles.mainList}>\r\n            {!editDeckInputField\r\n                ? <>\r\n                    <div className={styles.itemName}>\r\n                        <NavLink to={TO_CARDS + `/${deckId}`}>Name: {name}</NavLink>\r\n                    </div>\r\n                    <div className={styles.itemScore}>Grade:{grade} </div>\r\n                </>\r\n                : <>\r\n                    <Input value={editNameInput} inputType={'text'} inputPlaceholder={'type new name'}\r\n                           inputOnChange={setEditNameInput}/>\r\n                    <Input value={editGradeInput} inputType={'text'} inputPlaceholder={'type new grade'}\r\n                           inputOnChangeNumber={setEditGradeInput}/>\r\n                </>\r\n            }\r\n            <div className={styles.buttonsInTheList}>\r\n                {!editDeckInputField\r\n                    ? <>\r\n                        <Button buttonName={'edit'}\r\n                                buttonOnClickBoolean={() => setEditDeckInputField(true)}/>\r\n                        <Button buttonName={'delete'} buttonOnClick={() => deleteDeck(deckId)}/>\r\n                    </>\r\n                    : <>\r\n                        <Button buttonName={'save'}\r\n                                buttonOnClick={editDeckInputFieldHandler}/>\r\n                        <Button buttonName={'delete'} buttonOnClick={() => deleteDeck(deckId)}/>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDeck;","import React from 'react';\r\nimport styles from './uniCardsDeck.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {CardsDeckType} from \"../../../../bll/types\";\r\nimport SingleDeck from \"./singleDeck\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IProps {\r\n    createNewDeck: () => void,\r\n    setDeckName: (value: string) => void,\r\n    deleteDeck: (value: string) => void,\r\n    deckName: string,\r\n    decks: Array<CardsDeckType>,\r\n    editDeck: (value: string) => void,\r\n    setSearchInput: (value:string) => void,\r\n    searchInput: string,\r\n    editNameInput: string,\r\n    setEditNameInput: (value:string) => void,\r\n    editGradeInput: number,\r\n    setEditGradeInput: (value: number) => void\r\n}\r\n\r\n\r\nconst UniCardsDeck: React.FC<IProps> = ({searchInput,setSearchInput,\r\n                                            decks, setEditNameInput,\r\n                                            deleteDeck, editNameInput,\r\n                                            createNewDeck, setDeckName,\r\n                                            deckName, editGradeInput,\r\n                                            setEditGradeInput, editDeck\r\n                                        }) => {\r\n\r\n    const deckElements = decks.map(deck =>\r\n        <SingleDeck name={deck.name} key={deck._id} deckId={deck._id} grade={deck.grade}\r\n                    deleteDeck={deleteDeck} editNameInput={editNameInput}\r\n                    setEditNameInput={setEditNameInput}\r\n                    editGradeInput={editGradeInput} editDeck={editDeck}\r\n                    setEditGradeInput={setEditGradeInput}\r\n        />)\r\n    return (\r\n        <div className={styles.uniCardsWrapper}>\r\n            <h2>UniCardsDeck</h2>\r\n            <Input inputPlaceholder={'item name'} inputType={'text'}\r\n                   value={searchInput} inputOnChange={setSearchInput}/>\r\n            <Button buttonName={'search'}/>\r\n            <div className={styles.mainListWrapper}>\r\n                <Input inputPlaceholder={`Enter your Deck's name`}\r\n                       inputType={'text'} value={deckName} inputOnChange={setDeckName}\r\n                />\r\n                <Button buttonName={'Add'} buttonOnClick={createNewDeck}/>\r\n                <div className={styles.loading}><Loading/></div>\r\n                {deckElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UniCardsDeck;\r\n","import React from 'react'\r\nimport s from '../modals.module.css'\r\n\r\ninterface IModal {\r\n    children: React.ReactNode,\r\n    setIsOpenModal: (value: boolean) => void\r\n}\r\n\r\nconst ModalDelete: React.FC<IModal> = ({children, setIsOpenModal}) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.modelWrapper} onClick={()=>setIsOpenModal(false)}/>\r\n            <div className={s.childrenWrapper}>\r\n                <div className={s.children}>{children}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalDelete;\r\n","import React from 'react';\r\nimport ModalDelete from \"./modalDelete\";\r\nimport Button from \"../../../common/button/Button\";\r\n\r\ninterface IProps {\r\n    titleName: string,\r\n    isOpenModal: boolean,\r\n    setIsOpenModal: (value: boolean) => void,\r\n    answerFromModal: (value: boolean) => void\r\n}\r\n\r\nconst ModalContainerDelete: React.FC<IProps> = ({answerFromModal,setIsOpenModal,\r\n                                                    isOpenModal,titleName}) => {\r\n\r\n    if(isOpenModal) return (\r\n            <ModalDelete setIsOpenModal={setIsOpenModal}>\r\n                <h3>{titleName}</h3>\r\n                <div>\r\n                    <Button buttonOnClickBoolean={()=>answerFromModal(true)} buttonName={'Apply'}/>\r\n                    <Button buttonOnClickBoolean={()=>setIsOpenModal(false)} buttonName={'Cancel'}/>\r\n                </div>\r\n            </ModalDelete>\r\n    );\r\n    else return null\r\n};\r\n\r\nexport default ModalContainerDelete;","import React, {useEffect, useState} from 'react';\r\nimport UniCardsDeck from \"./uniCardsDeck\";\r\nimport {\r\n    createNewCardDeckTC,\r\n    deleteDeckTC,\r\n    editDeckTC,\r\n    getDecksTC,\r\n    setCurrentDeckIdAC\r\n} from \"../../../../bll/cardsDeck_reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport ModalContainerDelete from \"../../modalsFeatures/modalForDecks/modalContainerDelete\";\r\n\r\nconst UniCardsContainerDeck = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [deckName, setDeckName] = useState<string>('')\r\n    const [isOpenModal, setIsOpenModal] = useState<boolean>(false)\r\n    const [searchInput, setSearchInput] = useState<string>('')\r\n    const [editNameInput, setEditNameInput] = useState<string>('')\r\n    const [editGradeInput, setEditGradeInput] = useState<number>(0)\r\n    useEffect(() => {\r\n        dispatch(getDecksTC(token))\r\n    }, [])\r\n    const {token, id} = useSelector((state: RootState) => state.auth)\r\n    const {decks, currentDeckId} = useSelector((state: RootState) => state.decks)\r\n\r\n\r\n    const createNewDeck = () => {\r\n        const cardsDeck = {\r\n            user_id: id,\r\n            name: deckName\r\n        };\r\n        dispatch(createNewCardDeckTC(cardsDeck, token));\r\n        setDeckName('');\r\n    }\r\n    const editDeck = (_deckId: string) => {\r\n        const editedDeck = {\r\n            _id: _deckId,\r\n            grade: editGradeInput,\r\n            name: editNameInput\r\n        }\r\n        dispatch(editDeckTC(editedDeck, token))\r\n    }\r\n    const deleteDeck = (deckId: string) => {\r\n        dispatch(setCurrentDeckIdAC(deckId))\r\n        setIsOpenModal(true)\r\n    }\r\n    const answerFromDeleteModal = (answer: boolean) => {\r\n        if (answer) {\r\n            dispatch(deleteDeckTC(token, currentDeckId))\r\n            setIsOpenModal(false)\r\n        } else setIsOpenModal(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <UniCardsDeck createNewDeck={createNewDeck}\r\n                          searchInput={searchInput}\r\n                          setSearchInput={setSearchInput}\r\n                          decks={decks}\r\n                          editDeck={editDeck}\r\n                          deckName={deckName} setDeckName={setDeckName}\r\n                          deleteDeck={deleteDeck}\r\n                          editNameInput={editNameInput}\r\n                          setEditNameInput={setEditNameInput}\r\n                          editGradeInput={editGradeInput}\r\n                          setEditGradeInput={setEditGradeInput}/>\r\n            <ModalContainerDelete setIsOpenModal={setIsOpenModal}\r\n                                  answerFromModal={answerFromDeleteModal}\r\n                                  isOpenModal={isOpenModal}\r\n                                  titleName={'Delete Deck ?'}/>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default UniCardsContainerDeck;","import React from 'react';\r\nimport UniCardsContainerDeck from \"./uniCardsContainerDeck\";\r\nimport WithAuthHOC from \"../../../common/withAuth\";\r\n\r\n\r\nconst UniCardsDeckPage = () => {\r\n  return (\r\n      <UniCardsContainerDeck />\r\n  );\r\n};\r\n\r\nexport default WithAuthHOC(UniCardsDeckPage);\r\n","import React from 'react'\r\nimport s from '../modals.module.css'\r\n\r\ninterface IModal {\r\n    children: any\r\n    isOpen: boolean\r\n}\r\n\r\nconst Modal: React.FC<IModal> = ({children, isOpen}) => {\r\n    if (!isOpen) return null\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.modelWrapper}/>\r\n            <div className={s.childrenWrapper}>\r\n                <div className={s.children}>{children}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, {useState} from 'react';\r\nimport Modal from \"./modal\";\r\nimport Button from \"../../../common/button/Button\";\r\n\r\n\r\ninterface IProps {\r\n    onModelButtonClickName: string,\r\n    modalTitle: string\r\n}\r\n\r\nconst ModalContainer: React.FC<IProps> = ({onModelButtonClickName,modalTitle}) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    return (\r\n        <>\r\n            <Button buttonOnClickBoolean={()=>setIsOpen(!isOpen)} buttonName={onModelButtonClickName}/>\r\n            <Modal isOpen={isOpen}>\r\n                <h3>{modalTitle}</h3>\r\n                <Button buttonOnClickBoolean={() => setIsOpen(false)} buttonName={'apply'}/>\r\n                <Button buttonOnClickBoolean={() => setIsOpen(false)} buttonName={'close'}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;","import React from 'react'\r\nimport ModalContainer from './modalContainer';\r\n\r\nconst ModalsPage: React.FC = () => {\r\n\r\n    return (\r\n            <ModalContainer onModelButtonClickName={'name'} modalTitle={'title'}/>\r\n\r\n    );\r\n};\r\n\r\nexport default ModalsPage;\r\n","import React from 'react'\r\n\r\nconst ModalsPageDelete: React.FC = () => {\r\n\r\n    return (\r\n        <div>yo!</div>\r\n            // <ModalContainerDelete setIsOpenModal={true}/>\r\n\r\n    );\r\n};\r\n\r\nexport default ModalsPageDelete;\r\n","import React from 'react'\r\nimport styles from \"./uniCards.module.css\";\r\nimport {CardsType} from \"../../../../bll/types\";\r\nimport Button from \"../../../common/button/Button\";\r\n\r\ninterface IProps {\r\n    setIsShowed: (value: boolean) => void,\r\n    isShowed: boolean,\r\n    setIsShowedNext: (value: boolean) => void,\r\n    onNextClicked: () => void,\r\n    isShowedNext: boolean,\r\n    currentCard: CardsType,\r\n}\r\n\r\n\r\nconst SingleCard: React.FC<IProps> = ({currentCard, setIsShowed, isShowed,\r\n                                          isShowedNext,onNextClicked,setIsShowedNext}) => {\r\n    return (\r\n        <div className={styles.cardMainStyle}>\r\n            <div>question:\r\n                <div>{currentCard.question}</div>\r\n            </div>\r\n            <div>answer:\r\n                {isShowed\r\n                    ? <>\r\n                        <div>{currentCard.answer}</div>\r\n                        {!isShowedNext\r\n                            ?<div className={styles.answeringButtons}>\r\n                            <Button buttonOnClickBoolean={()=>setIsShowedNext(true)} buttonName={\"didn't know\"}/>\r\n                            <Button buttonOnClickBoolean={()=>setIsShowedNext(true)}\r\n                                buttonName={'something answered'}/>\r\n                            <Button buttonOnClickBoolean={()=>setIsShowedNext(true)} buttonName={'bad answer'}/>\r\n                            <Button buttonOnClickBoolean={()=>setIsShowedNext(true)} buttonName={'good answer'}/>\r\n                            <Button buttonOnClickBoolean={()=>setIsShowedNext(true)} buttonName={'perfect easy'}/>\r\n                        </div>\r\n                            :<Button booleanValue={isShowedNext}\r\n                                     buttonName={'next'}\r\n                                     buttonOnClick={onNextClicked}/>\r\n                        }\r\n                    </>\r\n                    : <Button booleanValue={isShowed}\r\n                              buttonName={'show Answer'}\r\n                              buttonOnClickBoolean={() => setIsShowed(true)}/>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>grade: {currentCard.grade}</div>\r\n            </div>\r\n            <div>\r\n                <div>rating: {currentCard.rating}</div>\r\n            </div>\r\n            <div>\r\n                <div>shots: {currentCard.shots}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SingleCard;","import React, {useEffect, useState} from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport SingleCard from \"./singleCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {setCardAC} from \"../../../../bll/cards_reducer\";\r\nimport withAuth from '../../../common/withAuth'\r\n\r\nconst SingleCardContainer = (props:any) => {\r\n    const dispatch = useDispatch();\r\n    const {currentCard} = useSelector((state:RootState) => state.cards)\r\n    const [isShowed, setIsShowed] = useState<boolean>(false)\r\n    const [isShowedNext, setIsShowedNext] = useState<boolean>(false)\r\n    useEffect(()=>{\r\n        const {cardId} = props.match.params\r\n        dispatch(setCardAC(cardId))\r\n    },[])\r\n    const onNextClicked = () => {\r\n        setIsShowed(false)\r\n        setIsShowedNext(false)\r\n    }\r\n     return <SingleCard isShowed={isShowed}\r\n                        setIsShowed={setIsShowed}\r\n                        isShowedNext={isShowedNext}\r\n                        setIsShowedNext={setIsShowedNext}\r\n                        onNextClicked={onNextClicked}\r\n                        currentCard={currentCard}\r\n     />\r\n}\r\n\r\nexport default withAuth(withRouter(SingleCardContainer))","import React from \"react\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport LoginizationPage from \"../features/authFeatures/loginization/loginizationPage\";\r\nimport ProfilePage from \"../features/authFeatures/profile/profile\";\r\nimport RegistrationPage from \"../features/authFeatures/registration/registrationPage\";\r\nimport NewPswdPage from \"../features/authFeatures/newPassword/NewPswdPage\";\r\nimport PswdRecoverPage from \"../features/authFeatures/passwordRecover/PswdRecoverPage\";\r\nimport UniCardsPage from \"../features/uniCardsFeatures/uniCards/uniCardsPage\";\r\nimport UniCardsDeckPage from \"../features/uniCardsFeatures/uniCardsDeck/uniCardsDeckPage\";\r\nimport ModalsPage from \"../features/modalsFeatures/defaultModal/modalsPage\";\r\nimport ModalsPageDelete from \"../features/modalsFeatures/modalForDecks/modalsPageDelete\";\r\nimport SingleCardContainer from \"../features/uniCardsFeatures/uniCards/singleCardContainer\";\r\n\r\nexport const TO_AUTH = '/auth/';\r\nexport const TO_NEW_PASSWORD = '/new-password/:token';\r\nexport const TO_PROFILE = '/profile/';\r\nexport const TO_RECOVER_PASSWORD = '/recover-password/';\r\nexport const TO_REGISTRATION = '/registration/';\r\nexport const TO_CARDS = '/cards/:id';\r\nexport const TO_CARD = '/simple-card/:cardId';\r\nexport const TO_CARDSDECK = '/cards-deck/';\r\nexport const TO_MODALS = '/test-modals/';\r\nexport const TO_DELETE_MODULE = '/delete-modal/';\r\n\r\nexport const AllRoutes: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={TO_AUTH} render={()=> <LoginizationPage />} />\r\n            <Route path={TO_NEW_PASSWORD + '/:token'} render={()=> <NewPswdPage />} />\r\n            <Route path={TO_PROFILE} render={()=> <ProfilePage />} />\r\n            <Route path={TO_RECOVER_PASSWORD} render={()=> <PswdRecoverPage />} />\r\n            <Route path={TO_REGISTRATION} render={()=> <RegistrationPage />} />\r\n            <Route path={TO_CARDS + '/:deckId'} render={()=> <UniCardsPage />} />\r\n            <Route path={TO_CARDSDECK} render={()=> <UniCardsDeckPage />} />\r\n            <Route path={TO_CARD + '/:cardId'} render={()=> <SingleCardContainer />} />\r\n            <Route path={TO_MODALS} render={()=> <ModalsPage />} />\r\n            <Route path={TO_DELETE_MODULE} render={()=> <ModalsPageDelete />} />\r\n            <Route exact path='/' render={()=> <Redirect to={TO_AUTH}/>} />\r\n            <Route render={()=> <div>404 BAD GATEWAY</div>} />\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {\r\n    TO_AUTH,\r\n    TO_CARDS,\r\n    TO_CARDSDECK, TO_MODALS,\r\n    TO_NEW_PASSWORD,\r\n    TO_PROFILE,\r\n    TO_RECOVER_PASSWORD,\r\n    TO_REGISTRATION\r\n} from \"../routes\";\r\nimport Button from \"../button/Button\";\r\n\r\n\r\ninterface IHeaderProps {\r\n    setLinks: (value: boolean) => void,\r\n    links: boolean,\r\n    myName: string\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({setLinks, links, myName}) => {\r\n    return (\r\n        <>\r\n            <div className={styles.headerWrapper}>\r\n                {links\r\n                    ? <>\r\n                        <div>\r\n                            <Button buttonName={'hide links'} buttonOnClickBoolean={() => {\r\n                                setLinks(!links)\r\n                            }}/>\r\n                            <span>{myName}</span>\r\n                        </div>\r\n                        <NavLink to={TO_AUTH}>LoginizationPage</NavLink>\r\n                        <NavLink to={TO_NEW_PASSWORD}>NewPasswordPage</NavLink>\r\n                        <NavLink to={TO_PROFILE}>ProfilePage</NavLink>\r\n                        <NavLink to={TO_RECOVER_PASSWORD}>PasswordRecoveringPage</NavLink>\r\n                        <NavLink to={TO_REGISTRATION}>RegistrationPage</NavLink>\r\n                        <NavLink to={TO_CARDS}>Cards</NavLink>\r\n                        <NavLink to={TO_CARDSDECK}>Card's Deck</NavLink>\r\n                        <NavLink to={TO_MODALS}>Modals</NavLink>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <Button buttonName={'show links'} buttonOnClickBoolean={() => {\r\n                            setLinks(!links)\r\n                        }}/>\r\n\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, {useState} from 'react'\r\nimport Header from \"./headers\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\nconst HedaerContainer = () => {\r\n    const [links, setLinks] = useState<boolean>(true)\r\n    const {myName} = useSelector((state:RootState) => state.auth)\r\n\r\n  return <Header setLinks={setLinks} links={links} myName={myName} />\r\n};\r\n\r\nexport default HedaerContainer;","import React from 'react';\r\nimport './App.module.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from '../bll/store';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport s from './App.module.css';\r\nimport {AllRoutes} from \"./common/routes\";\r\nimport HedaerContainer from \"./common/header/headerContainer\";\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={s.App}>\r\n        <HedaerContainer />\r\n\r\n            <AllRoutes />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}