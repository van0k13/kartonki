{"version":3,"sources":["ui/features/uniCardsFeatures/uniCards/uniCards.module.css","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeck.module.css","ui/features/authFeatures/profile/profile.module.css","ui/common/header/header.module.css","ui/App.module.css","ui/common/button/Button.module.css","ui/common/loadingToggle/Loading.module.css","ui/common/input/Input.module.css","ui/features/modalsFeatures/modals.module.css","bll/types.tsx","dal/api.ts","bll/auth_reducer.tsx","bll/newPswd_reducer.tsx","bll/profile_reducer.tsx","bll/pswdRecover_reducer.tsx","bll/registr_reducer.tsx","bll/cards_reducer.tsx","bll/cardsDeck_reducer.tsx","bll/store.tsx","ui/common/input/Input.tsx","ui/common/button/Button.tsx","ui/features/authFeatures/loginization/loginization.tsx","ui/features/authFeatures/loginization/loginizationContainer.tsx","ui/features/authFeatures/loginization/loginizationPage.tsx","ui/common/withAuth.tsx","ui/features/authFeatures/profile/myDecks/myDecks.tsx","ui/features/authFeatures/profile/profile.tsx","ui/features/authFeatures/profile/profileContainer.tsx","ui/features/authFeatures/profile/profilePage.tsx","ui/common/loadingToggle/Loading.tsx","ui/features/authFeatures/registration/registration.tsx","ui/features/authFeatures/registration/registrationContainer.tsx","ui/features/authFeatures/registration/registrationPage.tsx","ui/features/authFeatures/newPassword/NewPswd.tsx","ui/features/authFeatures/newPassword/NewPswdContainer.tsx","ui/features/authFeatures/newPassword/NewPswdPage.tsx","ui/features/authFeatures/passwordRecover/PswdRecover.tsx","ui/features/authFeatures/passwordRecover/PswdRecoverContainer.tsx","ui/features/authFeatures/passwordRecover/PswdRecoverPage.tsx","ui/common/PaginationComponent.tsx","ui/features/uniCardsFeatures/uniCards/uniCards.tsx","ui/features/modalsFeatures/modalForNewCard/modalNewCard.tsx","ui/features/modalsFeatures/modalForNewCard/modalContainerNewCard.tsx","ui/features/modalsFeatures/modalForDeletes/modalDelete.tsx","ui/features/modalsFeatures/modalForDeletes/modalContainerDelete.tsx","ui/features/uniCardsFeatures/uniCards/uniCardsContainer.tsx","ui/features/uniCardsFeatures/uniCards/uniCardsPage.tsx","ui/features/uniCardsFeatures/uniCardsDeck/singleDeck.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeck.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsContainerDeck.tsx","ui/features/uniCardsFeatures/uniCardsDeck/uniCardsDeckPage.tsx","ui/features/modalsFeatures/defaultModal/modal.tsx","ui/features/modalsFeatures/defaultModal/modalContainer.tsx","ui/features/modalsFeatures/defaultModal/modalsPage.tsx","ui/features/uniCardsFeatures/uniCards/singleCard/answeringButtons.tsx","ui/features/uniCardsFeatures/uniCards/singleCard/singleCard.tsx","ui/features/uniCardsFeatures/uniCards/singleCard/singleCardContainer.tsx","ui/common/routes.tsx","ui/common/header/headers.tsx","ui/common/header/headerContainer.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","REGISTRATE_ERROR","LOGIN_ERROR","LOGIN_SUCCESS","IS_LOADING","SET_TOKEN","EDIT_CARD","CREATE_CARD","GET_DECKS","SET_DECK_PAGE","SET_CARD_PAGE","GET_DECK_ID","SET_DECK_NAME","CREATE_DECK","SET_MY_DECKS","SET_MY_NAME","instance","axios","create","baseURL","authAPI","loginizationAPI","email","password","rememberMe","a","post","response","data","registrationAPI","passwordRecoverAPI","html1","html2","setNewPasswordAPI","resetPasswordToken","getProfileAPI","token","setProfileAPI","name","avatar","put","cardsDeckAPI","getMyDecks","userId","get","getAllCardsDecks","pageCount","page","addNewCardsDeck","cardsPack","updateCardsDeck","deleteCardsDeck","id","delete","cardsAPI","getCards","addCard","card","updateCard","deleteCard","initialState","authSuccess","myName","errorMessage","isLoading","isLoadingAC","value","type","setTokenAC","loginizationErrorAC","authReducer","state","action","loginSuccess","success","message","newPasswordTC","dispatch","error","setNewPasswordErrorAC","setNewPasswordSuccessAC","recoverSuccess","newPasswordReducer","myDecks","setMyNameAvatarAC","setAvatarOrNameTC","newName","newAvatar","getState","auth","profile","avatarOnServer","nameOnServer","updatedUser","profileReducer","decks","passwordRecoverSuccessAC","passwordRecoverErrorAC","passwordRecoveringReducer","registeredSuccess","registrationErrorAC","registrationReducer","defCurrentCard","answer","question","cardsPack_id","grade","rating","shots","created","updated","__v","_id","cards","currentCard","cardsTotalCount","maxGrade","minGrade","cardID","cardsDeckID","setCardPageAC","getCardsAC","getCardsTC","cardsReducer","length","find","c","cardId","updatedCard","newCard","successBoolean","currentDeckId","currentDeckName","cardPacksTotalCount","setCardsDecksAC","cardsDeckReducer","deckId","deckName","cardsDeck","reducerPack","combineReducers","newPass","recoverPass","registr","store","createStore","applyMiddleware","thunkMiddleware","Input","inputOnChangeNumber","inputPlaceholder","checked","inputType","inputOnChange","inputOnChangeChecked","className","s","inputWrapper","onChange","e","currentTarget","Number","placeholder","Button","buttonOnClick","buttonName","buttonOnClickBoolean","booleanValue","useSelector","buttonWrapper","worksButton","disabled","onClick","Loginization","login","setPassword","setLogin","setRememberMe","signIn","loginError","styles","loginizationWrapper","to","TO_REGISTRATION","TO_RECOVER_PASSWORD","LoginizationContainer","useDispatch","useState","TO_PROFILE","loginizationTC","LoginizationPage","WithAuthHOC","Component","TO_AUTH","MyDecks","decksElements","map","d","singleDeck","alert","src","alt","Profile","myOrAllDecks","setMyOrAllDecks","changeName","setChangeMyName","changeMyName","setNewName","setChangeMyAvatarToggle","changeMyAvatarToggle","changeAvatar","profileWrapper","avatarWrapper","myInfo","nameBlock","deckBlock","myOrAllDecksBlock","TO_CARDSDECK","ProfileContainer","changeMyNameToggle","setChangeMyNameToggle","newNOURLChange","setNOURLChange","useEffect","cardPacks","Loading","points","setPoints","loadingWrapper","loadingProgress","setTimeout","Registration","repeatingPassword","setRepeatingPassword","registerMe","similar","wrongRepeatingPassword","messageFromServer","registrationWrapper","RegistrationContainer","setSimilar","registrationTC","RegistrationPage","NewPswd","newPassword","setNewPassword","newPasswordRepeat","setNewPasswordRepeat","differentPassword","getDataFromServer","responseStatusMessage","newPasswordWrapper","NewPswdContainer","useParams","setDifferentPassword","NewPswdPage","PswdRecover","putUserEmail","userEmail","pswdRecoverWrapper","PswdRecoverContainer","responseStatus","PswdRecoverPage","Paginator3000","itemsTotalCount","onCurrentPageClick","currentPage","pages","pagesCount","Math","ceil","i","push","p","key","selectedPage","spanPage","UniCards","setSearchInput","searchInput","uniCardsWrapper","mainListWrapper","TO_CARD","startLink","listHeader","mainList","itemName","itemScore","buttonsInTheList","ModalNewCard","children","setIsOpenModal","main","modelWrapper","childrenWrapper","ModalContainerNewCard","answerFromModal","setIsOpenModalNewCard","cardQuestion","isOpenModalNewCard","titleName","cardAnswer","setCardQuestion","setCardAnswer","ModalDelete","ModalContainerDelete","setIsOpenModalDelete","isOpenModalDelete","UniCardsContainer","card_Id","setCard_Id","createCardTC","data2","deleteCardTC","SingleDeck","setDeckName","editDeck","editNameInput","deleteDeck","setEditNameInput","setEditGradeInput","editDeckInputField","setEditDeckInputField","TO_CARDS","UniCardsDeck","createNewDeck","setNewDeckName","newDeckName","editGradeInput","deckElements","deck","uniCardsDeckWrapper","UniCardsContainerDeck","getDecksTC","newCardsDeck","newCardsPack","createNewCardDeckTC","user_id","setCurrentDeckNameAC","_deckId","editedDeck","editDeckTC","setCurrentDeckIdAC","setDeckPageAC","deleteDeckTC","Modal","isOpen","ModalContainer","onModelButtonClickName","modalTitle","setIsOpen","ModalsPage","AnsweringButtons","setIsShowedNext","setGrade","onClickHandler","answeringButtons","SingleCard","setIsShowed","isShowed","isShowedNext","onNextClicked","cardMainStyle","withAuth","cardIndex","setCardIndex","passedCardsNumber","setPassedCardsNumber","newCardGrade","AllRoutes","path","render","TO_NEW_PASSWORD","exact","Header","setLinks","links","headerWrapper","secondWrapper","firstWrapper","href","HedaerContainer","App","Main","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8a38b8d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniCardsWrapper\":\"uniCards_uniCardsWrapper__2U9Xb\",\"mainListWrapper\":\"uniCards_mainListWrapper__11Wk1\",\"startLink\":\"uniCards_startLink__3MeI6\",\"mainList\":\"uniCards_mainList__2BJJo\",\"listHeader\":\"uniCards_listHeader__2l4CF\",\"buttonsInTheList\":\"uniCards_buttonsInTheList__1seOh\",\"loading\":\"uniCards_loading__2P28i\",\"itemName\":\"uniCards_itemName__3_6vV\",\"cardMainStyle\":\"uniCards_cardMainStyle__3Wahs\",\"answeringButtons\":\"uniCards_answeringButtons__2RmW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uniCardsDeckWrapper\":\"uniCardsDeck_uniCardsDeckWrapper__3s82f\",\"mainListWrapper\":\"uniCardsDeck_mainListWrapper__9Pt5w\",\"mainList\":\"uniCardsDeck_mainList__1uF9i\",\"listHeader\":\"uniCardsDeck_listHeader__1xxGV\",\"buttonsInTheList\":\"uniCardsDeck_buttonsInTheList__--3H8\",\"pages\":\"uniCardsDeck_pages__2R8oS\",\"selectedPage\":\"uniCardsDeck_selectedPage__2qM1Q\",\"itemName\":\"uniCardsDeck_itemName__1E4gY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"profile_profileWrapper__2Io-f\",\"avatarWrapper\":\"profile_avatarWrapper__2C-sY\",\"myInfo\":\"profile_myInfo__63hkg\",\"nameBlock\":\"profile_nameBlock__QhLMH\",\"decks\":\"profile_decks__n9Fx9\",\"singleDeck\":\"profile_singleDeck__3Cu46\",\"myOrAllDecksBlock\":\"profile_myOrAllDecksBlock__ojiNz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__1bHj-\",\"firstWrapper\":\"header_firstWrapper__Sevkj\",\"secondWrapper\":\"header_secondWrapper__7VlWN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LKvuZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__11CDY\",\"worksButton\":\"Button_worksButton__1Snct index_mainButton__2QnTO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrapper\":\"Loading_loadingWrapper__1T1eA\",\"loadingProgress\":\"Loading_loadingProgress__25Q2Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Input_inputWrapper__2iRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modelWrapper\":\"modals_modelWrapper__39OvK\",\"childrenWrapper\":\"modals_childrenWrapper__2xHz2\"};","export interface IStateProfile {\r\n  myDecks: Array<CardsDeckType>,\r\n  myName: string,\r\n  success: boolean,\r\n  avatar: string\r\n}\r\n\r\nexport interface IStatePasswordRecover {\r\n  success: boolean\r\n  message: string\r\n}\r\nexport interface IStateRegistr {\r\n  message: string,\r\n  registeredSuccess: boolean\r\n}\r\nexport interface IStateLogin {\r\n  id: number,\r\n  myName: string,\r\n  authSuccess: boolean,\r\n  errorMessage: string,\r\n  token: string\r\n  isLoading: boolean\r\n}\r\nexport interface IStateCards {\r\n  cards: Array<CardsType>\r\n  currentCard: CardsType\r\n  cardsDeckID: string\r\n  cardID: string\r\n  success: boolean\r\n  cardsTotalCount: number\r\n  maxGrade: number\r\n  minGrade: number\r\n  page: number\r\n  pageCount: number\r\n}\r\nexport type IStateCardsDeck  = {\r\n  decks: Array<CardsDeckType>,\r\n  currentDeckId: string,\r\n  currentDeckName: string,\r\n  cardPacksTotalCount: number,\r\n  maxGrade: number,\r\n  minGrade: number\r\n  page: number,\r\n  pageCount: number\r\n}\r\n\r\nexport const FIRST_ACTION = 'FIRST_ACTION'\r\nexport const SECOND_ACTION = 'SECOND_ACTION'\r\nexport const REGISTRATE_SUCCESS = 'registr_reducer/REGISTRATE_SUCCESS'\r\nexport const REGISTRATE_ERROR = 'registr_reducer/REGISTRATE_ERROR'\r\nexport const LOGIN_ERROR = 'auth_reducer/LOGIN_ERROR'\r\nexport const LOGIN_SUCCESS = 'auth_reducer/LOGIN_SUCCESS'\r\nexport const PASSWORD_RECOVER_SUCCESS = 'PASSWORD_RECOVER_SUCCESS';\r\nexport const PASSWORD_RECOVER_ERROR = 'PASSWORD_RECOVER_ERROR';\r\nexport const NEW_PASSWORD_SUCCESS = 'NEW_PASSWORD_SUCCESS';\r\nexport const NEW_PASSWORD_ERROR = 'NEW_PASSWORD_ERROR';\r\nexport const IS_LOADING = 'auth_reducer/IS_LOADING';\r\nexport const SET_TOKEN = 'auth_reducer/SET_TOKEN';\r\nexport const EDIT_CARD = 'cards_reducer/EDIT_CARD';\r\nexport const DELETE_CARD = 'cards_reducer/DELETE_CARD';\r\nexport const CREATE_CARD = 'cards_reducer/CREATE_CARD';\r\nexport const GET_DECKS = 'cardsDeck_reducer/GET_DECKS';\r\nexport const SET_DECK_PAGE = 'cardsDeck_reducer/SET_DECK_PAGE';\r\nexport const SET_CARD_PAGE = 'cardsDeck_reducer/SET_CARD_PAGE';\r\nexport const GET_DECK_ID = 'cardsDeck_reducer/GET_DECK_ID';\r\nexport const SET_DECK_NAME = 'cardsDeck_reducer/SET_DECK_NAME';\r\nexport const CREATE_DECK = 'cardsDeck_reducer/CREATE_DECK';\r\nexport const DELETE_DECK = 'cardsDeck_reducer/DELETE_DECK';\r\nexport const SET_MY_DECKS = 'profile_reducer/SET_MY_DECKS';\r\nexport const SET_MY_NAME = 'profile_reducer/SET_MY_NAME';\r\nexport const SET_CARDS = 'SET_CARDS';\r\nexport const SET_CARD = 'SET_CARD';\r\n\r\n                                                      // typos\r\n\r\nexport type CardsDeckType = {\r\n  _id: string\r\n  user_id: string\r\n  name: string\r\n  path: string // папка\r\n  grade: number // средняя оценка карточек\r\n  shots: number // количество попыток\r\n  rating: number // лайки\r\n  type:  string//\"pack \" // ещё будет \"folder\" (папка)\r\n  created: string\r\n  updated: string\r\n}\r\n\r\nexport type CardsType = {\r\n  answer: string\r\n  question: string\r\n  cardsPack_id: string\r\n  grade: number\r\n  rating: number\r\n  shots: number\r\n  type: string\r\n  created: string\r\n  updated: string\r\n  __v: number\r\n  _id: string\r\n}\r\n\r\nexport interface ISetCards {\r\n  type: typeof SET_CARDS\r\n  cards: Array<CardsType>\r\n  cardsTotalCount: number,\r\n  pageCount: number,\r\n  page: number\r\n}\r\nexport interface ISetCard {\r\n  type: typeof SET_CARD\r\n  cardId: string\r\n}\r\nexport interface IGetCardsDecks {\r\n  type: typeof GET_DECKS\r\n  decks: Array<CardsDeckType>\r\n  cardPacksTotalCount: number\r\n  pageCount: number,\r\n  page: number\r\n}\r\nexport interface ISetDeckPage {\r\n  type: typeof SET_DECK_PAGE,\r\n  page: number\r\n}\r\nexport interface ISetMyDecks {\r\n  type: typeof SET_MY_DECKS,\r\n  decks: Array<CardsDeckType>\r\n}\r\nexport interface ISetCardPage {\r\n  type: typeof SET_CARD_PAGE,\r\n  page: number\r\n}\r\nexport interface IGetDeckId {\r\n  type: typeof GET_DECK_ID\r\n  deckId: string\r\n}\r\nexport interface ISetMyName {\r\n  type: typeof SET_MY_NAME\r\n  myName:string\r\n  avatar:string\r\n}\r\nexport interface ISetDeckName {\r\n  type: typeof SET_DECK_NAME\r\n  deckName: string\r\n}\r\nexport interface ICreateDeleteDeckActionCreator {\r\n  type: typeof CREATE_DECK | typeof DELETE_DECK\r\n  cardsDeck: CardsDeckType\r\n}\r\nexport interface ICreateCardActionCreator {\r\n  type: typeof CREATE_CARD\r\n  newCard: CardsType\r\n  successBoolean: boolean\r\n}\r\nexport interface IDeleteCardActionCreator {\r\n  type: typeof DELETE_CARD\r\n  cardsDeckID: string\r\n  cardId: string\r\n}\r\nexport interface IEditCardActionCreator {\r\n  type: typeof EDIT_CARD\r\n  updatedCard: CardsType\r\n}\r\nexport interface IisLoadingActionCreator {\r\n  type: typeof IS_LOADING\r\n  value: boolean\r\n}\r\nexport interface ISetToken {\r\n  type: typeof SET_TOKEN\r\n  token: string\r\n}\r\nexport interface firstActionCreator {\r\n  type: typeof FIRST_ACTION\r\n  payload: any\r\n}\r\nexport interface secondActionCreator {\r\n  type: typeof SECOND_ACTION\r\n  payload: any\r\n}\r\nexport interface ILoginSuccess {\r\n  type: typeof LOGIN_SUCCESS,\r\n  id: string,\r\n  loginSuccess: boolean,\r\n  myName: string,\r\n  token: string\r\n}\r\nexport interface ILoginError {\r\n  type: typeof LOGIN_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IRegistrateSuccess {\r\n  type: typeof REGISTRATE_SUCCESS,\r\n  registeredSuccess:boolean\r\n}\r\nexport interface IRegistrateError {\r\n  type: typeof REGISTRATE_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IPasswordRecoverSuccess {\r\n  type: typeof PASSWORD_RECOVER_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface IPasswordRecoverError {\r\n  type: typeof PASSWORD_RECOVER_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface INewPasswordSuccess {\r\n  type: typeof NEW_PASSWORD_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface INewPasswordError {\r\n  type: typeof NEW_PASSWORD_ERROR,\r\n  errorMessage: string\r\n}\r\n\r\nexport type ChatActionTypes = firstActionCreator| secondActionCreator| IRegistrateSuccess | IRegistrateError |\r\n    IPasswordRecoverSuccess | IPasswordRecoverError | ILoginSuccess | ILoginError | INewPasswordSuccess |\r\n    INewPasswordError | IisLoadingActionCreator | IEditCardActionCreator | IDeleteCardActionCreator |\r\n    ICreateCardActionCreator | ICreateDeleteDeckActionCreator | IGetCardsDecks | ISetToken | ISetCards |\r\n    IGetDeckId | ISetCard | ISetDeckName | ISetDeckPage | ISetCardPage | ISetMyName | ISetMyDecks\r\n","import axios from \"axios\";\r\nimport {CardsDeckType, CardsType} from \"../bll/types\";\r\n\r\nexport const baseURL = 'https://cards-nya-back.herokuapp.com/1.0/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport interface ILoginization {\r\n    _id: string;\r\n    success: boolean;\r\n    name: string;\r\n    error: string;\r\n    token: string;\r\n}\r\n\r\nexport interface IRegistration {\r\n    success: boolean;\r\n    error: string;\r\n}\r\ntype authMeResponse = {\r\n    email: string,\r\n    isAdmin: false,\r\n    name: string,\r\n    rememberMe: false,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    __v: number,\r\n    _id: string,\r\n    success: boolean,\r\n    avatar: string\r\n}\r\ntype CardsDecksDataType = {\r\n    cardPacks: Array<CardsDeckType>;\r\n    success: boolean;\r\n    token: string;\r\n    error: string;\r\n    cardPacksTotalCount: number // количество колод\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\ntype CardsDataType = {\r\n    cards: Array<CardsType>;\r\n    success: boolean;\r\n    token: string;\r\n    error: string;\r\n    cardsTotalCount: number // количество колод\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\ntype UpdatedCard = {\r\n    updatedCard: CardsType,\r\n    success: boolean,\r\n    token: string\r\n}\r\ninterface IAddNewCardsDeck {\r\n    newCardsPack: CardsDeckType,\r\n    success: boolean,\r\n    token: string,\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport const authAPI = {\r\n    loginizationAPI: async (email: string, password: string, rememberMe: boolean) => {\r\n        const response = await instance.post<ILoginization>('/auth/login', {email, password, rememberMe});\r\n        return response.data;\r\n    },\r\n    registrationAPI: async (email: string, password: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/register', {email, password});\r\n        return response.data;\r\n    },\r\n    passwordRecoverAPI: async (email: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/forgot', {\r\n            email,\r\n            html1: \"<a href='http://localhost:3000/kartonki#/new-password/\",\r\n            html2: \"'>reset-password-link</a>\"\r\n        });\r\n        return response.data;\r\n    },\r\n    setNewPasswordAPI: async (password: string, resetPasswordToken: string) => {\r\n        const response = await instance.post<IRegistration>('/auth/set-new-password',\r\n            {password, resetPasswordToken});\r\n        return response.data;\r\n    },\r\n    getProfileAPI: async (token: string) => {\r\n        const response = await instance.post<authMeResponse>('/auth/me', {token});\r\n        return response.data\r\n    },\r\n    setProfileAPI: async(token: string, name:string, avatar: string) => {\r\n        const response = await instance.put('/auth/me', {token, name, avatar});\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const cardsDeckAPI = {\r\n    getMyDecks: async (token: string, userId:number) => {\r\n        const response = await instance.get<CardsDecksDataType>(\r\n            `/cards/pack?token=${token}&user_id=${userId}`);\r\n        return response.data;\r\n    },\r\n    getAllCardsDecks: async (token: string, pageCount:number, page:number) => {\r\n        const response = await instance.get<CardsDecksDataType>(\r\n            `/cards/pack?token=${token}&pageCount=${pageCount}&page=${page}`);\r\n        return response.data;\r\n    },\r\n    addNewCardsDeck: async (cardsPack: { user_id: string; name: string }, token: string) => {\r\n        const response = await instance.post<IAddNewCardsDeck>(\r\n            `/cards/pack`, {cardsPack, token});\r\n        return response.data;\r\n    },\r\n    updateCardsDeck: async(cardsPack: { grade: number; name: string; _id: string },token:string,) => {\r\n        const response = await instance.put<CardsDecksDataType>(\r\n            `/cards/pack`, {cardsPack, token });\r\n        return response.data;\r\n    },\r\n    deleteCardsDeck: async(token:string, id: string) => {\r\n        const response = await instance.delete<CardsDecksDataType>(\r\n            `/cards/pack?token=${token}&id=${id}`);\r\n        return response.data;\r\n    },\r\n};\r\n\r\n export const cardsAPI = {\r\n     getCards: async (token: string, id: string, pageCount:number, page:number) => {\r\n         const response =await instance.get<CardsDataType>(\r\n             `/cards/card?token=${token}&cardsPack_id=${id}&pageCount=${pageCount}&page=${page}`);\r\n         return response.data;\r\n     },\r\n     addCard: async (card: { cardsPack_id:string, question:string }, token: string) => {\r\n         const response = await instance.post(`/cards/card`, {\r\n             card,\r\n             token,\r\n         });\r\n         return response.data;\r\n     },\r\n     updateCard: async (card: {answer?: string, question?:string, _id: string, grade?:number, }, token: string) => {\r\n         const response = await instance.put<UpdatedCard>(`/cards/card`, {\r\n             card,\r\n             token\r\n         });\r\n\r\n         return response.data;\r\n     },\r\n     deleteCard: async (token: string, id: string) => {\r\n         const response = await instance.delete(`/cards/card?token=${token}&id=${id}`);\r\n\r\n         return response.data;\r\n     },\r\n };","import {\r\n    ChatActionTypes,\r\n    IisLoadingActionCreator,\r\n    ILoginError,\r\n    ILoginSuccess,\r\n    IS_LOADING,\r\n    ISetToken,\r\n    IStateLogin,\r\n    LOGIN_ERROR,\r\n    LOGIN_SUCCESS,\r\n    SET_TOKEN\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStateLogin = {\r\n    id: 0,\r\n    authSuccess: false,\r\n    myName: '',\r\n    errorMessage: '',\r\n    token: '',\r\n    isLoading: false,\r\n}\r\n\r\n\r\nconst authReducer = (state: IStateLogin = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state, authSuccess: action.loginSuccess, myName: action.myName,\r\n                token: action.token, id: action.id\r\n            }\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state, errorMessage: action.errorMessage\r\n            }\r\n        case IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.token\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// global loading Action Creator\r\nexport const isLoadingAC = (value: boolean):IisLoadingActionCreator => ({type: IS_LOADING, value});\r\nexport const setTokenAC = (token: string):ISetToken => ({type: SET_TOKEN, token});\r\n\r\n\r\nconst loginizationSuccessAC = (loginSuccess: boolean, myName:string, token:string, id: string):ILoginSuccess =>\r\n    ({type: LOGIN_SUCCESS, loginSuccess, myName, token, id})\r\nconst loginizationErrorAC = (errorMessage: string):ILoginError => ({type: LOGIN_ERROR, errorMessage})\r\n\r\n\r\n\r\nexport const loginizationTC = (email:string, password:string, rememberMe: boolean) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await authAPI.loginizationAPI(email, password, rememberMe);\r\n            if (data.error)\r\n                dispatch(loginizationErrorAC(data.error))\r\n            else dispatch(loginizationSuccessAC(data.success, data.name, data.token, data._id ))\r\n        } catch (e) {\r\n            dispatch(loginizationErrorAC(e.response.data.error))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport default authReducer;","import {\r\n    ChatActionTypes,\r\n    NEW_PASSWORD_SUCCESS,\r\n    NEW_PASSWORD_ERROR,\r\n    INewPasswordSuccess, INewPasswordError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst newPasswordReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case NEW_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Successful!'\r\n            };\r\n        case NEW_PASSWORD_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const newPasswordTC = (password: string, resetPasswordToken: string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await authAPI.setNewPasswordAPI(password, resetPasswordToken);\r\n            if(data.error) {\r\n                dispatch(setNewPasswordErrorAC(data.error));\r\n            } else\r\n                dispatch(setNewPasswordSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(setNewPasswordErrorAC(e.response.data.error));\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators\r\nconst setNewPasswordSuccessAC = (recoverSuccess: boolean)\r\n    : INewPasswordSuccess => ({type: NEW_PASSWORD_SUCCESS, recoverSuccess});\r\n\r\nexport const setNewPasswordErrorAC = (errorMessage: string)\r\n    : INewPasswordError => ({type: NEW_PASSWORD_ERROR, errorMessage});\r\n\r\n\r\nexport default newPasswordReducer;","import {\r\n    CardsDeckType,\r\n    ChatActionTypes,\r\n    ISetMyDecks,\r\n    ISetMyName,\r\n    IStateProfile,\r\n    SET_MY_DECKS,\r\n    SET_MY_NAME\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootState} from \"./store\";\r\nimport {isLoadingAC, setTokenAC} from \"./auth_reducer\";\r\nimport {authAPI, cardsDeckAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStateProfile = {\r\n    myDecks: [],\r\n    myName: '',\r\n    avatar: '',\r\n    success: false\r\n}\r\n\r\n\r\nconst profileReducer = (state: IStateProfile = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case SET_MY_NAME:\r\n            return {\r\n                ...state, myName: action.myName, avatar: action.avatar\r\n            }\r\n        case SET_MY_DECKS:\r\n            return {\r\n                ...state, myDecks: action.decks\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setMyNameAvatarAC = (myName: string, avatar: string): ISetMyName => ({type: SET_MY_NAME, myName, avatar})\r\nconst setMyDecksAC = (decks: Array<CardsDeckType>): ISetMyDecks => ({type: SET_MY_DECKS, decks})\r\n\r\nexport const getMyDecksTC = () => async (\r\n    dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n    const { id, token} = getState().auth\r\n    try {\r\n        dispatch(isLoadingAC(true))\r\n        const data = await cardsDeckAPI.getMyDecks(token, id)\r\n        dispatch(setMyDecksAC(data.cardPacks))\r\n    } catch (e) {\r\n        dispatch(isLoadingAC(false))\r\n    }\r\n    dispatch(isLoadingAC(false))\r\n}\r\n\r\nexport const setMyProfileTC = () => async (\r\n    dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n    const {token} = getState().auth\r\n    try {\r\n        dispatch(isLoadingAC(true))\r\n        const data = await authAPI.getProfileAPI(token)\r\n        dispatch(setTokenAC(data.token))\r\n        dispatch(setMyNameAvatarAC(data.name, data.avatar))\r\n    } catch (e) {\r\n        dispatch(isLoadingAC(false))\r\n    }\r\n    dispatch(isLoadingAC(false))\r\n}\r\nexport const setAvatarOrNameTC = (newName?: string, newAvatar?: string) => async (\r\n    dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n    const {token} = getState().auth\r\n    const {avatar, myName} = getState().profile\r\n    let avatarOnServer = '';\r\n    newAvatar? avatarOnServer = newAvatar : avatarOnServer = avatar\r\n    let nameOnServer = '';\r\n    newName? nameOnServer = newName : nameOnServer = myName\r\n    try {\r\n        dispatch(isLoadingAC(true))\r\n        debugger\r\n        const data = await authAPI.setProfileAPI(token, nameOnServer, avatarOnServer)\r\n        dispatch(setTokenAC(data.token))\r\n        dispatch(setMyNameAvatarAC(data.updatedUser.name, data.updatedUser.avatar !== null\r\n            ? data.updatedUser.avatar\r\n            : avatar))\r\n    } catch (e) {\r\n        dispatch(isLoadingAC(false))\r\n    }\r\n    dispatch(isLoadingAC(false))\r\n}\r\nexport default profileReducer;","import {\r\n    ChatActionTypes,\r\n    PASSWORD_RECOVER_ERROR,\r\n    PASSWORD_RECOVER_SUCCESS,\r\n    IPasswordRecoverSuccess,\r\n    IPasswordRecoverError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst passwordRecoveringReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case PASSWORD_RECOVER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Успешно! Проверьте свой email.'\r\n            };\r\n        case PASSWORD_RECOVER_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const passwordRecoverTC = (email:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await authAPI.passwordRecoverAPI(email);\r\n            if(data.error) {\r\n                dispatch(passwordRecoverErrorAC(data.error));\r\n            } else\r\n                dispatch(passwordRecoverSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(passwordRecoverErrorAC(e.response.data.error));\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators (success error)\r\nconst passwordRecoverSuccessAC = (recoverSuccess: boolean)\r\n    : IPasswordRecoverSuccess => ({type: PASSWORD_RECOVER_SUCCESS, recoverSuccess});\r\n\r\nexport const passwordRecoverErrorAC = (errorMessage: string)\r\n    : IPasswordRecoverError => ({type: PASSWORD_RECOVER_ERROR, errorMessage});\r\n\r\n\r\n\r\nexport default passwordRecoveringReducer;","import {\r\n    ChatActionTypes,\r\n    REGISTRATE_ERROR,\r\n    REGISTRATE_SUCCESS,\r\n    IRegistrateSuccess,\r\n    IRegistrateError, IStateRegistr\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState:IStateRegistr = {\r\n    message: '',\r\n    registeredSuccess: false\r\n};\r\n\r\nconst registrationReducer = (state:IStateRegistr = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case REGISTRATE_SUCCESS:\r\n            return {...state, message: 'successich', registeredSuccess: action.registeredSuccess}\r\n        case REGISTRATE_ERROR:\r\n            return {...state, message: action.errorMessage}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst registrationSuccessAC = (registeredSuccess: boolean)\r\n    : IRegistrateSuccess => ({type: REGISTRATE_SUCCESS, registeredSuccess});\r\nexport const registrationErrorAC = (errorMessage: string)\r\n    : IRegistrateError => ({type: REGISTRATE_ERROR, errorMessage});\r\n\r\n\r\nexport const registrationTC = (email:string, password:string) =>\r\n     async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await authAPI.registrationAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(registrationErrorAC(data.error));\r\n            } else\r\n                dispatch(registrationSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(registrationErrorAC(e.response.data.error))\r\n        }\r\n         dispatch(isLoadingAC(false));\r\n}\r\n\r\nexport default registrationReducer;\r\n","import {\r\n    CardsType,\r\n    ChatActionTypes,\r\n    CREATE_CARD,\r\n    EDIT_CARD,\r\n    ICreateCardActionCreator,\r\n    IEditCardActionCreator,\r\n    ISetCard,\r\n    ISetCardPage,\r\n    ISetCards,\r\n    IStateCards,\r\n    SET_CARD,\r\n    SET_CARD_PAGE,\r\n    SET_CARDS,\r\n} from \"./types\";\r\nimport {isLoadingAC, setTokenAC} from \"./auth_reducer\";\r\nimport {cardsAPI} from \"../dal/api\";\r\nimport {RootState} from \"./store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst defCurrentCard = {\r\n    answer: \"default\",\r\n    question: \"default\",\r\n    cardsPack_id: \"default\",\r\n    grade: 0.00,\r\n    rating: 0,\r\n    shots: 0,\r\n    type: \"card\",\r\n    created: \"2020-05-13T11:05:44.867Z\",\r\n    updated: \"2020-05-13T11:05:44.867Z\",\r\n    __v: 0,\r\n    _id: \"default\",\r\n}\r\nconst initialState: IStateCards = {\r\n    cards: [],\r\n    currentCard: defCurrentCard,\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 5,\r\n    cardID: '',\r\n    cardsDeckID: '',\r\n    success: false\r\n};\r\n\r\n\r\nconst cardsReducer = (state: IStateCards = initialState, action: ChatActionTypes): IStateCards => {\r\n    switch (action.type) {\r\n        case SET_CARDS:\r\n            if (action.cards.length > 0) {\r\n                return {\r\n                    ...state, cards: action.cards, cardsTotalCount: action.cardsTotalCount,\r\n                    page: action.page\r\n                }\r\n            } else {\r\n                return {...state}\r\n            }\r\n        case SET_CARD:\r\n            return {\r\n                ...state, currentCard: state.cards.find(c => {\r\n                    return (c._id === action.cardId)\r\n                }) || defCurrentCard\r\n            }\r\n        case SET_CARD_PAGE:\r\n            return {\r\n                ...state, page: action.page\r\n            }\r\n        case EDIT_CARD:\r\n            return {\r\n                ...state, currentCard: action.updatedCard,\r\n            };\r\n        case CREATE_CARD:\r\n            return {\r\n                ...state, cards: [...state.cards, action.newCard], success: action.successBoolean\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creator\r\nconst editCardAC = (updatedCard: CardsType): IEditCardActionCreator =>\r\n    ({type: EDIT_CARD, updatedCard});\r\nexport const setCardAC = (cardId: string): ISetCard => ({type: SET_CARD, cardId});\r\nexport const setCardPageAC = (page: number): ISetCardPage => ({type: SET_CARD_PAGE, page});\r\nconst createCardAC = (newCard: CardsType, successBoolean: boolean): ICreateCardActionCreator =>\r\n    ({type: CREATE_CARD, newCard, successBoolean});\r\nconst getCardsAC = (cards: Array<CardsType>, cardsTotalCount: number,\r\n                    pageCount: number, page: number): ISetCards =>\r\n    ({type: SET_CARDS, cards, cardsTotalCount, pageCount, page});\r\n\r\n// Thunk\r\nexport const getCardsTC = (id: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n        const {pageCount, page} = getState().cards\r\n        const {token} = getState().auth\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.getCards(token, id, pageCount, page);\r\n            dispatch(getCardsAC(data.cards, data.cardsTotalCount, data.pageCount, data.page));\r\n            dispatch(setTokenAC(data.token));\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const createCardTC = (card: { cardsPack_id: string, question: string }, token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.addCard(card, token);\r\n            dispatch(createCardAC(data.newCard, data.success));\r\n            dispatch(setTokenAC(data.token));\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const editCardTC = (card: { answer?: string, question?: string, _id: string, grade?: number, }) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n    const {token} = getState().auth\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.updateCard(card, token);\r\n            dispatch(editCardAC(data.updatedCard))\r\n            dispatch(setTokenAC(data.token))\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\nexport const deleteCardTC = (token: string, cardID: string, id: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n        const {pageCount, page} = getState().cards\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await cardsAPI.deleteCard(token, cardID);\r\n            dispatch(setTokenAC(data.token));\r\n            if (data.success) {\r\n                const data2 = await cardsAPI.getCards(data.token, id, pageCount, page);\r\n                dispatch(getCardsAC(data2.cards, data.cardsTotalCount, data.pageCount, data.page))\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n        dispatch(isLoadingAC(false));\r\n    };\r\n\r\n\r\nexport default cardsReducer;","import {\r\n    CardsDeckType,\r\n    ChatActionTypes,\r\n    CREATE_DECK,\r\n    DELETE_DECK,\r\n    GET_DECK_ID,\r\n    GET_DECKS,\r\n    ICreateDeleteDeckActionCreator,\r\n    IGetCardsDecks,\r\n    IGetDeckId,\r\n    ISetDeckName,\r\n    ISetDeckPage,\r\n    IStateCardsDeck,\r\n    SET_DECK_NAME,\r\n    SET_DECK_PAGE,\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {isLoadingAC, setTokenAC} from \"./auth_reducer\";\r\nimport {cardsDeckAPI} from \"../dal/api\";\r\nimport {RootState} from \"./store\";\r\n\r\n\r\nconst initialState: IStateCardsDeck = {\r\n    decks: [],\r\n    currentDeckId: '',\r\n    currentDeckName: '',\r\n    cardPacksTotalCount: 0, // количество колод\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 3, // выбранная страница\r\n    pageCount: 3 // количество элементов на странице\r\n};\r\n\r\n\r\nconst cardsDeckReducer = (state: IStateCardsDeck = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case GET_DECKS:\r\n            return {\r\n                ...state, decks: action.decks, cardPacksTotalCount: action.cardPacksTotalCount,\r\n                page: action.page\r\n            };\r\n        case GET_DECK_ID:\r\n            return {\r\n                ...state, currentDeckId: action.deckId\r\n            }\r\n        case SET_DECK_PAGE:\r\n            return {\r\n                ...state, page: action.page\r\n            }\r\n        case SET_DECK_NAME:\r\n            return {\r\n                ...state, currentDeckName: action.deckName\r\n            }\r\n        case CREATE_DECK:\r\n            return {\r\n                ...state,\r\n                decks: [action.cardsDeck, ...state.decks]\r\n            };\r\n        case DELETE_DECK:\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst setCardsDecksAC = (decks: Array<CardsDeckType>,\r\n                         cardPacksTotalCount: number,\r\n                         pageCount: number, page: number): IGetCardsDecks =>\r\n    ({type: GET_DECKS, decks, cardPacksTotalCount, pageCount, page})\r\nexport const setDeckPageAC = (page: number): ISetDeckPage => ({type: SET_DECK_PAGE, page})\r\nexport const setCurrentDeckIdAC = (deckId: string): IGetDeckId => ({type: GET_DECK_ID, deckId})\r\nexport const setCurrentDeckNameAC = (deckName: string): ISetDeckName => ({type: SET_DECK_NAME, deckName})\r\nconst setNewCardsDeckAC = (newCardsDeck: CardsDeckType)\r\n    : ICreateDeleteDeckActionCreator => ({type: CREATE_DECK, cardsDeck: newCardsDeck})\r\n\r\n\r\nexport const getDecksTC = (token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n        const {pageCount, page} = getState().decks\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.getAllCardsDecks(token, pageCount, page)\r\n            dispatch(setCardsDecksAC(data.cardPacks, data.cardPacksTotalCount,\r\n                data.pageCount, data.page))\r\n            dispatch(setTokenAC(data.token))\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\nexport const createNewCardDeckTC = (cardsDeck: { user_id: string; name: string }, token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>) => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.addNewCardsDeck(cardsDeck, token)\r\n            if (data.success === true)\r\n                dispatch(setNewCardsDeckAC(data.newCardsPack,))\r\n            dispatch(setTokenAC(data.token))\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\n\r\nexport const editDeckTC = (editedDeck: { grade: number; name: string; _id: string }, token: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n        const {pageCount, page} = getState().decks\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.updateCardsDeck(editedDeck, token)\r\n            if (data.success === true) {\r\n                const data2 = await cardsDeckAPI.getAllCardsDecks(data.token, pageCount, page)\r\n                dispatch(setCardsDecksAC(data2.cardPacks, data.cardPacksTotalCount,\r\n                    data.pageCount, data.page))\r\n                dispatch(setTokenAC(data2.token))\r\n            }\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport const deleteDeckTC = (token: string, deckId: string) =>\r\n    async (dispatch: Dispatch<ChatActionTypes>, getState: () => RootState) => {\r\n        const {pageCount, page} = getState().decks\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await cardsDeckAPI.deleteCardsDeck(token, deckId)\r\n            dispatch(setTokenAC(data.token));\r\n            if (data.success) {\r\n                const data2 = await cardsDeckAPI.getAllCardsDecks(data.token, pageCount, page)\r\n                dispatch(setCardsDecksAC(data2.cardPacks, data.cardPacksTotalCount,\r\n                    data.pageCount, data.page))\r\n                dispatch(setTokenAC(data2.token))\r\n            }\r\n        } catch (e) {\r\n            dispatch(isLoadingAC(false))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\nexport default cardsDeckReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport authReducer from './auth_reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport newPasswordReducer from \"./newPswd_reducer\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport passwordRecoveringReducer from \"./pswdRecover_reducer\";\r\nimport registrationReducer from \"./registr_reducer\";\r\nimport cardsReducer from \"./cards_reducer\";\r\nimport cardsDeckReducer from \"./cardsDeck_reducer\";\r\n\r\nconst reducerPack = combineReducers({\r\n    auth: authReducer,\r\n    newPass: newPasswordReducer,\r\n    profile: profileReducer,\r\n    recoverPass: passwordRecoveringReducer,\r\n    registr: registrationReducer,\r\n    cards: cardsReducer,\r\n    decks: cardsDeckReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducerPack>\r\n\r\nconst store = createStore(reducerPack, applyMiddleware(thunkMiddleware) );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ninterface IPropsInput {\r\n    inputPlaceholder?: string | undefined,\r\n    value?: string  | number | undefined,\r\n    checked?: boolean | undefined,\r\n    inputType?:string | undefined,\r\n    inputOnChange?: (value: string  ) => void,\r\n    inputOnChangeNumber?: (value: number  ) => void,\r\n    inputOnChangeChecked?: (value: boolean ) => void\r\n}\r\nconst Input: React.FC<IPropsInput> = ({inputOnChangeNumber,\r\n                                          inputPlaceholder,\r\n                                          value ,\r\n                                          checked,\r\n                                          inputType,\r\n                                          inputOnChange,\r\n                                          inputOnChangeChecked\r\n                                      }) => {\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputOnChange) {\r\n            inputOnChange(e.currentTarget.value)\r\n        } else if(inputOnChangeChecked) {\r\n            inputOnChangeChecked(e.currentTarget.checked)\r\n        } else if (inputOnChangeNumber) {\r\n            inputOnChangeNumber(Number(e.currentTarget.value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={s.inputWrapper}>\r\n            <input onChange={onChange} placeholder={inputPlaceholder}\r\n                   value={value} checked={checked} type={inputType}/>\r\n        </div>\r\n            </>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\ninterface IPropsButton {\r\n    stringValue?: string,\r\n    booleanValue?: boolean\r\n    buttonOnClick?: () => void,\r\n    buttonOnClickBoolean?: (value: boolean | undefined) => void,\r\n    buttonName?: string\r\n}\r\n\r\nconst Button: React.FC<IPropsButton> = ({\r\n                                            buttonOnClick, buttonName,\r\n                                            buttonOnClickBoolean, booleanValue\r\n                                        }) => {\r\n    const onClick = () => {\r\n        if (buttonOnClick) buttonOnClick()\r\n        else if (buttonOnClickBoolean) buttonOnClickBoolean(booleanValue)\r\n    }\r\n    const {isLoading} = useSelector(\r\n        (state: RootState) => state.auth);\r\n\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button className={s.worksButton} disabled={isLoading}\r\n                    onClick={onClick}><span>{buttonName ? buttonName : 'submit'}</span></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './loginization.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {TO_RECOVER_PASSWORD, TO_REGISTRATION} from \"../../../common/routes\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRememberMe: (value: boolean) => void,\r\n    signIn: () => void,\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    loginError: string,\r\n}\r\n\r\nconst Loginization: React.FC<IProps> = ({\r\n                                            login, password, setPassword,\r\n                                            setLogin, setRememberMe, signIn,\r\n                                            rememberMe, loginError\r\n                                        }) => {\r\n    return (\r\n        <div className={styles.loginizationWrapper}>\r\n            <h2>Loginization Page</h2>\r\n            <div>\r\n                <Input inputOnChange={setLogin}\r\n                       inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n            </div>\r\n            <div>\r\n                <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                       inputPlaceholder={'your password'}/>\r\n            </div>\r\n            <div>\r\n                <Input inputType={'checkbox'} checked={rememberMe} inputOnChangeChecked={setRememberMe}/>\r\n            </div>\r\n            <div>\r\n                <Button buttonName={'Sign In'} buttonOnClick={signIn}/>\r\n            </div>\r\n            <div>\r\n                don't have an account?\r\n                <NavLink to={TO_REGISTRATION}>Sign Up</NavLink>\r\n            </div>\r\n            <div>\r\n                <NavLink to={TO_RECOVER_PASSWORD}>forget passwrod</NavLink>\r\n            </div>\r\n            {loginError ? <span>loginError</span> : null}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loginization;\r\n","import React, {useState} from 'react';\r\nimport Loginization from \"./loginization\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginizationTC} from \"../../../../bll/auth_reducer\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {TO_PROFILE} from \"../../../common/routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginizationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {authSuccess, errorMessage} = useSelector((state: RootState) => state.auth)\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\nconst signIn =  () => {\r\n     dispatch(loginizationTC(login, password, rememberMe))\r\n}\r\n\r\n    return (\r\n        <>\r\n            {!authSuccess\r\n                ? <Loginization setLogin={setLogin} setPassword={setPassword}\r\n                                setRememberMe={setRememberMe} loginError={errorMessage}\r\n                                login={login} password={password} rememberMe={rememberMe}\r\n                                signIn={signIn}\r\n                />\r\n                : <Redirect to={TO_PROFILE}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginizationContainer;\r\n","import React from 'react';\r\nimport LoginizationContainer from \"./loginizationContainer\";\r\n\r\n\r\nconst LoginizationPage = () => {\r\n    return (\r\n        <LoginizationContainer />\r\n    );\r\n};\r\n\r\nexport default LoginizationPage;\r\n","import React from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../bll/store\";\r\nimport {TO_AUTH, TO_REGISTRATION} from \"./routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst WithAuthHOC = (Component: any) => {\r\n    const WrapperContainer = () => {\r\n        const {authSuccess} = useSelector((state: RootState) => state.auth)\r\n        if (authSuccess)\r\n            return <Component/>\r\n        return (\r\n            <>\r\n                <span>need authorization</span>\r\n                <NavLink to={TO_AUTH}> Let's Sign In!</NavLink>\r\n                <div>don't have an account?</div>\r\n                <NavLink to={TO_REGISTRATION}>RegistrationPage</NavLink>\r\n            </>\r\n        )\r\n    }\r\n    return WrapperContainer;\r\n};\r\n\r\n\r\nexport default WithAuthHOC;","import React from 'react'\r\nimport styles from \"../profile.module.css\";\r\nimport {CardsDeckType} from \"../../../../../bll/types\";\r\n\r\n\r\ninterface IProps {\r\n    decks: Array<CardsDeckType>\r\n}\r\n\r\nconst MyDecks: React.FC<IProps> = ({decks}) => {\r\n    const decksElements = decks.map(d => <div className={styles.singleDeck} onClick={() => {\r\n        alert('clicked on deck')\r\n    }}>\r\n        <span>{d.name}</span>\r\n        <img src={'https://bgfons.com/upload/books_texture3035.jpg'} alt={'deck'}/>\r\n    </div>)\r\n    return (\r\n        <div className={styles.decks}>\r\n            {decksElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyDecks;","import React from 'react';\r\nimport styles from './profile.module.css'\r\nimport Button from \"../../../common/button/Button\";\r\nimport MyDecks from \"./myDecks/myDecks\";\r\nimport {TO_CARDSDECK} from \"../../../common/routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Input from \"../../../common/input/Input\";\r\nimport {CardsDeckType} from \"../../../../bll/types\";\r\n\r\ninterface IProps {\r\n    decks: Array<CardsDeckType>,\r\n    myName: string,\r\n    avatar: string,\r\n    newName: string,\r\n    myOrAllDecks: boolean,\r\n    changeMyName: boolean,\r\n    changeMyAvatarToggle: boolean,\r\n    setChangeMyAvatarToggle: (value: boolean) => void,\r\n    setMyOrAllDecks: (value: boolean) => void,\r\n    setChangeMyName: (value: boolean) => void,\r\n    setNewName: (value: string) => void,\r\n    changeName: (value:string) => void,\r\n    changeAvatar: (value:string) => void,\r\n    getMyDecks: () => void,\r\n}\r\n\r\nconst Profile: React.FC<IProps> = ({\r\n                                       myOrAllDecks, myName, avatar, setMyOrAllDecks,\r\n                                       changeName, setChangeMyName, changeMyName,newName,\r\n                                       setNewName,setChangeMyAvatarToggle,changeMyAvatarToggle,\r\n                                       changeAvatar, decks,getMyDecks\r\n                                   }) => {\r\n    return (\r\n        <div className={styles.profileWrapper}>\r\n            {\r\n                changeMyAvatarToggle\r\n                ?<div className={styles.avatarWrapper}>\r\n                    <img src={avatar}\r\n                         alt={myName}/>\r\n                    <Button buttonName={'Change'}\r\n                            buttonOnClickBoolean={()=>setChangeMyAvatarToggle(!changeMyAvatarToggle)}/>\r\n                </div>\r\n                    :<div className={styles.avatarWrapper}>\r\n                        <Input inputOnChange={setNewName} inputType={'text'} inputPlaceholder={'insert new URL'}\r\n                               value={newName}\r\n                        />\r\n                        <Button buttonOnClick={()=>changeAvatar(newName)} buttonName={'Submit'}/>\r\n                        <Button buttonOnClickBoolean={()=>setChangeMyAvatarToggle(!changeMyAvatarToggle)}\r\n                                buttonName={'Cancel'}/>\r\n                    </div>\r\n            }\r\n            <div className={styles.myInfo}>\r\n                {\r\n                    changeMyName\r\n                    ? <div className={styles.nameBlock} onClick={() => {\r\n                        setChangeMyName(!changeMyName)\r\n                    }}>\r\n                        <h2>{myName}</h2>\r\n                        <span>(click to change)</span>\r\n                    </div>\r\n                    : <>\r\n                        <Input inputOnChange={setNewName} inputType={'text'} inputPlaceholder={'insert new name'}\r\n                        value={newName}\r\n                        />\r\n                        <Button buttonOnClick={()=>changeName(newName)} buttonName={'Submit'}/>\r\n                        <Button buttonOnClickBoolean={()=>setChangeMyName(!changeMyName)} buttonName={'Cancel'}/>\r\n                    </>\r\n\r\n                }\r\n                {\r\n                    myOrAllDecks\r\n                    ? <div className={styles.deckBlock}>\r\n                        <div className={styles.nameBlock} onClick={() => setMyOrAllDecks(!myOrAllDecks)}>\r\n                            <h3>my decks</h3>\r\n                            <span>(go to all decks)</span>\r\n                        </div>\r\n                        <MyDecks decks={decks}/>\r\n                    </div>\r\n                    : <div className={styles.myOrAllDecksBlock}>\r\n                        <div onClick={getMyDecks}>My Decks</div>\r\n                        <NavLink to={TO_CARDSDECK}>All Decks</NavLink>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React, {useEffect, useState} from 'react'\r\nimport Profile from \"./profile\";\r\nimport {getMyDecksTC, setAvatarOrNameTC, setMyProfileTC} from \"../../../../bll/profile_reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\n\r\n\r\nconst ProfileContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {myName, avatar, myDecks} = useSelector((state: RootState) => state.profile)\r\n    const [myOrAllDecks, setMyOrAllDecks] = useState<boolean>(true) // switch between my decks and all decks\r\n    const [changeMyNameToggle, setChangeMyNameToggle] = useState<boolean>(true)\r\n    const [changeMyAvatarToggle, setChangeMyAvatarToggle] = useState<boolean>(true)\r\n    const [newNOURLChange, setNOURLChange] = useState<string>(myName) //NOURL = Name Or URL\r\n    useEffect(()=>{\r\n        dispatch(setMyProfileTC())\r\n    },[])\r\n    const getMyDecks = () => { // launches when we click on 'My Decks'\r\n        setMyOrAllDecks(!myOrAllDecks)\r\n        dispatch(getMyDecksTC())\r\n    }\r\n    const changeName = (name: string) => {     // sending new information on server\r\n        setChangeMyNameToggle(!changeMyNameToggle)\r\n        dispatch(setAvatarOrNameTC(name))\r\n        setNOURLChange('')\r\n    }\r\n    const changeAvatar = (newAvatar: string) => {  // sending new information on server\r\n        setChangeMyAvatarToggle(!changeMyAvatarToggle)\r\n        dispatch(setAvatarOrNameTC('', newAvatar ))\r\n        setNOURLChange('')\r\n    }\r\n    return <Profile decks={myDecks}\r\n                    myOrAllDecks={myOrAllDecks}\r\n                    setMyOrAllDecks={setMyOrAllDecks}\r\n                    setChangeMyName={setChangeMyNameToggle}\r\n                    changeMyName={changeMyNameToggle}\r\n                    myName={myName}\r\n                    getMyDecks={getMyDecks}\r\n                    newName={newNOURLChange}\r\n                    setNewName={setNOURLChange}\r\n                    changeName={changeName}\r\n                    changeAvatar={changeAvatar}\r\n                    setChangeMyAvatarToggle={setChangeMyAvatarToggle}\r\n                    changeMyAvatarToggle={changeMyAvatarToggle}\r\n                    avatar={avatar} />\r\n}\r\n\r\nexport default ProfileContainer;","import React from 'react'\r\nimport WithAuthHOC from \"../../../common/withAuth\";\r\nimport ProfileContainer from './profileContainer';\r\n\r\n\r\nconst ProfilePage = () => {\r\n    return <ProfileContainer />\r\n}\r\n\r\nexport default WithAuthHOC(ProfilePage);","import React, {useState} from 'react';\r\nimport s from './Loading.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\n\r\nconst Loading = () => {\r\n    let [points, setPoints] = useState<string>('.');\r\n    let {isLoading} = useSelector((state: RootState) => state.auth);\r\n    const loadingProgress = () => {\r\n        setTimeout(() => {\r\n            points.length < 5\r\n                ? setPoints(points + '.')\r\n                : setPoints('.')\r\n        }, 1000);\r\n        return points\r\n    };\r\n    if(isLoading) {return (\r\n        <div>\r\n            <span className={s.loadingWrapper}></span>\r\n            <span className={s.loadingProgress}>\r\n                { 'LOADING' + loadingProgress()}\r\n\r\n            </span>\r\n        </div>\r\n    )} else return null\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport styles from './registr.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\nimport {TO_AUTH} from \"../../../common/routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRepeatingPassword: (value: string) => void,\r\n    wrongRepeatingPassword: () => void,\r\n    registerMe: () => void,\r\n    login: string,\r\n    password: string,\r\n    repeatingPassword: string,\r\n    similar: boolean\r\n    messageFromServer: string\r\n    isLoading: boolean\r\n}\r\n\r\nconst Registration: React.FC<IProps> = ({login, password,\r\n                                            repeatingPassword,\r\n                                            setPassword, setLogin, setRepeatingPassword,\r\n                                            registerMe, similar,\r\n                                            wrongRepeatingPassword, messageFromServer, isLoading}) => {\r\n    return (\r\n    <div className={styles.registrationWrapper}>\r\n        <h2>Registration Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={repeatingPassword} inputOnChange={setRepeatingPassword}\r\n                   inputPlaceholder={'repeat your password'}/>\r\n                   {!similar && <span>password does not match!</span>}\r\n        </div>\r\n        <div>\r\n            <Button  buttonOnClick={similar? registerMe : wrongRepeatingPassword} buttonName={'Sign Up'}/>\r\n            {isLoading && <Loading/>}\r\n            <NavLink to={TO_AUTH}>Sign In</NavLink>\r\n            {<span>{messageFromServer}</span>}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Registration from \"./registration\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationErrorAC, registrationTC} from \"../../../../bll/registr_reducer\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TO_AUTH} from \"../../../common/routes\";\r\n\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {registeredSuccess, message} = useSelector((state: RootState) => state.registr)\r\n    const {isLoading} = useSelector((state: RootState) => state.auth);\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [repeatingPassword, setRepeatingPassword] = useState<string>('');\r\n    const [similar, setSimilar] = useState<boolean>(false);\r\n    useEffect(()=> {\r\n        if(repeatingPassword === password && repeatingPassword) setSimilar(true)\r\n            else setSimilar(false)\r\n    }, [repeatingPassword, password]);\r\n    const registerMe = () => {dispatch(registrationTC(login, password))\r\n    }\r\n    const wrongRepeatingPassword = () => {\r\n        dispatch(registrationErrorAC('wrong credentials'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!registeredSuccess\r\n           ? <Registration setLogin={setLogin}\r\n                          setPassword={setPassword}\r\n                          login={login} password={password}\r\n                          repeatingPassword={repeatingPassword}\r\n                          setRepeatingPassword={setRepeatingPassword}\r\n                          similar={similar}\r\n                          registerMe={registerMe}\r\n                           messageFromServer={message}\r\n                          wrongRepeatingPassword={wrongRepeatingPassword}\r\n                           isLoading={isLoading}\r\n            />\r\n            : <Redirect to={TO_AUTH}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegistrationContainer;\r\n","import React from 'react';\r\nimport RegistrationContainer from \"./registrationContainer\";\r\n\r\n\r\nconst RegistrationPage = () => {\r\n    return (\r\n        <RegistrationContainer />\r\n    );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react';\r\nimport styles from './newPswd.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsNewPswd {\r\n    setNewPassword: (value: string) => void,\r\n    setNewPasswordRepeat: (value: string) => void,\r\n    newPassword: string,\r\n    newPasswordRepeat: string,\r\n    responseStatusMessage: string,\r\n    getDataFromServer: ()=> void,\r\n    similar: boolean,\r\n    differentPassword: string,\r\n    isLoading: boolean\r\n}\r\n\r\nconst NewPswd: React.FC<IPropsNewPswd> = ({newPassword, isLoading, setNewPassword,\r\n                                              newPasswordRepeat,setNewPasswordRepeat,\r\n                                              differentPassword,getDataFromServer,\r\n                                              responseStatusMessage}) => {\r\n  return (\r\n    <div className={styles.newPasswordWrapper}>\r\n      <h2>New Password Page</h2>\r\n        <div>\r\n            <Input inputType='password' value={newPassword}\r\n                   inputOnChange={setNewPassword} inputPlaceholder='New password'\r\n            />\r\n        </div>\r\n        <div>\r\n            <Input inputType='password' value={newPasswordRepeat}\r\n                   inputOnChange={setNewPasswordRepeat} inputPlaceholder='Repeat new password'\r\n            />\r\n\r\n        </div>\r\n        <div>\r\n            <span>{differentPassword}</span>\r\n            <Button buttonName='set new password'\r\n                    buttonOnClick={getDataFromServer}\r\n\r\n            />\r\n            {isLoading && <Loading/>}\r\n            <span>{responseStatusMessage}</span>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPswd;\r\n","import React, {useEffect, useState} from 'react';\r\nimport NewPswd from \"./NewPswd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from 'react-router-dom'\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {newPasswordTC} from \"../../../../bll/newPswd_reducer\";\r\n\r\n\r\nconst NewPswdContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {resetPasswordToken} = useParams();\r\n    const [similar, setSimilar] = useState(false);\r\n    let [newPassword, setNewPassword] = useState<string>('');\r\n    let [newPasswordRepeat, setNewPasswordRepeat] = useState<string>('');\r\n    const [differentPassword, setDifferentPassword] = useState<string>('');\r\n    let {message} = useSelector((state: RootState) => state.newPass);\r\n    const {isLoading} = useSelector((state: RootState) => state.auth);\r\n\r\n    useEffect(()=> {\r\n        if(newPassword === newPasswordRepeat && newPasswordRepeat) {\r\n            setSimilar(true);\r\n            setDifferentPassword('');\r\n        } else {\r\n            setSimilar(false)\r\n            setDifferentPassword('Enter similar pass')\r\n        }\r\n    }, [newPassword, newPasswordRepeat]);\r\n\r\n\r\n    const getDataFromServer = async() => {\r\n        // Вызов санки\r\n       similar && dispatch(newPasswordTC(newPassword, resetPasswordToken))\r\n        };\r\n\r\n    return (\r\n        <NewPswd newPassword={newPassword} setNewPassword={setNewPassword}\r\n                 newPasswordRepeat={newPasswordRepeat} setNewPasswordRepeat={setNewPasswordRepeat}\r\n                  responseStatusMessage={message}\r\n                 getDataFromServer={getDataFromServer} similar={similar}\r\n                 differentPassword={differentPassword} isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPswdContainer;\r\n","import React from 'react';\r\nimport NewPswdContainer from \"./NewPswdContainer\";\r\n\r\n// Отрисовка\r\nconst NewPswdPage = () => {\r\n    return (\r\n        <NewPswdContainer/>\r\n    );\r\n};\r\n\r\nexport default NewPswdPage;\r\n","import React from 'react';\r\nimport styles from './pswdRecover.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Loading from \"../../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsPswdRecover {\r\n    putUserEmail: (value: string) => void,\r\n    userEmail: string,\r\n    responseStatus: boolean,\r\n    getDataFromServer: ()=> void,\r\n    responseStatusMessage: string,\r\n}\r\n\r\nconst PswdRecover: React.FC<IPropsPswdRecover> = ({putUserEmail, userEmail,responseStatusMessage,\r\n                                                      getDataFromServer  }) => {\r\n  return (\r\n    <div className={styles.pswdRecoverWrapper}>\r\n        <h2>Password Recovering Page</h2>\r\n        <div>\r\n            <Input inputType='email' value={userEmail} inputOnChange={putUserEmail}\r\n                   inputPlaceholder={'email'}\r\n            />\r\n            <span> {responseStatusMessage} </span>\r\n        </div>\r\n        <div>\r\n            <Button buttonName='Recover' buttonOnClick={getDataFromServer}/>\r\n        </div>\r\n        <Loading />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PswdRecover;\r\n","import React, {useState} from 'react';\r\nimport PswdRecover from \"./PswdRecover\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {passwordRecoverTC} from \"../../../../bll/pswdRecover_reducer\";\r\n\r\n\r\nconst PswdRecoverContainer = () => {\r\n    //\r\n    let [userEmail, putUserEmail] = useState<string>('');\r\n    let {success, message} = useSelector((state: RootState) => state.recoverPass);\r\n    const dispatch = useDispatch();\r\n    const getDataFromServer = () => {\r\n        // Вызов санки\r\n        dispatch(passwordRecoverTC(userEmail))\r\n    };\r\n\r\n    return (\r\n        <PswdRecover userEmail={userEmail} putUserEmail={putUserEmail} responseStatus={success}\r\n                     getDataFromServer={getDataFromServer} responseStatusMessage={message}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PswdRecoverContainer;\r\n","import React from 'react';\r\nimport PswdRecoverContainer from \"./PswdRecoverContainer\";\r\n\r\n// Отрисовка\r\nconst PswdRecoverPage = () => {\r\n    return (\r\n        <PswdRecoverContainer/>\r\n    );\r\n};\r\n\r\nexport default PswdRecoverPage;\r\n","import React from 'react';\r\nimport styles from \"../features/uniCardsFeatures/uniCardsDeck/uniCardsDeck.module.css\";\r\n\r\n\r\ninterface IProps {\r\n    itemsTotalCount: number,\r\n    pageCount: number,\r\n    onCurrentPageClick: (value: number) => void,\r\n    currentPage: number\r\n}\r\n\r\nconst Paginator3000: React.FC<IProps> = ({\r\n                                             itemsTotalCount, pageCount,\r\n                                             onCurrentPageClick, currentPage\r\n                                         }) => {\r\n    const pages = [];\r\n    const pagesCount = Math.ceil(itemsTotalCount / pageCount);\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div className={styles.pages}>\r\n            {pages.map(p => {\r\n                return (\r\n                    <span key={p +1 } onClick={() => onCurrentPageClick(p)}\r\n                          className={currentPage === p\r\n                              ? styles.selectedPage\r\n                              : styles.spanPage}>{p}\r\n                            </span>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator3000","import React from 'react';\r\nimport styles from './uniCards.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {CardsType} from '../../../../bll/types';\r\nimport {TO_CARD} from \"../../../common/routes\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport Paginator3000 from \"../../../common/PaginationComponent\";\r\n\r\ninterface IProps {\r\n    setSearchInput: (value: string) => void,\r\n    deleteCard: (value: string) => void,\r\n    onCurrentPageClick: (value: number) => void,\r\n    searchInput: string,\r\n    cardsTotalCount: number,\r\n    pageCount: number,\r\n    page: number,\r\n    cards: Array<CardsType>,\r\n    addCard: () => void,\r\n    currentDeckName: string,\r\n\r\n}\r\n\r\nconst UniCards: React.FC<IProps> = ({\r\n                                        onCurrentPageClick, cardsTotalCount, pageCount,\r\n                                        setSearchInput, searchInput, cards,\r\n                                        addCard, currentDeckName, deleteCard, page,\r\n                                    }) => {\r\n\r\n    return (\r\n        <div className={styles.uniCardsWrapper}>\r\n            <h2>{currentDeckName}</h2>\r\n            <Input inputPlaceholder={'item name'} value={searchInput}\r\n                   inputType={'text'} inputOnChange={setSearchInput}/>\r\n            <Button buttonName={'search'}/>\r\n            <div className={styles.mainListWrapper}>\r\n                <Button buttonOnClick={addCard} buttonName={'add new Item'}/>\r\n                <NavLink to={TO_CARD} className={styles.startLink}>Start now!</NavLink>\r\n                <Paginator3000 itemsTotalCount={cardsTotalCount} pageCount={pageCount}\r\n                               onCurrentPageClick={onCurrentPageClick}\r\n                               currentPage={page}/>\r\n                <div className={styles.listHeader}>\r\n                    <span>Card Question</span>\r\n                    <span>Card Grade</span>\r\n                    <span>Cooperation with card</span>\r\n                </div>\r\n                {cards.map(c => <div key={c._id} className={styles.mainList}>\r\n                    <div className={styles.itemName}>\r\n                        <span> {c.question}</span>\r\n                    </div>\r\n                    <div className={styles.itemScore}>{c.grade}</div>\r\n                    <div className={styles.buttonsInTheList}>\r\n                        <Button buttonName={'edit'}/>\r\n                        <Button buttonName={'delete'} buttonOnClick={() => deleteCard(c._id)}/>\r\n                    </div>\r\n                </div>)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UniCards;\r\n\r\n\r\n","import React from 'react'\r\nimport s from '../modals.module.css'\r\n\r\ninterface IModal {\r\n    setIsOpenModal: (value: boolean) => void\r\n}\r\n\r\nconst ModalNewCard: React.FC<IModal> = ({children, setIsOpenModal}) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.modelWrapper} onClick={()=>setIsOpenModal(false)}/>\r\n            <div className={s.childrenWrapper}>\r\n                <div className={s.children}>{children}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalNewCard;\r\n","import React from 'react';\r\nimport ModalNewCard from \"./modalNewCard\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport Input from \"../../../common/input/Input\";\r\n\r\ninterface IProps {\r\n    titleName: string,\r\n    cardQuestion: string,\r\n    cardAnswer: string,\r\n    isOpenModalNewCard: boolean,\r\n    setIsOpenModalNewCard: (value: boolean) => void,\r\n    answerFromModal: (value: boolean) => void,\r\n    setCardQuestion: (value:string) => void,\r\n    setCardAnswer: (value:string) => void,\r\n}\r\n\r\nconst ModalContainerNewCard: React.FC<IProps> = ({answerFromModal,setIsOpenModalNewCard, cardQuestion,\r\n                                                     isOpenModalNewCard,titleName,cardAnswer,\r\n                                                     setCardQuestion, setCardAnswer}) => {\r\n\r\n    if(isOpenModalNewCard) return (\r\n            <ModalNewCard setIsOpenModal={setIsOpenModalNewCard}>\r\n                <h3>{titleName}</h3>\r\n                <div>\r\n                    <Input inputPlaceholder={`Enter your question`}\r\n                           inputType={'text'} value={cardQuestion} inputOnChange={setCardQuestion}/>\r\n                    <Input inputPlaceholder={`Enter your answer`}\r\n                           inputType={'textarea'} value={cardAnswer} inputOnChange={setCardAnswer}/>\r\n                    <Button buttonOnClickBoolean={()=>answerFromModal(true)} buttonName={'Apply'}/>\r\n                    <Button buttonOnClickBoolean={()=>setIsOpenModalNewCard(false)} buttonName={'Cancel'}/>\r\n                </div>\r\n            </ModalNewCard>\r\n    );\r\n    else return null\r\n};\r\n\r\nexport default ModalContainerNewCard;","import React from 'react'\r\nimport s from '../modals.module.css'\r\n\r\ninterface IModal {\r\n    setIsOpenModal: (value: boolean) => void\r\n}\r\n\r\nconst ModalDelete: React.FC<IModal> = ({children, setIsOpenModal}) => {\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.modelWrapper} onClick={()=>setIsOpenModal(false)}/>\r\n            <div className={s.childrenWrapper}>\r\n                <div className={s.children}>{children}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalDelete;\r\n","import React from 'react';\r\nimport ModalDelete from \"./modalDelete\";\r\nimport Button from \"../../../common/button/Button\";\r\n\r\ninterface IProps {\r\n    titleName: string,\r\n    isOpenModalDelete: boolean,\r\n    setIsOpenModalDelete: (value: boolean) => void,\r\n    answerFromModal: (value: boolean) => void\r\n}\r\n\r\nconst ModalContainerDelete: React.FC<IProps> = ({answerFromModal,setIsOpenModalDelete,\r\n                                                    isOpenModalDelete,titleName}) => {\r\n\r\n    if(isOpenModalDelete) return (\r\n            <ModalDelete setIsOpenModal={setIsOpenModalDelete}>\r\n                <h3>{titleName}</h3>\r\n                <div>\r\n                    <Button buttonOnClickBoolean={()=>answerFromModal(true)} buttonName={'Apply'}/>\r\n                    <Button buttonOnClickBoolean={()=>setIsOpenModalDelete(false)} buttonName={'Cancel'}/>\r\n                </div>\r\n            </ModalDelete>\r\n    );\r\n    else return null\r\n};\r\n\r\nexport default ModalContainerDelete;","import React, {useState, useEffect} from 'react';\r\nimport UniCards from \"./uniCards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport {createCardTC, deleteCardTC, getCardsTC, setCardPageAC} from \"../../../../bll/cards_reducer\";\r\nimport {useParams} from 'react-router-dom';\r\nimport ModalContainerNewCard from \"../../modalsFeatures/modalForNewCard/modalContainerNewCard\";\r\nimport ModalContainerDelete from \"../../modalsFeatures/modalForDeletes/modalContainerDelete\";\r\n\r\n\r\nconst UniCardsContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const {deckId} = useParams()\r\n    const {token} = useSelector((state: RootState) => state.auth)\r\n    const {currentDeckName} = useSelector((state: RootState) => state.decks)\r\n    const {cards, cardsTotalCount, pageCount, page} = useSelector((state: RootState) => state.cards)\r\n    const [searchInput, setSearchInput] = useState<string>('')\r\n    const [cardQuestion, setCardQuestion] = useState<string>('')\r\n    const [cardAnswer, setCardAnswer] = useState<string>('')\r\n    const [card_Id, setCard_Id] = useState<string>('')\r\n    const [isOpenModalDelete, setIsOpenModalDelete] = useState<boolean>(false)\r\n    const [isOpenModalNewCard, setIsOpenModalNewCard] = useState<boolean>(false)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getCardsTC(deckId))\r\n    }, [deckId, page])\r\n\r\n    const addCard = () => {\r\n        setIsOpenModalNewCard(true)\r\n    }\r\n    const answerFromNewCardModal = (answer: boolean) => {\r\n        if (answer) {\r\n            const card = {cardsPack_id: deckId, question: cardQuestion, answer: cardAnswer}\r\n            dispatch(createCardTC(card, token))\r\n            setIsOpenModalDelete(false)\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n        } else {\r\n            setIsOpenModalDelete(false)\r\n            setCardQuestion('')\r\n            setCardAnswer('')\r\n        }\r\n    }\r\n    const deleteCard = (cardId: string) => {\r\n        setCard_Id(cardId)\r\n        setIsOpenModalDelete(true)\r\n    }\r\n    const answerFromDeleteModal = (answer: boolean) => {\r\n        if (answer) {\r\n            dispatch(deleteCardTC(token, card_Id, deckId))\r\n            setIsOpenModalDelete(false)\r\n        } else setIsOpenModalDelete(false)\r\n    }\r\n    const onCurrentPageClick = (currentPage: number) => {\r\n        dispatch(setCardPageAC(currentPage))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <UniCards cards={cards} searchInput={searchInput} setSearchInput={setSearchInput}\r\n                      addCard={addCard} currentDeckName={currentDeckName}\r\n                      deleteCard={deleteCard} onCurrentPageClick={onCurrentPageClick}\r\n                      cardsTotalCount={cardsTotalCount} pageCount={pageCount}\r\n                      page={page}\r\n            />\r\n            <ModalContainerNewCard setIsOpenModalNewCard={setIsOpenModalNewCard}\r\n                                   cardAnswer={cardAnswer}\r\n                                   setCardAnswer={setCardAnswer}\r\n                                   setCardQuestion={setCardQuestion}\r\n                                   cardQuestion={cardQuestion}\r\n                                   answerFromModal={answerFromNewCardModal}\r\n                                   isOpenModalNewCard={isOpenModalNewCard}\r\n                                   titleName={'Create New Card'}/>\r\n            <ModalContainerDelete setIsOpenModalDelete={setIsOpenModalDelete}\r\n                                  answerFromModal={answerFromDeleteModal}\r\n                                  isOpenModalDelete={isOpenModalDelete}\r\n                                  titleName={'Delete Card ?'}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UniCardsContainer;\r\n","import React from 'react';\r\nimport WithAuthHOC from \"../../../common/withAuth\";\r\nimport UniCardsContainer from \"./uniCardsContainer\";\r\n\r\n\r\nconst UniCardsPage = () => {\r\n  return (\r\n      <UniCardsContainer />\r\n  );\r\n};\r\n\r\nexport default WithAuthHOC(UniCardsPage);\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./uniCardsDeck.module.css\";\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {TO_CARDS} from \"../../../common/routes\";\r\n\r\ninterface IProps {\r\n    deleteDeck: (value: string) => void,\r\n    name: string,\r\n    grade: number,\r\n    deckId: string,\r\n    setDeckName: (value: string) => void,\r\n    editDeck: (value: string) => void,\r\n    setNewDeckName: (value: string) => void\r\n    editNameInput: string,\r\n    setEditNameInput: (value: string) => void,\r\n    editGradeInput: number,\r\n    setEditGradeInput: (value: number) => void\r\n}\r\n\r\nconst SingleDeck: React.FC<IProps> = ({\r\n                                          setDeckName, editDeck,\r\n                                          deckId, name, editNameInput,\r\n                                          grade, deleteDeck, setEditNameInput\r\n                                          , setEditGradeInput\r\n                                      }) => {\r\n    const [editDeckInputField, setEditDeckInputField] = useState<boolean>(false)\r\n    const editDeckInputFieldHandler = () => {\r\n        editDeck(deckId)\r\n        setEditDeckInputField(false)\r\n        setEditNameInput('')\r\n        setEditGradeInput(0)\r\n\r\n    }\r\n    return (\r\n        <div className={styles.mainList}>\r\n            {!editDeckInputField\r\n                ? <>\r\n                    <div onClick={() => setDeckName(name)} className={styles.itemName}>\r\n                        <NavLink to={TO_CARDS + `/${deckId}`}>{name}</NavLink>\r\n                        <div>(Click to interact)</div>\r\n                    </div>\r\n                    <div className={styles.itemScore}>{grade} </div>\r\n                </>\r\n                :\r\n                <Input value={editNameInput} inputType={'text'} inputPlaceholder={'type new name'}\r\n                       inputOnChange={setEditNameInput}/>\r\n            }\r\n            <div className={styles.buttonsInTheList}>\r\n                {!editDeckInputField\r\n                    ? <>\r\n                        <Button buttonName={'edit Name'}\r\n                                buttonOnClickBoolean={() => setEditDeckInputField(true)}/>\r\n                        <Button buttonName={'delete'} buttonOnClick={() => deleteDeck(deckId)}/>\r\n                    </>\r\n                    : <>\r\n                        <Button buttonName={'save'}\r\n                                buttonOnClick={editDeckInputFieldHandler}/>\r\n                        <Button buttonName={'delete'} buttonOnClick={() => deleteDeck(deckId)}/>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDeck;","import React from 'react';\r\nimport styles from './uniCardsDeck.module.css'\r\nimport Input from \"../../../common/input/Input\";\r\nimport Button from \"../../../common/button/Button\";\r\nimport {CardsDeckType} from \"../../../../bll/types\";\r\nimport SingleDeck from \"./singleDeck\";\r\nimport Paginator3000 from \"../../../common/PaginationComponent\";\r\n\r\ninterface IProps {\r\n    createNewDeck: () => void,\r\n    setNewDeckName: (value: string) => void,\r\n    deleteDeck: (value: string) => void,\r\n    newDeckName: string,\r\n    decks: Array<CardsDeckType>,\r\n    editDeck: (value: string) => void,\r\n    pageCount: number,\r\n    onCurrentPageClick: (value: number) => void\r\n    currentPage: number\r\n    cardPacksTotalCount: number,\r\n    setSearchInput: (value: string) => void,\r\n    searchInput: string,\r\n    setDeckName: (value: string) => void,\r\n    editNameInput: string,\r\n    setEditNameInput: (value: string) => void,\r\n    editGradeInput: number,\r\n    setEditGradeInput: (value: number) => void\r\n}\r\n\r\n\r\nconst UniCardsDeck: React.FC<IProps> = ({\r\n                                            searchInput, setSearchInput,\r\n                                            decks, setEditNameInput,\r\n                                            deleteDeck, editNameInput,\r\n                                            createNewDeck, setNewDeckName,\r\n                                            newDeckName, editGradeInput,\r\n                                            setEditGradeInput, editDeck, setDeckName,\r\n                                            pageCount, cardPacksTotalCount,\r\n                                            currentPage, onCurrentPageClick\r\n                                        }) => {\r\n\r\n    const deckElements = decks.map(deck =>\r\n        <SingleDeck name={deck.name} key={deck._id} deckId={deck._id} grade={deck.grade}\r\n                    deleteDeck={deleteDeck} editNameInput={editNameInput}\r\n                    setEditNameInput={setEditNameInput} setNewDeckName={setNewDeckName}\r\n                    editGradeInput={editGradeInput} editDeck={editDeck}\r\n                    setEditGradeInput={setEditGradeInput} setDeckName={setDeckName}\r\n        />)\r\n\r\n\r\n    return (\r\n        <div className={styles.uniCardsDeckWrapper}>\r\n            <h2>All Decks</h2>\r\n            <Input inputPlaceholder={'item name'} inputType={'text'}\r\n                   value={searchInput} inputOnChange={setSearchInput}/>\r\n            <Button buttonName={'search'}/>\r\n            <div className={styles.mainListWrapper}>\r\n                <Input inputPlaceholder={`Name new Deck`}\r\n                       inputType={'text'} value={newDeckName} inputOnChange={setNewDeckName}\r\n                />\r\n                <Button buttonName={'Add'} buttonOnClick={createNewDeck}/>\r\n                <Paginator3000 itemsTotalCount={cardPacksTotalCount} pageCount={pageCount}\r\n                               onCurrentPageClick={onCurrentPageClick} currentPage={currentPage}/>\r\n                <div className={styles.listHeader}>\r\n                    <span>Deck Name</span>\r\n                    <span>Deck Grade</span>\r\n                    <span>Cooperation with deck</span>\r\n                </div>\r\n                {deckElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UniCardsDeck;\r\n","import React, {useEffect, useState} from 'react';\r\nimport UniCardsDeck from \"./uniCardsDeck\";\r\nimport {\r\n    createNewCardDeckTC,\r\n    deleteDeckTC,\r\n    editDeckTC,\r\n    getDecksTC,\r\n    setCurrentDeckIdAC, setCurrentDeckNameAC, setDeckPageAC\r\n} from \"../../../../bll/cardsDeck_reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../bll/store\";\r\nimport ModalContainerDelete from \"../../modalsFeatures/modalForDeletes/modalContainerDelete\";\r\n\r\nconst UniCardsContainerDeck = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {token, id} = useSelector((state: RootState) => state.auth)\r\n    const {decks, currentDeckId, cardPacksTotalCount, pageCount, page} =\r\n        useSelector((state: RootState) => state.decks)\r\n    const [newDeckName, setNewDeckName] = useState<string>('')\r\n    const [isOpenModalDelete, setIsOpenModalDelete] = useState<boolean>(false)\r\n    const [searchInput, setSearchInput] = useState<string>('')\r\n    const [editNameInput, setEditNameInput] = useState<string>('')\r\n    const [editGradeInput, setEditGradeInput] = useState<number>(0)\r\n    useEffect(() => {\r\n        dispatch(getDecksTC(token))\r\n    }, [page])\r\n\r\n    const setDeckName = (deckName: string) => {\r\n        dispatch(setCurrentDeckNameAC(deckName))\r\n    }\r\n    const createNewDeck = () => {\r\n        const cardsDeck = {\r\n            user_id: id,\r\n            name: newDeckName\r\n        };\r\n        dispatch(createNewCardDeckTC(cardsDeck, token));\r\n        setNewDeckName('');\r\n    }\r\n    const editDeck = (_deckId: string) => {\r\n        const editedDeck = {\r\n            _id: _deckId,\r\n            grade: editGradeInput,\r\n            name: editNameInput\r\n        }\r\n        dispatch(editDeckTC(editedDeck, token))\r\n    }\r\n    const deleteDeck = (deckId: string) => {\r\n        dispatch(setCurrentDeckIdAC(deckId))\r\n        setIsOpenModalDelete(true)\r\n    }\r\n    const answerFromDeleteModal = (answer: boolean) => {\r\n        if (answer) {\r\n            dispatch(deleteDeckTC(token, currentDeckId))\r\n            setIsOpenModalDelete(false)\r\n        } else setIsOpenModalDelete(false)\r\n    }\r\n    const onCurrentPageClick = (currentPage: number) => {\r\n        dispatch(setDeckPageAC(currentPage))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <UniCardsDeck createNewDeck={createNewDeck} cardPacksTotalCount={cardPacksTotalCount}\r\n                          searchInput={searchInput} pageCount={pageCount}\r\n                          setSearchInput={setSearchInput} currentPage={page}\r\n                          decks={decks} setDeckName={setDeckName}\r\n                          editDeck={editDeck}\r\n                          newDeckName={newDeckName} setNewDeckName={setNewDeckName}\r\n                          deleteDeck={deleteDeck} onCurrentPageClick={onCurrentPageClick}\r\n                          editNameInput={editNameInput}\r\n                          setEditNameInput={setEditNameInput}\r\n                          editGradeInput={editGradeInput}\r\n                          setEditGradeInput={setEditGradeInput}/>\r\n            <ModalContainerDelete setIsOpenModalDelete={setIsOpenModalDelete}\r\n                                  answerFromModal={answerFromDeleteModal}\r\n                                  isOpenModalDelete={isOpenModalDelete}\r\n                                  titleName={'Delete Deck ?'}/>\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default UniCardsContainerDeck;","import React from 'react';\r\nimport UniCardsContainerDeck from \"./uniCardsContainerDeck\";\r\nimport WithAuthHOC from \"../../../common/withAuth\";\r\n\r\n\r\nconst UniCardsDeckPage = () => {\r\n    return (\r\n            <UniCardsContainerDeck/>\r\n    );\r\n};\r\n\r\nexport default WithAuthHOC(UniCardsDeckPage);\r\n","import React from 'react'\r\nimport s from '../modals.module.css'\r\n\r\ninterface IModal {\r\n    children: any\r\n    isOpen: boolean\r\n}\r\n\r\nconst Modal: React.FC<IModal> = ({children, isOpen}) => {\r\n    if (!isOpen) return null\r\n    return (\r\n        <div className={s.main}>\r\n            <div className={s.modelWrapper}/>\r\n            <div className={s.childrenWrapper}>\r\n                <div className={s.children}>{children}</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n","import React, {useState} from 'react';\r\nimport Modal from \"./modal\";\r\nimport Button from \"../../../common/button/Button\";\r\n\r\n\r\ninterface IProps {\r\n    onModelButtonClickName: string,\r\n    modalTitle: string\r\n}\r\n\r\nconst ModalContainer: React.FC<IProps> = ({onModelButtonClickName,modalTitle}) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    return (\r\n        <>\r\n            <Button buttonOnClickBoolean={()=>setIsOpen(!isOpen)} buttonName={onModelButtonClickName}/>\r\n            <Modal isOpen={isOpen}>\r\n                <h3>{modalTitle}</h3>\r\n                <Button buttonOnClickBoolean={() => setIsOpen(false)} buttonName={'apply'}/>\r\n                <Button buttonOnClickBoolean={() => setIsOpen(false)} buttonName={'close'}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;","import React from 'react'\r\nimport ModalContainer from './modalContainer';\r\n\r\nconst ModalsPage: React.FC = () => {\r\n\r\n    return (\r\n            <ModalContainer onModelButtonClickName={'name'} modalTitle={'title'}/>\r\n\r\n    );\r\n};\r\n\r\nexport default ModalsPage;\r\n","import React from 'react'\r\nimport styles from \"../uniCards.module.css\";\r\nimport Button from \"../../../../common/button/Button\";\r\n\r\n\r\ninterface IProps {\r\n    setIsShowedNext: (value: boolean) => void,\r\n    setGrade: (value: number) => void,\r\n}\r\n\r\nconst AnsweringButtons: React.FC<IProps> = ({setIsShowedNext, setGrade}) => {\r\n    const onClickHandler = (name: string) => {\r\n        setIsShowedNext(true);\r\n        switch (name) {\r\n            case \"didn't know\":\r\n                return setGrade(1);\r\n            case 'something answered':\r\n                return setGrade(2);\r\n            case 'bad answer':\r\n                return setGrade(3);\r\n            case 'good answer':\r\n                return setGrade(4);\r\n            case 'perfect easy':\r\n                return setGrade(5);\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.answeringButtons}>\r\n            <Button buttonOnClick={() => onClickHandler(\"didn't know\")} buttonName={\"didn't know\"}/>\r\n            <Button buttonOnClick={() => onClickHandler(\"something answered\")} buttonName={'something answered'}/>\r\n            <Button buttonOnClick={() => onClickHandler(\"bad answer\")} buttonName={'bad answer'}/>\r\n            <Button buttonOnClick={() => onClickHandler(\"good answer\")} buttonName={'good answer'}/>\r\n            <Button buttonOnClick={() => onClickHandler('perfect easy')} buttonName={'perfect easy'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AnsweringButtons","import React from 'react'\r\nimport styles from \"../uniCards.module.css\";\r\nimport {CardsType} from \"../../../../../bll/types\";\r\nimport Button from \"../../../../common/button/Button\";\r\nimport AnsweringButtons from './answeringButtons';\r\n\r\ninterface IProps {\r\n    setIsShowed: (value: boolean) => void,\r\n    isShowed: boolean,\r\n    setIsShowedNext: (value: boolean) => void,\r\n    onNextClicked: () => void,\r\n    isShowedNext: boolean,\r\n    currentCard: CardsType,\r\n    setGrade: (value: number) => void\r\n}\r\n\r\n\r\nconst SingleCard: React.FC<IProps> = ({setGrade,\r\n                                          currentCard, setIsShowed, isShowed,\r\n                                          isShowedNext, onNextClicked, setIsShowedNext\r\n                                      }) => {\r\n    return (\r\n        <div className={styles.cardMainStyle}>\r\n            <div>question:\r\n                <div>{currentCard.question}</div>\r\n            </div>\r\n            <div>answer:\r\n                {isShowed\r\n                    ? <>\r\n                        <div>{currentCard.answer}</div>\r\n                        {!isShowedNext\r\n                            ? <AnsweringButtons setGrade={setGrade} setIsShowedNext={setIsShowedNext}/>\r\n                            : <Button booleanValue={isShowedNext}\r\n                                      buttonName={'next'}\r\n                                      buttonOnClick={onNextClicked}/>\r\n                        }\r\n                    </>\r\n                    : <Button booleanValue={isShowed}\r\n                              buttonName={'show Answer'}\r\n                              buttonOnClickBoolean={() => setIsShowed(true)}/>\r\n                }\r\n            </div>\r\n            <div>\r\n                <div>grade: {currentCard.grade}</div>\r\n            </div>\r\n            <div>\r\n                <div>rating: {currentCard.rating}</div>\r\n            </div>\r\n            <div>\r\n                <div>shots: {currentCard.shots}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SingleCard;","import React, {useEffect, useState} from 'react'\r\nimport SingleCard from \"./singleCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../../bll/store\";\r\nimport {editCardTC, getCardsTC, setCardAC, setCardPageAC} from \"../../../../../bll/cards_reducer\";\r\nimport withAuth from '../../../../common/withAuth'\r\n\r\n\r\nconst SingleCardContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {currentCard, cards, pageCount, page, cardsTotalCount} = useSelector(\r\n        (state: RootState) => state.cards);\r\n    const [isShowed, setIsShowed] = useState<boolean>(false);\r\n    const [isShowedNext, setIsShowedNext] = useState<boolean>(false);\r\n    const [grade, setGrade] = useState<number>(0);\r\n    const [cardIndex, setCardIndex] = useState<number>(0);\r\n    const [passedCardsNumber, setPassedCardsNumber] = useState<number>(0);\r\n    useEffect(() => {\r\n        dispatch(setCardAC(cards[cardIndex]._id))\r\n    }, [cardIndex]);\r\n    useEffect(() => {\r\n        setPassedCardsNumber(passedCardsNumber + 1)\r\n        if(pageCount === (cardIndex + 1)) {\r\n            dispatch(setCardPageAC(page + 1))\r\n        }\r\n        const newCardGrade = {\r\n            _id: cards[cardIndex]._id,\r\n            grade\r\n        }\r\n        dispatch(editCardTC(newCardGrade))\r\n    }, [grade])\r\n    const onNextClicked = async() => {\r\n        if (pageCount === (cardIndex + 1)) {\r\n           await dispatch(getCardsTC(cards[cardIndex].cardsPack_id))\r\n            setCardIndex(0)\r\n        } else if (passedCardsNumber === cardsTotalCount) {\r\n                alert(\"that's all folks\")\r\n        } else {\r\n            setIsShowed(false)\r\n            setIsShowedNext(false)\r\n            setCardIndex(cardIndex + 1)\r\n        }\r\n    }\r\n    return <SingleCard isShowed={isShowed} setGrade={setGrade}\r\n                       setIsShowed={setIsShowed}\r\n                       isShowedNext={isShowedNext}\r\n                       setIsShowedNext={setIsShowedNext}\r\n                       onNextClicked={onNextClicked}\r\n                       currentCard={currentCard}\r\n    />\r\n}\r\n\r\nexport default withAuth(SingleCardContainer)","import React from \"react\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport LoginizationPage from \"../features/authFeatures/loginization/loginizationPage\";\r\nimport ProfilePage from \"../features/authFeatures/profile/profilePage\";\r\nimport RegistrationPage from \"../features/authFeatures/registration/registrationPage\";\r\nimport NewPswdPage from \"../features/authFeatures/newPassword/NewPswdPage\";\r\nimport PswdRecoverPage from \"../features/authFeatures/passwordRecover/PswdRecoverPage\";\r\nimport UniCardsPage from \"../features/uniCardsFeatures/uniCards/uniCardsPage\";\r\nimport UniCardsDeckPage from \"../features/uniCardsFeatures/uniCardsDeck/uniCardsDeckPage\";\r\nimport ModalsPage from \"../features/modalsFeatures/defaultModal/modalsPage\";\r\nimport SingleCardContainer from \"../features/uniCardsFeatures/uniCards/singleCard/singleCardContainer\";\r\n\r\nexport const TO_AUTH = '/auth/';\r\nexport const TO_NEW_PASSWORD = '/new-password/:token';\r\nexport const TO_PROFILE = '/profile/';\r\nexport const TO_RECOVER_PASSWORD = '/recover-password/';\r\nexport const TO_REGISTRATION = '/registration/';\r\nexport const TO_CARDS = '/cards/:id';\r\nexport const TO_CARD = '/simple-card/';\r\nexport const TO_CARDSDECK = '/cards-deck/';\r\nexport const TO_MODALS = '/test-modals/';\r\n\r\nexport const AllRoutes: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={TO_AUTH} render={()=> <LoginizationPage />} />\r\n            <Route path={TO_NEW_PASSWORD + '/:token'} render={()=> <NewPswdPage />} />\r\n            <Route path={TO_PROFILE} render={()=> <ProfilePage />} />\r\n            <Route path={TO_RECOVER_PASSWORD} render={()=> <PswdRecoverPage />} />\r\n            <Route path={TO_REGISTRATION} render={()=> <RegistrationPage />} />\r\n            <Route path={TO_CARDS + '/:deckId'} render={()=> <UniCardsPage />} />\r\n            <Route path={TO_CARDSDECK} render={()=> <UniCardsDeckPage />} />\r\n            <Route path={TO_CARD} render={()=> <SingleCardContainer />} />\r\n            <Route path={TO_MODALS} render={()=> <ModalsPage />} />\r\n            <Route exact path='/' render={()=> <Redirect to={TO_AUTH}/>} />\r\n            <Route render={()=> <div>404 BAD GATEWAY</div>} />\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {\r\n    TO_AUTH,\r\n    TO_CARDS,\r\n    TO_CARDSDECK, TO_MODALS,\r\n    TO_PROFILE,\r\n    TO_RECOVER_PASSWORD,\r\n} from \"../routes\";\r\nimport Button from \"../button/Button\";\r\nimport Loading from \"../loadingToggle/Loading\";\r\n\r\n\r\ninterface IHeaderProps {\r\n    setLinks: (value: boolean) => void,\r\n    authSuccess: boolean,\r\n    links: boolean,\r\n    myName: string\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({setLinks, links, myName, authSuccess}) => {\r\n    if (authSuccess)\r\n        return (\r\n                <div className={styles.headerWrapper}>\r\n                    {!links\r\n                        ? <div className={styles.firstWrapper}>\r\n                            <Button buttonName={'hide links'} buttonOnClickBoolean={() => {\r\n                                setLinks(!links)\r\n                            }}/>\r\n                            <NavLink to={TO_AUTH}>LoginizationPage</NavLink>\r\n                            <NavLink to={TO_PROFILE}>ProfilePage</NavLink>\r\n                            <NavLink to={TO_RECOVER_PASSWORD}>PasswordRecoveringPage</NavLink>\r\n                            <NavLink to={TO_CARDS}>Cards</NavLink>\r\n                            <NavLink to={TO_CARDSDECK}>Card's Deck</NavLink>\r\n                            <NavLink to={TO_MODALS}>Modals</NavLink>\r\n                        </div>\r\n                        : <div className={styles.secondWrapper}>\r\n                            <Button buttonName={'show links'} buttonOnClickBoolean={() => {\r\n                                setLinks(!links)\r\n                            }}/>\r\n                            <NavLink to={TO_CARDSDECK}>All Decks</NavLink>\r\n                            <Loading/>\r\n                            <NavLink to={TO_PROFILE}>{myName}</NavLink>\r\n                        </div>\r\n                    }\r\n                </div>\r\n        );\r\n    else return (\r\n        <div className={styles.headerWrapper}>\r\n            <div className={styles.secondWrapper}>\r\n                <NavLink to={TO_AUTH}>Ultimate cards Teaching application</NavLink>\r\n                <a href={'https://send.monobank.ua/jar/3xVyeLd7sE?fbclid=IwAR0ZhTWJWQ1OQs-zBmjOggfYxD_tOekdvDjPVNITQ6yWZT5jZ_UGKAS7cTY'}>Try\r\n                    now! for free (20$)</a>\r\n                <Loading/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React, {useState} from 'react'\r\nimport Header from \"./headers\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\nconst HedaerContainer = () => {\r\n    const [links, setLinks] = useState<boolean>(true)\r\n    const {myName, authSuccess} = useSelector((state: RootState) => state.auth)\r\n    return <Header authSuccess={authSuccess} setLinks={setLinks} links={links} myName={myName}/>\r\n\r\n};\r\n\r\nexport default HedaerContainer;","import React from 'react';\r\nimport './App.module.css';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../bll/store';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport s from './App.module.css';\r\nimport {AllRoutes} from \"./common/routes\";\r\nimport HedaerContainer from \"./common/header/headerContainer\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={s.App}>\r\n\r\n            <HedaerContainer/>\r\n\r\n                <AllRoutes/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}