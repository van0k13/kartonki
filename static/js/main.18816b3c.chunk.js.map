{"version":3,"sources":["ui/App.module.css","ui/common/header/header.module.css","ui/common/input/Input.module.css","ui/common/button/Button.module.css","bll/types.tsx","dal/api.ts","bll/auth_reducer.tsx","bll/newPswd_reducer.tsx","bll/profile_reducer.tsx","bll/pswdRecover_reducer.tsx","bll/registr_reducer.tsx","bll/store.tsx","ui/common/input/Input.tsx","ui/common/button/Button.tsx","ui/features/loginization/loginization.tsx","ui/features/loginization/loginizationContainer.tsx","ui/features/loginization/loginizationPage.tsx","ui/features/profile/profile.tsx","ui/features/registration/registration.tsx","ui/features/registration/registrationContainer.tsx","ui/features/registration/registrationPage.tsx","ui/features/newPassword/NewPswd.tsx","ui/features/newPassword/NewPswdContainer.tsx","ui/features/newPassword/NewPswdPage.tsx","ui/features/passwordRecover/PswdRecover.tsx","ui/features/passwordRecover/PswdRecoverContainer.tsx","ui/features/passwordRecover/PswdRecoverPage.tsx","ui/common/routes.tsx","ui/common/header/headers.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","REGISTRATE_ERROR","LOGIN_ERROR","LOGIN_SUCCESS","instance","axios","create","baseURL","loginizationAPI","email","password","rememberMe","a","post","response","data","registrationAPI","passwordRecoverAPI","setNewPasswordAPI","resetPasswordToken","initialState","authSuccess","myName","errorMessage","token","loginizationErrorAC","type","loginizationTC","dispatch","error","loginSuccess","success","name","authReducer","state","action","message","setNewPasswordSuccessAC","recoverSuccess","setNewPasswordErrorAC","newPasswordReducer","profileReducer","passwordRecoverSuccessAC","passwordRecoverErrorAC","passwordRecoveringReducer","registeredSuccess","registrationErrorAC","registrationReducer","reducerPack","combineReducers","auth","newPass","profile","recoverPass","registr","store","createStore","applyMiddleware","thunkMiddleware","Input","inputPlaceholder","value","checked","inputType","inputOnChange","inputOnChangeChecked","className","s","inputWrapper","onChange","e","currentTarget","placeholder","Button","buttonOnClick","buttonName","buttonWrapper","onClick","Loginization","login","setPassword","setLogin","setRememberMe","signIn","loginError","styles","loginizationWrapper","LoginizationContainer","useDispatch","correctCredentials","useSelector","useState","to","TO_PROFILE","LoginizationPage","ProfilePage","profileWrappe","Registration","repeatingPassword","setRepeatingPassword","registerMe","similar","wrongRepeatingPassword","messageFromServer","registrationWrapper","RegistrationContainer","answerFromServer","setSimilar","useEffect","TO_AUTH","registrationTC","RegistrationPage","NewPswd","props","console","log","newPasswordWrapper","newPassword","setNewPassword","newPasswordRepeat","setNewPasswordRepeat","differentPassword","getDataFromServer","responseStatusMessage","NewPswdContainer","responseStatus","setDifferentPassword","newPasswordTC","NewPswdPage","PswdRecover","pswdRecoverWrapper","userEmail","putUserEmail","PswdRecoverContainer","PswdRecoverPage","AllRoutes","path","render","exact","Header","headerWrapper","App","Main","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,cAAgB,gC,wCCAlCD,EAAOC,QAAU,CAAC,aAAe,8B,mBCAjCD,EAAOC,QAAU,CAAC,cAAgB,gC,+RCoBrBC,EAAmB,mCACnBC,EAAc,2BACdC,EAAgB,6B,QCnBhBC,E,OAAWC,EAAMC,OAAO,CACjCC,QAHmB,+CAmBVC,EAAe,uCAAG,WAAOC,EAAeC,EAAkBC,GAAxC,eAAAC,EAAA,sEACJR,EAASS,KAAoB,SAAU,CAACJ,QAAOC,WAAUC,eADrD,cACrBG,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,0DAIfC,EAAe,uCAAG,WAAOP,EAAeC,GAAtB,eAAAE,EAAA,sEACAR,EAASS,KAAoB,YAAa,CAACJ,QAAOC,aADlD,cACjBI,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,wDAKfE,EAAkB,uCAAG,WAAOR,GAAP,eAAAG,EAAA,sEACPR,EAASS,KAAoB,UAAW,CAACJ,UADlC,cACxBK,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,sDAIlBG,EAAiB,uCAAG,WAAOR,EAAkBS,GAAzB,eAAAP,EAAA,sEACNR,EAASS,KAAoB,oBAAqB,CAACH,WAAUS,uBADvD,cACvBL,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,wDCvBxBK,EAA4B,CAC9BC,aAAa,EACbC,OAAQ,GACRC,aAAc,GACdC,MAAO,IAuBLC,EAAsB,SAACF,GAAD,MAAuC,CAACG,KAAMxB,EAAaqB,iBAI1EI,EAAiB,SAAClB,EAAcC,EAAiBC,GAAhC,8CAC1B,WAAMiB,GAAN,eAAAhB,EAAA,+EAE2BJ,EAAgBC,EAAOC,EAAUC,GAF5D,QAEcI,EAFd,QAGiBc,MACLD,EAASH,EAAoBV,EAAKc,QACjCD,GAZcE,EAYiBf,EAAKgB,QAZCT,EAYQP,EAAKiB,KAZER,EAYIT,EAAKS,MAXzE,CAACE,KAAMvB,EAAe2B,eAAcR,SAAQE,WAM7C,gDAOQI,EAASH,EAAoB,KAAEX,SAASC,KAAKc,QAPrD,kCAP0B,IAACC,EAAuBR,EAAeE,IAOjE,oBAD0B,uDAWfS,EAlCK,WAAiE,IAAhEC,EAA+D,uDAA1Cd,EAAce,EAA4B,uCAChF,OAAQA,EAAOT,MACX,KAAKvB,EACD,OAAO,eACA+B,EADP,CACcb,YAAac,EAAOL,aAAcR,OAAQa,EAAOb,OAC3DE,MAAOW,EAAOX,QAEtB,KAAKtB,EACD,OAAO,eACAgC,EADP,CACcX,aAAcY,EAAOZ,eAEvC,QACI,OAAOW,I,QCnBbd,EAAsC,CACxCW,SAAS,EACTK,QAAS,IAsCPC,EAA0B,SAACC,GAAD,MACF,CAACZ,KH3BK,uBG2BuBY,mBAE9CC,EAAwB,SAAChB,GAAD,MACT,CAACG,KH7BK,qBG6BqBH,iBAGxCiB,EAzCY,WAA2E,IAA1EN,EAAyE,uDAA1Cd,EAAce,EAA4B,uCACjG,OAAQA,EAAOT,MACX,IHM4B,uBGLxB,OAAO,eACAQ,EADP,CAEIH,QAASI,EAAOG,eAChBF,QAAS,gBAEjB,IHC0B,qBGAtB,OAAO,eACAF,EADP,CAEIE,QAASD,EAAOZ,eAExB,QACI,OAAOW,IC9Bbd,EAAuB,GAedqB,EAVQ,WAA4D,IAA3DP,EAA0D,uDAA1Cd,EAAce,EAA4B,uCAC9E,OAAQA,EAAOT,MACX,IJSoB,eIPpB,IJQqB,gBINrB,QACI,OAAOQ,ICAbd,EAAsC,CACxCW,SAAS,EACTK,QAAS,IAsCPM,EAA2B,SAACJ,GAAD,MACC,CAACZ,KL/BK,2BK+B2BY,mBAEtDK,EAAyB,SAACpB,GAAD,MACN,CAACG,KLjCK,yBKiCyBH,iBAIhDqB,EA1CmB,WAA2E,IAA1EV,EAAyE,uDAA1Cd,EAAce,EAA4B,uCACxG,OAAQA,EAAOT,MACX,ILEgC,2BKD5B,OAAO,eACAQ,EADP,CAEIH,QAASI,EAAOG,eAChBF,QAAS,uIAEjB,ILH8B,yBKI1B,OAAO,eACAF,EADP,CAEIE,QAASD,EAAOZ,eAExB,QACI,OAAOW,ICxBbd,EAA6B,CAC/BgB,QAAS,GACTS,mBAAmB,GAiBVC,EAAsB,SAACvB,GAAD,MACR,CAACG,KAAMzB,EAAkBsB,iBAgBrCwB,EA/Ba,WAAkE,IAAjEb,EAAgE,uDAA1Cd,EAAce,EAA4B,uCACzF,OAAQA,EAAOT,MACX,ING0B,qCMFtB,OAAO,eAAIQ,EAAX,CAAkBE,QAAS,aAAcS,kBAAmBV,EAAOU,oBACvE,KAAK5C,EACD,OAAO,eAAIiC,EAAX,CAAkBE,QAASD,EAAOZ,eACtC,QACI,OAAOW,ICdbc,EAAcC,YAAgB,CAChCC,KAAMjB,EACNkB,QAASX,EACTY,QAASX,EACTY,YAAaT,EACbU,QAASP,IAOEQ,EAHDC,YAAYR,EAAaS,YAAgBC,M,0ECkBxCC,EAxBsB,SAAC,GAOO,IANHC,EAME,EANFA,iBACAC,EAKE,EALFA,MACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,UACAC,EAEE,EAFFA,cACAC,EACE,EADFA,qBAUtC,OACI,yBAAKC,UAAWC,IAAEC,cACd,2BAAOC,SAVE,SAACC,GACVN,EACAA,EAAcM,EAAEC,cAAcV,OACxBI,GACNA,EAAqBK,EAAEC,cAAcT,UAMVU,YAAaZ,EACjCC,MAAOA,EAAOC,QAASA,EAASpC,KAAMqC,M,oBCd1CU,GARwB,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WACpD,OACI,yBAAKT,UAAWC,KAAES,eACd,4BAAQC,QAASH,GAAgBC,GAAyB,YCgCvDG,GA1BwB,SAAC,GAEgC,IAF/BC,EAE8B,EAF9BA,MAAOrE,EAEuB,EAFvBA,SAAUsE,EAEa,EAFbA,YACdC,EAC2B,EAD3BA,SAAUC,EACiB,EADjBA,cAAeC,EACE,EADFA,OACzBxE,EAA2B,EAA3BA,WAAWyE,EAAgB,EAAhBA,WACrD,OACE,yBAAKlB,UAAWmB,IAAOC,qBACrB,iDACE,6BACI,kBAAC,EAAD,CAAOtB,cAAeiB,EACflB,UAAW,OAAQF,MAAOkB,EAAOnB,iBAAkB,oBAE9D,6BACI,kBAAC,EAAD,CAAOG,UAAW,WAAYF,MAAOnD,EAAUsD,cAAegB,EACvDpB,iBAAkB,mBAE7B,6BACI,kBAAC,EAAD,CAAOG,UAAW,WAAYD,QAASnD,EAAYsD,qBAAsBiB,KAE7E,6BACI,kBAAC,GAAD,CAAQP,WAAY,UAAWD,cAAeS,KAEjDC,EAAY,4CAA0B,OCAhCG,GA5Be,WAE1B,IAAM3D,EAAW4D,cACXC,EAAqBC,aAAY,SAACxD,GAAD,OAAsBA,EAAMgB,KAAK7B,eAClE+D,EAAaM,aAAY,SAACxD,GAAD,OAAsBA,EAAMgB,KAAK3B,gBAJhC,EAKNoE,mBAAS,IALH,mBAKzBZ,EALyB,KAKlBE,EALkB,OAMAU,mBAAS,IANT,mBAMzBjF,EANyB,KAMfsE,EANe,OAOIW,oBAAS,GAPb,mBAOzBhF,EAPyB,KAObuE,EAPa,KAS9BC,EAAM,uCAAG,sBAAAvE,EAAA,sEACLgB,EAASD,EAAeoD,EAAOrE,EAAUC,IADpC,2CAAH,qDAKR,OACI,oCACM8E,EAMI,kBAAC,IAAD,CAAUG,GAAIC,KALd,kBAAC,GAAD,CAAcZ,SAAUA,EAAUD,YAAaA,EACjCE,cAAeA,EAAeE,WAAYA,EAC1CL,MAAOA,EAAOrE,SAAUA,EAAUC,WAAYA,EAC9CwE,OAAQA,MCjBzBW,GANU,WACrB,OACI,kBAAC,GAAD,O,oBCIOC,GARK,WAClB,OACE,yBAAK7B,UAAWmB,KAAOW,eACrB,8C,oBCwCSC,GA7BwB,SAAC,GAIoD,IAJnDlB,EAIkD,EAJlDA,MAAOrE,EAI2C,EAJ3CA,SACJwF,EAG+C,EAH/CA,kBACAlB,EAE+C,EAF/CA,YAAaC,EAEkC,EAFlCA,SAAUkB,EAEwB,EAFxBA,qBACvBC,EAC+C,EAD/CA,WAAYC,EACmC,EADnCA,QACZC,EAA+C,EAA/CA,uBAAwBC,EAAuB,EAAvBA,kBAChE,OACA,yBAAKrC,UAAWmB,KAAOmB,qBACnB,iDACA,6BACI,kBAAC,EAAD,CAAOxC,cAAeiB,EACflB,UAAW,OAAQF,MAAOkB,EAAOnB,iBAAkB,oBAE9D,6BACI,kBAAC,EAAD,CAAOG,UAAW,WAAYF,MAAOnD,EAAUsD,cAAegB,EACvDpB,iBAAkB,mBAE7B,6BACI,kBAAC,EAAD,CAAOG,UAAW,WAAYF,MAAOqC,EAAmBlC,cAAemC,EAChEvC,iBAAkB,0BAChByC,GAAW,2DAExB,6BACI,kBAAC,GAAD,CAAS3B,cAAe2B,EAASD,EAAaE,EAAwB3B,WAAY,YACjF,8BAAO4B,MCMLE,GAtCe,WAE1B,IAAM7E,EAAW4D,cACXkB,EAAmBhB,aAAY,SAACxD,GAAD,OAAsBA,EAAMoB,QAAQT,qBACnE0D,EAAoBb,aAAY,SAACxD,GAAD,OAAsBA,EAAMoB,QAAQlB,WAJ1C,EAKNuD,mBAAS,IALH,mBAKzBZ,EALyB,KAKlBE,EALkB,OAMAU,mBAAS,IANT,mBAMzBjF,EANyB,KAMfsE,EANe,OAOkBW,mBAAS,IAP3B,mBAOzBO,EAPyB,KAONC,EAPM,OAQFR,oBAAS,GARP,mBAQzBU,EARyB,KAQhBM,EARgB,KAShCC,qBAAU,WACkDD,IAArDT,IAAsBxF,IAAYwF,MAEtC,CAACA,GAAqBxF,IAOzB,OACI,oCACMgG,EAWA,kBAAC,IAAD,CAAUd,GAAIiB,KAVf,kBAAC,GAAD,CAAc5B,SAAUA,EACXD,YAAaA,EACbD,MAAOA,EAAOrE,SAAUA,EACxBwF,kBAAmBA,EACnBC,qBAAsBA,EACtBE,QAASA,EACTD,WAfH,WAAOxE,ETWA,SAACnB,EAAcC,GAAf,8CACzB,WAAMkB,GAAN,eAAAhB,EAAA,+EAE0BI,EAAgBP,EAAOC,GAFjD,QAEaK,EAFb,QAGec,MACJD,EAASkB,EAAoB/B,EAAKc,QAElCD,EAZa,CAACF,KNRI,qCMQsBmB,kBAYT9B,EAAKgB,UAN/C,gDAQOH,EAASkB,EAAoB,KAAEhC,SAASC,KAAKc,QARpD,yDADyB,sDSXSiF,CAAe/B,EAAOrE,KAgBlC6F,kBAAmBA,EACpBD,uBAfS,WAC3B1E,EAASkB,EAAoB,2BCftBiE,GANU,WACrB,OACI,kBAAC,GAAD,O,oBCyCOC,GA7B0B,SAACC,GAExC,OADEC,QAAQC,IAAIF,EAAMZ,SAElB,yBAAKnC,UAAWmB,KAAO+B,oBACrB,iDACE,6BACI,kBAAC,EAAD,CAAOrD,UAAU,WAAWF,MAAOoD,EAAMI,YAClCrD,cAAeiD,EAAMK,eAAgB1D,iBAAiB,kBAGjE,6BACI,kBAAC,EAAD,CAAOG,UAAU,WAAWF,MAAOoD,EAAMM,kBAClCvD,cAAeiD,EAAMO,qBAAsB5D,iBAAiB,yBAIvE,6BACI,8BAAOqD,EAAMQ,mBAEb,kBAAC,GAAD,CAAQ9C,WAAW,mBACXD,cAAeuC,EAAMS,oBAG7B,8BAAOT,EAAMU,0BCMVC,GAxCU,WAAM,MAESjC,mBAAS,IAFlB,mBAEtB0B,EAFsB,KAETC,EAFS,OAGqB3B,mBAAS,IAH9B,mBAGtB4B,EAHsB,KAGHC,EAHG,KAIvBK,EAAiBnC,aAAY,SAACxD,GAAD,OAAsBA,EAAMiB,QAAQpB,WACjE4F,EAAwBjC,aAAY,SAACxD,GAAD,OAAsBA,EAAMiB,QAAQf,WALjD,EAMuBuD,mBAAS,IANhC,mBAMpB8B,EANoB,KAMDK,EANC,KAOrBlG,EAAW4D,cACXrE,EAAqBuE,aAAY,SAACxD,GAAD,OAAsBA,EAAMgB,KAAK1B,SAR7C,EAWGmE,oBAAS,GAXZ,mBAWpBU,EAXoB,KAWXM,EAXW,KAY3BC,qBAAU,WACgCD,EAAnCU,IAAgBE,KAEpB,CAACF,GAAeE,IAenB,OACI,kBAAC,GAAD,CAASF,YAAaA,EAAaC,eAAgBA,EAC1CC,kBAAmBA,EAAmBC,qBAAsBA,EAC5DK,eAAgBA,EAAgBF,sBAAuBA,EACvDD,kBAjBa,WAEnBL,IAAgBE,GACfZ,GAAW,GACX/E,EfSiB,SAAClB,EAAkBS,GAAnB,8CACzB,WAAMS,GAAN,eAAAhB,EAAA,+EAE2BM,EAAkBR,EAAUS,GAFvD,QAEcJ,EAFd,QAGgBc,MACJD,EAASW,EAAsBxB,EAAKc,QAEpCD,EAASS,EAAwBtB,EAAKgB,UANlD,gDAQQH,EAASW,EAAsB,KAAEzB,SAASC,KAAKc,QAC/CqF,QAAQC,IAAI,KAAErG,SAASC,KAAKc,OATpC,yDADyB,sDeTRkG,CAAcV,EAAalG,IACpC2G,EAAqB,iBAErBnB,GAAW,GACXmB,EAAqB,wBASsBzB,QAASA,EAASoB,kBAAmBA,KC/B7EO,GANK,WAChB,OACI,kBAAC,GAAD,O,oBCwBOC,GAjBkC,SAAChB,GAChD,OACE,yBAAK/C,UAAWmB,KAAO6C,oBACnB,wDACA,6BACI,kBAAC,EAAD,CAAOnE,UAAU,QAAQF,MAAOoD,EAAMkB,UAAWnE,cAAeiD,EAAMmB,eAGtE,kCAAQnB,EAAMU,sBAAd,MAEJ,6BACI,kBAAC,GAAD,CAAQhD,WAAW,UAAUD,cAAeuC,EAAMS,uBCC/CW,GAlBc,SAACpB,GAAe,MAETtB,mBAAS,SAFA,mBAEpCwC,EAFoC,KAEzBC,EAFyB,KAGrCP,EAAiBnC,aAAY,SAACxD,GAAD,OAAsBA,EAAMmB,YAAYtB,WACrE4F,EAAwBjC,aAAY,SAACxD,GAAD,OAAsBA,EAAMmB,YAAYjB,WAC1ER,EAAW4D,cAMjB,OACI,kBAAC,GAAD,CAAa2C,UAAWA,EAAWC,aAAcA,EAAcP,eAAgBA,EAClEH,kBAPS,WhB0BG,IAACjH,EgBxB1BmB,GhBwB0BnB,EgBxBC0H,EhBwBF,uCAC7B,WAAMvG,GAAN,eAAAhB,EAAA,+EAE2BK,EAAmBR,GAF9C,QAEcM,EAFd,QAGgBc,MACJD,EAASe,EAAuB5B,EAAKc,QAErCD,EAASc,EAAyB3B,EAAKgB,UANnD,gDAQQH,EAASe,EAAuB,KAAE7B,SAASC,KAAKc,QAChDqF,QAAQC,IAAI,KAAErG,SAASC,KAAKc,OATpC,yDAD6B,yDgBnB0B8F,sBAAuBA,KCVnEW,GANS,WACpB,OACI,kBAAC,GAAD,OCEKzB,GAAU,QAEVhB,GAAa,WAIb0C,GAAsB,WAC/B,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAM3B,GAAS4B,OAAQ,kBAAK,kBAAC,GAAD,SACnC,kBAAC,IAAD,CAAOD,KATY,gBASWC,OAAQ,kBAAK,kBAAC,GAAD,SAC3C,kBAAC,IAAD,CAAOD,KAAM3C,GAAY4C,OAAQ,kBAAK,kBAAC,GAAD,SACtC,kBAAC,IAAD,CAAOD,KATgB,oBASWC,OAAQ,kBAAK,kBAAC,GAAD,SAC/C,kBAAC,IAAD,CAAOD,KATY,gBASWC,OAAQ,kBAAK,kBAAC,GAAD,SAC3C,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAK,IAAIC,OAAQ,kBAAK,kBAAC,IAAD,CAAU7C,GAAIiB,QACjD,kBAAC,IAAD,CAAO2B,KAAK,IAAIC,OAAQ,kBAAK,qDCL1BE,GAZA,WACb,OACE,yBAAKzE,UAAWmB,IAAOuD,eACrB,kBAAC,IAAD,CAAShD,GAAIiB,IAAb,oBACA,kBAAC,IAAD,CAASjB,GDDgB,iBCCzB,mBACA,kBAAC,IAAD,CAASA,GAAIC,IAAb,eACA,kBAAC,IAAD,CAASD,GDDoB,qBCC7B,0BACA,kBAAC,IAAD,CAASA,GDDgB,iBCCzB,sBCHAiD,GAAgB,WACpB,OACE,yBAAK3E,UAAWC,IAAE0E,KACV,kBAAC,GAAD,MAEA,kBAAC,GAAD,QAgBGC,GAVQ,WACrB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUvF,MAAOA,GACf,kBAAC,GAAD,SCbYwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjI,GACLqF,QAAQrF,MAAMA,EAAMO,c","file":"static/js/main.18816b3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LKvuZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__1bHj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Input_inputWrapper__2iRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__11CDY\"};","export interface IState {\r\n\r\n}\r\nexport interface IStatePasswordRecover {\r\n  success: boolean\r\n  message: string\r\n}\r\nexport interface IStateRegistr {\r\n  message: string,\r\n  registeredSuccess: boolean\r\n}\r\nexport interface IStateLogin {\r\n  myName: string,\r\n  authSuccess: boolean,\r\n  errorMessage: string,\r\n  token: string\r\n}\r\n\r\nexport const FIRST_ACTION = 'FIRST_ACTION'\r\nexport const SECOND_ACTION = 'SECOND_ACTION'\r\nexport const REGISTRATE_SUCCESS = 'registr_reducer/REGISTRATE_SUCCESS'\r\nexport const REGISTRATE_ERROR = 'registr_reducer/REGISTRATE_ERROR'\r\nexport const LOGIN_ERROR = 'auth_reducer/LOGIN_ERROR'\r\nexport const LOGIN_SUCCESS = 'auth_reducer/LOGIN_SUCCESS'\r\nexport const PASSWORD_RECOVER_SUCCESS = 'PASSWORD_RECOVER_SUCCESS';\r\nexport const PASSWORD_RECOVER_ERROR = 'PASSWORD_RECOVER_ERROR';\r\nexport const NEW_PASSWORD_SUCCESS = 'NEW_PASSWORD_SUCCESS';\r\nexport const NEW_PASSWORD_ERROR = 'NEW_PASSWORD_ERROR';\r\n\r\n\r\nexport interface firstActionCreator {\r\n  type: typeof FIRST_ACTION\r\n  payload: any\r\n}\r\nexport interface secondActionCreator {\r\n  type: typeof SECOND_ACTION\r\n  payload: any\r\n}\r\nexport interface ILoginSuccess {\r\n  type: typeof LOGIN_SUCCESS,\r\n  loginSuccess: boolean,\r\n  myName: string,\r\n  token: string\r\n}\r\nexport interface ILoginError {\r\n  type: typeof LOGIN_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IRegistrateSuccess {\r\n  type: typeof REGISTRATE_SUCCESS,\r\n  registeredSuccess:boolean\r\n}\r\nexport interface IRegistrateError {\r\n  type: typeof REGISTRATE_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IPasswordRecoverSuccess {\r\n  type: typeof PASSWORD_RECOVER_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface IPasswordRecoverError {\r\n  type: typeof PASSWORD_RECOVER_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface INewPasswordSuccess {\r\n  type: typeof NEW_PASSWORD_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface INewPasswordError {\r\n  type: typeof NEW_PASSWORD_ERROR,\r\n  errorMessage: string\r\n}\r\n\r\nexport type ChatActionTypes = firstActionCreator| secondActionCreator| IRegistrateSuccess | IRegistrateError |\r\n    IPasswordRecoverSuccess | IPasswordRecoverError | ILoginSuccess | ILoginError | INewPasswordSuccess | INewPasswordError\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = 'https://neko-cafe-back.herokuapp.com/auth/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\n\r\nexport interface ILoginization {\r\n    success: boolean;\r\n    name: string;\r\n    error: string;\r\n    token: string;\r\n}\r\nexport interface IRegistration {\r\n    success: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const loginizationAPI = async (email: string, password: string, rememberMe: boolean) => {\r\n    const response = await instance.post<ILoginization>('/login', {email, password, rememberMe});\r\n    return response.data;\r\n};\r\nexport const registrationAPI = async (email: string, password: string) => {\r\n        const response = await instance.post<IRegistration>('/register', {email, password});\r\n        return response.data;\r\n};\r\n\r\nexport const passwordRecoverAPI = async (email: string) => {\r\n    const response = await instance.post<IRegistration>('/forgot', {email});\r\n    return response.data;\r\n};\r\nexport const setNewPasswordAPI = async (password: string, resetPasswordToken: string) => {\r\n    const response = await instance.post<IRegistration>('/set-new-password', {password, resetPasswordToken});\r\n    return response.data;\r\n};","import {\r\n    ChatActionTypes,\r\n    ILoginError,\r\n    ILoginSuccess,\r\n    IStateLogin,\r\n    LOGIN_ERROR,\r\n    LOGIN_SUCCESS\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginizationAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStateLogin = {\r\n    authSuccess: false,\r\n    myName: '',\r\n    errorMessage: '',\r\n    token: ''\r\n}\r\n\r\n\r\nconst authReducer = (state: IStateLogin = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state, authSuccess: action.loginSuccess, myName: action.myName,\r\n                token: action.token\r\n            }\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state, errorMessage: action.errorMessage\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst loginizationSuccessAC = (loginSuccess: boolean, myName:string, token:string):ILoginSuccess =>\r\n    ({type: LOGIN_SUCCESS, loginSuccess, myName, token})\r\nconst loginizationErrorAC = (errorMessage: string):ILoginError => ({type: LOGIN_ERROR, errorMessage})\r\n\r\n\r\n\r\nexport const loginizationTC = (email:string, password:string, rememberMe: boolean) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            const data = await loginizationAPI(email, password, rememberMe);\r\n            if (data.error)\r\n                dispatch(loginizationErrorAC(data.error))\r\n            else dispatch(loginizationSuccessAC(data.success, data.name, data.token ))\r\n        } catch (e) {\r\n            dispatch(loginizationErrorAC(e.response.data.error))\r\n        }\r\n    }\r\nexport default authReducer;","import {\r\n    IState,\r\n    ChatActionTypes,\r\n    FIRST_ACTION,\r\n    SECOND_ACTION,\r\n    NEW_PASSWORD_SUCCESS,\r\n    NEW_PASSWORD_ERROR,\r\n    INewPasswordSuccess, INewPasswordError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setNewPasswordAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst newPasswordReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case NEW_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Successful!'\r\n            };\r\n        case NEW_PASSWORD_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const newPasswordTC = (password: string, resetPasswordToken: string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            const data = await setNewPasswordAPI(password, resetPasswordToken);\r\n            if(data.error) {\r\n                dispatch(setNewPasswordErrorAC(data.error));\r\n            } else\r\n                dispatch(setNewPasswordSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(setNewPasswordErrorAC(e.response.data.error));\r\n            console.log(e.response.data.error)\r\n        }\r\n    };\r\n\r\n//Action Creators\r\nconst setNewPasswordSuccessAC = (recoverSuccess: boolean)\r\n    : INewPasswordSuccess => ({type: NEW_PASSWORD_SUCCESS, recoverSuccess});\r\n\r\nexport const setNewPasswordErrorAC = (errorMessage: string)\r\n    : INewPasswordError => ({type: NEW_PASSWORD_ERROR, errorMessage});\r\n\r\n\r\nexport default newPasswordReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer;","import {\r\n    IState,\r\n    ChatActionTypes,\r\n    FIRST_ACTION,\r\n    SECOND_ACTION,\r\n    PASSWORD_RECOVER_ERROR,\r\n    PASSWORD_RECOVER_SUCCESS,\r\n    IPasswordRecoverSuccess,\r\n    IPasswordRecoverError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {passwordRecoverAPI} from \"../dal/api\";\r\nimport {strict} from \"assert\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst passwordRecoveringReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case PASSWORD_RECOVER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Успешно! Проверьте свой email.'\r\n            };\r\n        case PASSWORD_RECOVER_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const passwordRecoverTC = (email:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            const data = await passwordRecoverAPI(email);\r\n            if(data.error) {\r\n                dispatch(passwordRecoverErrorAC(data.error));\r\n            } else\r\n                dispatch(passwordRecoverSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(passwordRecoverErrorAC(e.response.data.error));\r\n            console.log(e.response.data.error)\r\n        }\r\n    };\r\n\r\n//Action Creators (success error)\r\nconst passwordRecoverSuccessAC = (recoverSuccess: boolean)\r\n    : IPasswordRecoverSuccess => ({type: PASSWORD_RECOVER_SUCCESS, recoverSuccess});\r\n\r\nexport const passwordRecoverErrorAC = (errorMessage: string)\r\n    : IPasswordRecoverError => ({type: PASSWORD_RECOVER_ERROR, errorMessage});\r\n\r\n\r\n\r\nexport default passwordRecoveringReducer;","import {\r\n    ChatActionTypes,\r\n    REGISTRATE_ERROR,\r\n    REGISTRATE_SUCCESS,\r\n    IRegistrateSuccess,\r\n    IRegistrateError, IStateRegistr\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/api\";\r\n\r\nconst initialState:IStateRegistr = {\r\n    message: '',\r\n    registeredSuccess: false\r\n};\r\n\r\nconst registrationReducer = (state:IStateRegistr = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case REGISTRATE_SUCCESS:\r\n            return {...state, message: 'successich', registeredSuccess: action.registeredSuccess}\r\n        case REGISTRATE_ERROR:\r\n            return {...state, message: action.errorMessage}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst registrationSuccessAC = (registeredSuccess: boolean)\r\n    : IRegistrateSuccess => ({type: REGISTRATE_SUCCESS, registeredSuccess});\r\nexport const registrationErrorAC = (errorMessage: string)\r\n    : IRegistrateError => ({type: REGISTRATE_ERROR, errorMessage});\r\n\r\n\r\nexport const registrationTC = (email:string, password:string) =>\r\n     async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            const data = await registrationAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(registrationErrorAC(data.error));\r\n            } else\r\n                dispatch(registrationSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(registrationErrorAC(e.response.data.error))\r\n        }\r\n}\r\n\r\nexport default registrationReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport authReducer from './auth_reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport newPasswordReducer from \"./newPswd_reducer\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport passwordRecoveringReducer from \"./pswdRecover_reducer\";\r\nimport registrationReducer from \"./registr_reducer\";\r\n\r\nconst reducerPack = combineReducers({\r\n    auth: authReducer,\r\n    newPass: newPasswordReducer,\r\n    profile: profileReducer,\r\n    recoverPass: passwordRecoveringReducer,\r\n    registr: registrationReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducerPack>\r\n\r\nconst store = createStore(reducerPack, applyMiddleware(thunkMiddleware) );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ninterface IPropsInput {\r\n    inputPlaceholder?: string | undefined,\r\n    value?: string  | undefined,\r\n    checked?: boolean | undefined,\r\n    inputType?:string | undefined,\r\n    inputOnChange?: (value: string ) => void,\r\n    inputOnChangeChecked?: (value: boolean ) => void\r\n}\r\nconst Input: React.FC<IPropsInput> = ({\r\n                                          inputPlaceholder,\r\n                                          value ,\r\n                                          checked,\r\n                                          inputType,\r\n                                          inputOnChange,\r\n                                          inputOnChangeChecked\r\n                                      }) => {\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputOnChange) {\r\n            inputOnChange(e.currentTarget.value)\r\n        } else if(inputOnChangeChecked) {\r\n            inputOnChangeChecked(e.currentTarget.checked)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <input onChange={onChange} placeholder={inputPlaceholder}\r\n                   value={value} checked={checked} type={inputType}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ninterface IPropsButton {\r\n    buttonOnClick?: () => void,\r\n    buttonName?: string\r\n}\r\n\r\nconst Button: React.FC<IPropsButton> = ({buttonOnClick, buttonName}) => {\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button onClick={buttonOnClick}>{buttonName? buttonName : 'submit'}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './loginization.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRememberMe: (value: boolean) => void,\r\n    signIn: () => void,\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    loginError: string,\r\n\r\n}\r\n\r\nconst Loginization: React.FC<IProps> = ({login, password, setPassword,\r\n                                            setLogin, setRememberMe, signIn,\r\n                                            rememberMe,loginError}) => {\r\n  return (\r\n    <div className={styles.loginizationWrapper}>\r\n      <h2>Loginization Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'checkbox'} checked={rememberMe} inputOnChangeChecked={setRememberMe}/>\r\n        </div>\r\n        <div>\r\n            <Button buttonName={'Sign In'} buttonOnClick={signIn}/>\r\n        </div>\r\n        {loginError? <span>loginError</span> : null}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loginization;\r\n","import React, {useState} from 'react';\r\nimport Loginization from \"./loginization\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginizationTC} from \"../../../bll/auth_reducer\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {TO_PROFILE} from \"../../common/routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginizationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const correctCredentials = useSelector((state: RootState) => state.auth.authSuccess)\r\n    const loginError = useSelector((state: RootState) => state.auth.errorMessage)\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\nconst signIn = async () => {\r\n    await dispatch(loginizationTC(login, password, rememberMe))\r\n\r\n}\r\n\r\n    return (\r\n        <>\r\n            {!correctCredentials\r\n                ? <Loginization setLogin={setLogin} setPassword={setPassword}\r\n                                setRememberMe={setRememberMe} loginError={loginError}\r\n                                login={login} password={password} rememberMe={rememberMe}\r\n                                signIn={signIn}\r\n                />\r\n                : <Redirect to={TO_PROFILE}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginizationContainer;\r\n","import React from 'react';\r\nimport LoginizationContainer from \"./loginizationContainer\";\r\n\r\n;\r\n\r\n\r\nconst LoginizationPage = () => {\r\n    return (\r\n        <LoginizationContainer />\r\n    );\r\n};\r\n\r\nexport default LoginizationPage;\r\n","import React from 'react';\r\nimport styles from './profile.module.css'\r\n\r\n\r\nconst ProfilePage = () => {\r\n  return (\r\n    <div className={styles.profileWrappe}>\r\n      <h2>Profile Page</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport styles from './registr.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRepeatingPassword: (value: string) => void,\r\n    wrongRepeatingPassword: () => void,\r\n    registerMe: () => void,\r\n    login: string,\r\n    password: string,\r\n    repeatingPassword: string,\r\n    similar: boolean\r\n    messageFromServer: string\r\n}\r\n\r\nconst Registration: React.FC<IProps> = ({login, password,\r\n                                            repeatingPassword,\r\n                                            setPassword, setLogin, setRepeatingPassword,\r\n                                            registerMe, similar,\r\n                                            wrongRepeatingPassword, messageFromServer}) => {\r\n    return (\r\n    <div className={styles.registrationWrapper}>\r\n        <h2>Registration Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={repeatingPassword} inputOnChange={setRepeatingPassword}\r\n                   inputPlaceholder={'repeat your password'}/>\r\n                   {!similar && <span>password does not match!</span>}\r\n        </div>\r\n        <div>\r\n            <Button  buttonOnClick={similar? registerMe : wrongRepeatingPassword} buttonName={'Sign Up'}/>\r\n            {<span>{messageFromServer}</span>}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Registration from \"./registration\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationErrorAC, registrationTC} from \"../../../bll/registr_reducer\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TO_AUTH} from \"../../common/routes\";\r\n\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const answerFromServer = useSelector((state: RootState) => state.registr.registeredSuccess)\r\n    const messageFromServer = useSelector((state: RootState) => state.registr.message)\r\n    const [login, setLogin] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [repeatingPassword, setRepeatingPassword] = useState('');\r\n    const [similar, setSimilar] = useState(false);\r\n    useEffect(()=> {\r\n        if(repeatingPassword === password && repeatingPassword) setSimilar(true)\r\n            else setSimilar(false)\r\n    }, [repeatingPassword || password]);\r\n    const registerMe = () => {dispatch(registrationTC(login, password))\r\n    }\r\n    const wrongRepeatingPassword = () => {\r\n        dispatch(registrationErrorAC('wrong credentials'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!answerFromServer\r\n           ? <Registration setLogin={setLogin}\r\n                          setPassword={setPassword}\r\n                          login={login} password={password}\r\n                          repeatingPassword={repeatingPassword}\r\n                          setRepeatingPassword={setRepeatingPassword}\r\n                          similar={similar}\r\n                          registerMe={registerMe}\r\n                           messageFromServer={messageFromServer}\r\n                          wrongRepeatingPassword={wrongRepeatingPassword}\r\n            />\r\n            : <Redirect to={TO_AUTH}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegistrationContainer;\r\n","import React from 'react';\r\nimport RegistrationContainer from \"./registrationContainer\";\r\n\r\n\r\nconst RegistrationPage = () => {\r\n    return (\r\n        <RegistrationContainer />\r\n    );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react';\r\nimport styles from './newPswd.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ninterface IPropsNewPswd {\r\n    setNewPassword: (value: string) => void,\r\n    setNewPasswordRepeat: (value: string) => void,\r\n    newPassword: string,\r\n    newPasswordRepeat: string,\r\n    responseStatus: boolean,\r\n    responseStatusMessage: string,\r\n    getDataFromServer: ()=> void,\r\n    similar: boolean,\r\n    differentPassword: string,\r\n\r\n}\r\n\r\nconst NewPswd: React.FC<IPropsNewPswd> = (props) => {\r\n    console.log(props.similar);\r\n  return (\r\n    <div className={styles.newPasswordWrapper}>\r\n      <h2>New Password Page</h2>\r\n        <div>\r\n            <Input inputType='password' value={props.newPassword}\r\n                   inputOnChange={props.setNewPassword} inputPlaceholder='New password'\r\n            />\r\n        </div>\r\n        <div>\r\n            <Input inputType='password' value={props.newPasswordRepeat}\r\n                   inputOnChange={props.setNewPasswordRepeat} inputPlaceholder='Repeat new password'\r\n            />\r\n\r\n        </div>\r\n        <div>\r\n            <span>{props.differentPassword}</span>\r\n            {/*<span>{props.differentPassword}</span>*/}\r\n            <Button buttonName='set new password'\r\n                    buttonOnClick={props.getDataFromServer}\r\n\r\n            />\r\n            <span>{props.responseStatusMessage}</span>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPswd;\r\n","import React, {useEffect, useState} from 'react';\r\nimport NewPswd from \"./NewPswd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {newPasswordTC} from \"../../../bll/newPswd_reducer\";\r\n\r\n\r\nconst NewPswdContainer = () => {\r\n    //\r\n    let [newPassword, setNewPassword] = useState('');\r\n    let [newPasswordRepeat, setNewPasswordRepeat] = useState('');\r\n    let responseStatus = useSelector((state: RootState) => state.newPass.success);\r\n    let responseStatusMessage = useSelector((state: RootState) => state.newPass.message);\r\n    const [differentPassword, setDifferentPassword] = useState('');\r\n    const dispatch = useDispatch();\r\n    const resetPasswordToken = useSelector((state: RootState) => state.auth.token);\r\n\r\n\r\n    const [similar, setSimilar] = useState(false);\r\n    useEffect(()=> {\r\n        if(newPassword === newPasswordRepeat) setSimilar(true);\r\n        else setSimilar(false)\r\n    }, [newPassword || newPasswordRepeat]);\r\n\r\n    const getDataFromServer = () => {\r\n        // Вызов санки\r\n        if(newPassword === newPasswordRepeat) {\r\n            setSimilar(true);\r\n            dispatch(newPasswordTC(newPassword, resetPasswordToken))\r\n            setDifferentPassword('Successful!')\r\n        } else {\r\n            setSimilar(false);\r\n            setDifferentPassword('Enter similar pass')\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <NewPswd newPassword={newPassword} setNewPassword={setNewPassword}\r\n                 newPasswordRepeat={newPasswordRepeat} setNewPasswordRepeat={setNewPasswordRepeat}\r\n                 responseStatus={responseStatus} responseStatusMessage={responseStatusMessage}\r\n                 getDataFromServer={getDataFromServer} similar={similar} differentPassword={differentPassword}\r\n\r\n        />\r\n    );\r\n};\r\n\r\nexport default NewPswdContainer;\r\n","import React from 'react';\r\nimport NewPswdContainer from \"./NewPswdContainer\";\r\n\r\n// Отрисовка\r\nconst NewPswdPage = () => {\r\n    return (\r\n        <NewPswdContainer/>\r\n    );\r\n};\r\n\r\nexport default NewPswdPage;\r\n","import React from 'react';\r\nimport styles from './pswdRecover.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ninterface IPropsPswdRecover {\r\n    putUserEmail: (value: string) => void,\r\n    userEmail: string,\r\n    responseStatus: boolean\r\n    getDataFromServer: ()=> void\r\n    responseStatusMessage: string\r\n}\r\n\r\nconst PswdRecover: React.FC<IPropsPswdRecover> = (props) => {\r\n  return (\r\n    <div className={styles.pswdRecoverWrapper}>\r\n        <h2>Password Recovering Page</h2>\r\n        <div>\r\n            <Input inputType='email' value={props.userEmail} inputOnChange={props.putUserEmail}\r\n\r\n            />\r\n            <span> {props.responseStatusMessage} </span>\r\n        </div>\r\n        <div>\r\n            <Button buttonName='Recover' buttonOnClick={props.getDataFromServer}/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PswdRecover;\r\n","import React, {useState} from 'react';\r\nimport PswdRecover from \"./PswdRecover\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {passwordRecoverTC} from \"../../../bll/pswdRecover_reducer\";\r\n\r\n\r\nconst PswdRecoverContainer = (props: any) => {\r\n    //\r\n    let [userEmail, putUserEmail] = useState('email');\r\n    let responseStatus = useSelector((state: RootState) => state.recoverPass.success);\r\n    let responseStatusMessage = useSelector((state: RootState) => state.recoverPass.message);\r\n    const dispatch = useDispatch();\r\n    const getDataFromServer = () => {\r\n        // Вызов санки\r\n        dispatch(passwordRecoverTC(userEmail))\r\n    };\r\n\r\n    return (\r\n        <PswdRecover userEmail={userEmail} putUserEmail={putUserEmail} responseStatus={responseStatus}\r\n                     getDataFromServer={getDataFromServer} responseStatusMessage={responseStatusMessage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PswdRecoverContainer;\r\n","import React from 'react';\r\nimport PswdRecoverContainer from \"./PswdRecoverContainer\";\r\n\r\n// Отрисовка\r\nconst PswdRecoverPage = () => {\r\n    return (\r\n        <PswdRecoverContainer/>\r\n    );\r\n};\r\n\r\nexport default PswdRecoverPage;\r\n","import React from \"react\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport LoginizationPage from \"../features/loginization/loginizationPage\";\r\nimport ProfilePage from \"../features/profile/profile\";\r\nimport RegistrationPage from \"../features/registration/registrationPage\";\r\nimport NewPswdPage from \"../features/newPassword/NewPswdPage\";\r\nimport PswdRecoverPage from \"../features/passwordRecover/PswdRecoverPage\";\r\n\r\nexport const TO_AUTH = '/auth';\r\nexport const TO_NEW_PASSWORD = '/new-password';\r\nexport const TO_PROFILE = '/profile';\r\nexport const TO_RECOVER_PASSWORD = '/recover-password';\r\nexport const TO_REGISTRATION = '/registration';\r\n\r\nexport const AllRoutes: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={TO_AUTH} render={()=> <LoginizationPage />} />\r\n            <Route path={TO_NEW_PASSWORD} render={()=> <NewPswdPage />} />\r\n            <Route path={TO_PROFILE} render={()=> <ProfilePage />} />\r\n            <Route path={TO_RECOVER_PASSWORD} render={()=> <PswdRecoverPage />} />\r\n            <Route path={TO_REGISTRATION} render={()=> <RegistrationPage />} />\r\n            <Route exact path='/' render={()=> <Redirect to={TO_AUTH}/>} />\r\n            <Route path='*' render={()=> <div>404 BAD GATEWAY</div>} />\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {TO_AUTH, TO_NEW_PASSWORD, TO_PROFILE, TO_RECOVER_PASSWORD, TO_REGISTRATION} from \"../routes\";\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className={styles.headerWrapper}>\r\n      <NavLink to={TO_AUTH}>LoginizationPage</NavLink>\r\n      <NavLink to={TO_NEW_PASSWORD}>NewPasswordPage</NavLink>\r\n      <NavLink to={TO_PROFILE}>ProfilePage</NavLink>\r\n      <NavLink to={TO_RECOVER_PASSWORD}>PasswordRecoveringPage</NavLink>\r\n      <NavLink to={TO_REGISTRATION}>RegistrationPage</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.module.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from '../bll/store';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Header from './common/header/headers';\r\nimport s from './App.module.css';\r\nimport {AllRoutes} from \"./common/routes\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={s.App}>\r\n            <Header />\r\n\r\n            <AllRoutes />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}