{"version":3,"sources":["ui/App.module.css","ui/header/header.module.css","ui/common/input/Input.module.css","ui/common/button/Button.module.css","bll/types.tsx","bll/auth_reducer.tsx","bll/newPswd_reducer.tsx","bll/profile_reducer.tsx","bll/pswdRecover_reducer.tsx","bll/registr_reducer.tsx","bll/store.tsx","ui/header/headers.tsx","ui/common/input/Input.tsx","ui/common/button/Button.tsx","ui/loginization/loginization.tsx","ui/newPassword/newPswd.tsx","ui/profile/profile.tsx","ui/passwordRecover/pswdRecover.tsx","ui/registration/registration.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FIRST_ACTION","SECOND_ACTION","initialState","authReducer","state","action","type","newPasswordReducer","profileReducer","passwordRecoveringReducer","registrationReducer","reducerPack","combineReducers","auth","newPass","profile","recoverPass","registr","store","createStore","applyMiddleware","thunkMiddleware","Header","className","styles","headerWrapper","to","Input","s","inputWrapper","onChange","value","Button","buttonWrapper","onClick","LoginizationPage","loginizationWrapper","NewPasswordPage","newPasswordWrapper","ProfilePage","profileWrappe","PasswordRecoveringPage","pswdRecoverWrapper","RegistrationPage","registrationWrapper","AppContainer","connect","App","path","render","Main","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.435431e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LKvuZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__3GKSP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Input_inputWrapper__2iRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__11CDY\"};","export interface IState {\r\n\r\n}\r\n\r\nexport const FIRST_ACTION = 'FIRST_ACTION_CREATOR'\r\nexport const SECOND_ACTION = 'SECOND_ACTION_CREATOR'\r\n\r\ninterface firstActionCreator {\r\n  type: typeof FIRST_ACTION\r\n  payload: any\r\n}\r\n\r\ninterface secondActionCreator {\r\n  type: typeof SECOND_ACTION\r\n  payload: any\r\n}\r\n\r\nexport type ChatActionTypes = firstActionCreator | secondActionCreator","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst authReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default authReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst newPasswordReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default newPasswordReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst passwordRecoveringReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default passwordRecoveringReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst registrationReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default registrationReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport authReducer from './auth_reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport newPasswordReducer from \"./newPswd_reducer\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport passwordRecoveringReducer from \"./pswdRecover_reducer\";\r\nimport registrationReducer from \"./registr_reducer\";\r\n\r\nconst reducerPack = combineReducers({\r\n    auth: authReducer,\r\n    newPass: newPasswordReducer,\r\n    profile: profileReducer,\r\n    recoverPass: passwordRecoveringReducer,\r\n    registr: registrationReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducerPack>\r\n\r\nconst store = createStore(reducerPack, applyMiddleware(thunkMiddleware) );\r\nexport default store;","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className={styles.headerWrapper}>\r\n      <NavLink to='/auth'>LoginizationPage</NavLink>\r\n      <NavLink to='/new-password'>NewPasswordPage</NavLink>\r\n      <NavLink to='/profile'>ProfilePage</NavLink>\r\n      <NavLink to='/recover-password'>PasswordRecoveringPage</NavLink>\r\n      <NavLink to='/registration'>RegistrationPage</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\n\r\nconst Input = () => {\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <input onChange={()=>{}} value='' type=\"text\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\n\r\nconst Button = () => {\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button onClick={()=>{}}>Submit</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './loginization.module.css'\r\nimport Input from \"../common/input/Input\";\r\nimport Button from \"../common/button/Button\";\r\n\r\n\r\nconst LoginizationPage = () => {\r\n  return (\r\n    <div className={styles.loginizationWrapper}>\r\n      <h2>Loginization Page</h2>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Button/>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginizationPage;\r\n","import React from 'react';\r\nimport styles from './newPswd.module.css'\r\nimport Input from \"../common/input/Input\";\r\nimport Button from \"../common/button/Button\";\r\n\r\n\r\nconst NewPasswordPage = () => {\r\n  return (\r\n    <div className={styles.newPasswordWrapper}>\r\n      <h2>New Password Page</h2>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Button/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPasswordPage;\r\n","import React from 'react';\r\nimport styles from './profile.module.css'\r\n\r\n\r\nconst ProfilePage = () => {\r\n  return (\r\n    <div className={styles.profileWrappe}>\r\n      <h2>Profile Page</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport styles from './pswdRecover.module.css'\r\nimport Input from \"../common/input/Input\";\r\nimport Button from \"../common/button/Button\";\r\n\r\n\r\nconst PasswordRecoveringPage = () => {\r\n  return (\r\n    <div className={styles.pswdRecoverWrapper}>\r\n        <h2>Password Recovering Page</h2>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Button/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordRecoveringPage;\r\n","import React from 'react';\r\nimport styles from './registr.module.css'\r\nimport Input from \"../common/input/Input\";\r\nimport Button from \"../common/button/Button\";\r\n\r\n\r\nconst RegistrationPage = () => {\r\n  return (\r\n    <div className={styles.registrationWrapper}>\r\n        <h2>Registration Page</h2>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Input/>\r\n        </div>\r\n        <div>\r\n            <Button/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react';\r\nimport './App.module.css';\r\nimport { Provider, connect } from 'react-redux';\r\nimport store from '../bll/store';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { IState } from '../bll/types';\r\nimport Header from './header/headers';\r\nimport LoginizationPage from './loginization/loginization';\r\nimport NewPasswordPage from './newPassword/newPswd';\r\nimport ProfilePage from './profile/profile';\r\nimport PasswordRecoveringPage from './passwordRecover/pswdRecover';\r\nimport RegistrationPage from './registration/registration';\r\nimport s from './App.module.css';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className={s.App}>\r\n            <Header />\r\n            <Route path='/auth' render={()=> <LoginizationPage />} />\r\n            <Route path='/new-password' render={()=> <NewPasswordPage />} />\r\n            <Route path='/profile' render={()=> <ProfilePage />} />\r\n            <Route path='/recover-password' render={()=> <PasswordRecoveringPage />} />\r\n            <Route path='/registration' render={()=> <RegistrationPage />} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst mapState = (state: IState) => {\r\n  return state\r\n};\r\n\r\nconst AppContainer = connect(mapState)(App);\r\nconst Main = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}