{"version":3,"sources":["ui/App.module.css","ui/common/header/header.module.css","ui/common/input/Input.module.css","ui/common/button/Button.module.css","ui/common/loadingToggle/Loading.module.css","bll/types.tsx","dal/api.ts","bll/auth_reducer.tsx","bll/newPswd_reducer.tsx","bll/profile_reducer.tsx","bll/pswdRecover_reducer.tsx","bll/registr_reducer.tsx","bll/store.tsx","ui/common/input/Input.tsx","ui/common/button/Button.tsx","ui/common/loadingToggle/Loading.tsx","ui/features/loginization/loginization.tsx","ui/features/loginization/loginizationContainer.tsx","ui/features/loginization/loginizationPage.tsx","ui/features/profile/profile.tsx","ui/features/registration/registration.tsx","ui/features/registration/registrationContainer.tsx","ui/features/registration/registrationPage.tsx","ui/features/newPassword/NewPswd.tsx","ui/features/newPassword/NewPswdContainer.tsx","ui/features/newPassword/NewPswdPage.tsx","ui/features/passwordRecover/PswdRecover.tsx","ui/features/passwordRecover/PswdRecoverContainer.tsx","ui/features/passwordRecover/PswdRecoverPage.tsx","ui/common/routes.tsx","ui/common/header/headers.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","REGISTRATE_ERROR","LOGIN_ERROR","LOGIN_SUCCESS","instance","axios","create","baseURL","loginizationAPI","email","password","rememberMe","a","post","response","data","registrationAPI","passwordRecoverAPI","html1","html2","setNewPasswordAPI","resetPasswordToken","initialState","authSuccess","myName","errorMessage","token","isLoading","isLoadingAC","value","type","loginizationErrorAC","loginizationTC","dispatch","error","loginSuccess","success","name","authReducer","state","action","message","newPasswordTC","setNewPasswordErrorAC","setNewPasswordSuccessAC","recoverSuccess","newPasswordReducer","profileReducer","passwordRecoverSuccessAC","passwordRecoverErrorAC","passwordRecoveringReducer","registeredSuccess","registrationErrorAC","registrationReducer","reducerPack","combineReducers","auth","newPass","profile","recoverPass","registr","store","createStore","applyMiddleware","thunkMiddleware","Input","inputPlaceholder","checked","inputType","inputOnChange","inputOnChangeChecked","className","s","inputWrapper","onChange","e","currentTarget","placeholder","Button","buttonOnClick","buttonName","buttonWrapper","onClick","Loading","useState","points","setPoints","useSelector","loadingProgress","setTimeout","length","Loginization","login","setPassword","setLogin","setRememberMe","signIn","loginError","styles","loginizationWrapper","LoginizationContainer","useDispatch","to","TO_PROFILE","LoginizationPage","ProfilePage","profileWrappe","Registration","repeatingPassword","setRepeatingPassword","registerMe","similar","wrongRepeatingPassword","messageFromServer","registrationWrapper","RegistrationContainer","setSimilar","useEffect","TO_AUTH","registrationTC","RegistrationPage","NewPswd","newPassword","setNewPassword","newPasswordRepeat","setNewPasswordRepeat","differentPassword","getDataFromServer","responseStatusMessage","newPasswordWrapper","withRouter","props","setDifferentPassword","match","params","NewPswdPage","PswdRecover","putUserEmail","userEmail","pswdRecoverWrapper","PswdRecoverContainer","responseStatus","console","log","PswdRecoverPage","AllRoutes","path","render","exact","Header","headerWrapper","App","Main","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b9966504.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LKvuZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"header_headerWrapper__1bHj-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Input_inputWrapper__2iRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__11CDY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingProgress\":\"Loading_loadingProgress__25Q2Y\"};","export interface IState {\r\n\r\n}\r\nexport interface IStatePasswordRecover {\r\n  success: boolean\r\n  message: string\r\n}\r\nexport interface IStateRegistr {\r\n  message: string,\r\n  registeredSuccess: boolean\r\n}\r\nexport interface IStateLogin {\r\n  myName: string,\r\n  authSuccess: boolean,\r\n  errorMessage: string,\r\n  token: string\r\n  isLoading: boolean\r\n}\r\nexport interface ILoading {\r\n  isLoading: boolean\r\n  setIsLoading: ()=>void\r\n  points: string\r\n  setPoints: ()=>void\r\n}\r\n\r\nexport const FIRST_ACTION = 'FIRST_ACTION'\r\nexport const SECOND_ACTION = 'SECOND_ACTION'\r\nexport const REGISTRATE_SUCCESS = 'registr_reducer/REGISTRATE_SUCCESS'\r\nexport const REGISTRATE_ERROR = 'registr_reducer/REGISTRATE_ERROR'\r\nexport const LOGIN_ERROR = 'auth_reducer/LOGIN_ERROR'\r\nexport const LOGIN_SUCCESS = 'auth_reducer/LOGIN_SUCCESS'\r\nexport const PASSWORD_RECOVER_SUCCESS = 'PASSWORD_RECOVER_SUCCESS';\r\nexport const PASSWORD_RECOVER_ERROR = 'PASSWORD_RECOVER_ERROR';\r\nexport const NEW_PASSWORD_SUCCESS = 'NEW_PASSWORD_SUCCESS';\r\nexport const NEW_PASSWORD_ERROR = 'NEW_PASSWORD_ERROR';\r\nexport const IS_LOADING = 'IS_LOADING';\r\n\r\n\r\nexport interface IisLoadingActionCreator {\r\n  type: typeof IS_LOADING\r\n  value: boolean\r\n}\r\nexport interface firstActionCreator {\r\n  type: typeof FIRST_ACTION\r\n  payload: any\r\n}\r\nexport interface secondActionCreator {\r\n  type: typeof SECOND_ACTION\r\n  payload: any\r\n}\r\nexport interface ILoginSuccess {\r\n  type: typeof LOGIN_SUCCESS,\r\n  loginSuccess: boolean,\r\n  myName: string,\r\n  token: string\r\n}\r\nexport interface ILoginError {\r\n  type: typeof LOGIN_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IRegistrateSuccess {\r\n  type: typeof REGISTRATE_SUCCESS,\r\n  registeredSuccess:boolean\r\n}\r\nexport interface IRegistrateError {\r\n  type: typeof REGISTRATE_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface IPasswordRecoverSuccess {\r\n  type: typeof PASSWORD_RECOVER_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface IPasswordRecoverError {\r\n  type: typeof PASSWORD_RECOVER_ERROR,\r\n  errorMessage: string\r\n}\r\nexport interface INewPasswordSuccess {\r\n  type: typeof NEW_PASSWORD_SUCCESS,\r\n  recoverSuccess: boolean\r\n}\r\nexport interface INewPasswordError {\r\n  type: typeof NEW_PASSWORD_ERROR,\r\n  errorMessage: string\r\n}\r\n\r\nexport type ChatActionTypes = firstActionCreator| secondActionCreator| IRegistrateSuccess | IRegistrateError |\r\n    IPasswordRecoverSuccess | IPasswordRecoverError | ILoginSuccess | ILoginError | INewPasswordSuccess |\r\n    INewPasswordError | IisLoadingActionCreator\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = 'https://neko-cafe-back.herokuapp.com/auth/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\n\r\nexport interface ILoginization {\r\n    success: boolean;\r\n    name: string;\r\n    error: string;\r\n    token: string;\r\n}\r\nexport interface IRegistration {\r\n    success: boolean;\r\n\r\n    error: string;\r\n}\r\n\r\nexport const loginizationAPI = async (email: string, password: string, rememberMe: boolean) => {\r\n    const response = await instance.post<ILoginization>('/login', {email, password, rememberMe});\r\n    return response.data;\r\n};\r\nexport const registrationAPI = async (email: string, password: string) => {\r\n        const response = await instance.post<IRegistration>('/register', {email, password});\r\n        return response.data;\r\n};\r\n\r\nexport const passwordRecoverAPI = async (email: string) => {\r\n    const response = await instance.post<IRegistration>('/forgot', {\r\n        email,\r\n    html1: \"<a href='http://localhost:3000/kartonki#/new-password\",\r\n    html2: \"'>reset-password-link</a>\"});\r\n    return response.data;\r\n};\r\nexport const setNewPasswordAPI = async (password: string, resetPasswordToken: string) => {\r\n    const response = await instance.post<IRegistration>('/set-new-password', {password, resetPasswordToken});\r\n    return response.data;\r\n};","import {\r\n    ChatActionTypes, IisLoadingActionCreator,\r\n    ILoginError,\r\n    ILoginSuccess, IS_LOADING,\r\n    IStateLogin,\r\n    LOGIN_ERROR,\r\n    LOGIN_SUCCESS\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginizationAPI} from \"../dal/api\";\r\n\r\nconst initialState: IStateLogin = {\r\n    authSuccess: false,\r\n    myName: '',\r\n    errorMessage: '',\r\n    token: '',\r\n    isLoading: false,\r\n}\r\n\r\n\r\nconst authReducer = (state: IStateLogin = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state, authSuccess: action.loginSuccess, myName: action.myName,\r\n                token: action.token\r\n            }\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state, errorMessage: action.errorMessage\r\n            }\r\n        case \"IS_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// global loading Action Creator\r\nexport const isLoadingAC = (value: boolean):IisLoadingActionCreator => ({type: IS_LOADING, value});\r\n\r\n\r\nconst loginizationSuccessAC = (loginSuccess: boolean, myName:string, token:string):ILoginSuccess =>\r\n    ({type: LOGIN_SUCCESS, loginSuccess, myName, token})\r\nconst loginizationErrorAC = (errorMessage: string):ILoginError => ({type: LOGIN_ERROR, errorMessage})\r\n\r\n\r\n\r\nexport const loginizationTC = (email:string, password:string, rememberMe: boolean) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await loginizationAPI(email, password, rememberMe);\r\n            if (data.error)\r\n                dispatch(loginizationErrorAC(data.error))\r\n            else dispatch(loginizationSuccessAC(data.success, data.name, data.token ))\r\n        } catch (e) {\r\n            dispatch(loginizationErrorAC(e.response.data.error))\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    }\r\nexport default authReducer;","import {\r\n    ChatActionTypes,\r\n    NEW_PASSWORD_SUCCESS,\r\n    NEW_PASSWORD_ERROR,\r\n    INewPasswordSuccess, INewPasswordError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setNewPasswordAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst newPasswordReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case NEW_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Successful!'\r\n            };\r\n        case NEW_PASSWORD_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const newPasswordTC = (password: string, resetPasswordToken: string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await setNewPasswordAPI(password, resetPasswordToken);\r\n            if(data.error) {\r\n                dispatch(setNewPasswordErrorAC(data.error));\r\n            } else\r\n                dispatch(setNewPasswordSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(setNewPasswordErrorAC(e.response.data.error));\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators\r\nconst setNewPasswordSuccessAC = (recoverSuccess: boolean)\r\n    : INewPasswordSuccess => ({type: NEW_PASSWORD_SUCCESS, recoverSuccess});\r\n\r\nexport const setNewPasswordErrorAC = (errorMessage: string)\r\n    : INewPasswordError => ({type: NEW_PASSWORD_ERROR, errorMessage});\r\n\r\n\r\nexport default newPasswordReducer;","import { IState, ChatActionTypes, FIRST_ACTION, SECOND_ACTION } from \"./types\";\r\n\r\nconst initialState: IState = {\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state: IState = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case FIRST_ACTION:\r\n            return state\r\n        case SECOND_ACTION:\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer;","import {\r\n    ChatActionTypes,\r\n    PASSWORD_RECOVER_ERROR,\r\n    PASSWORD_RECOVER_SUCCESS,\r\n    IPasswordRecoverSuccess,\r\n    IPasswordRecoverError, IStatePasswordRecover\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {passwordRecoverAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState: IStatePasswordRecover = {\r\n    success: false,\r\n    message: ''\r\n};\r\n\r\n\r\nconst passwordRecoveringReducer = (state: IStatePasswordRecover = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case PASSWORD_RECOVER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                success: action.recoverSuccess,\r\n                message: 'Успешно! Проверьте свой email.'\r\n            };\r\n        case PASSWORD_RECOVER_ERROR:\r\n            return {\r\n                ...state,\r\n                message: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//Thunk\r\nexport const passwordRecoverTC = (email:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true))\r\n            const data = await passwordRecoverAPI(email);\r\n            console.log(data)\r\n            if(data.error) {\r\n                dispatch(passwordRecoverErrorAC(data.error));\r\n            } else\r\n                dispatch(passwordRecoverSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(passwordRecoverErrorAC(e.response.data.error));\r\n            console.log(e.response.data.error)\r\n        }\r\n        dispatch(isLoadingAC(false))\r\n    };\r\n\r\n//Action Creators (success error)\r\nconst passwordRecoverSuccessAC = (recoverSuccess: boolean)\r\n    : IPasswordRecoverSuccess => ({type: PASSWORD_RECOVER_SUCCESS, recoverSuccess});\r\n\r\nexport const passwordRecoverErrorAC = (errorMessage: string)\r\n    : IPasswordRecoverError => ({type: PASSWORD_RECOVER_ERROR, errorMessage});\r\n\r\n\r\n\r\nexport default passwordRecoveringReducer;","import {\r\n    ChatActionTypes,\r\n    REGISTRATE_ERROR,\r\n    REGISTRATE_SUCCESS,\r\n    IRegistrateSuccess,\r\n    IRegistrateError, IStateRegistr\r\n} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {registrationAPI} from \"../dal/api\";\r\nimport {isLoadingAC} from \"./auth_reducer\";\r\n\r\nconst initialState:IStateRegistr = {\r\n    message: '',\r\n    registeredSuccess: false\r\n};\r\n\r\nconst registrationReducer = (state:IStateRegistr = initialState, action: ChatActionTypes) => {\r\n    switch (action.type) {\r\n        case REGISTRATE_SUCCESS:\r\n            return {...state, message: 'successich', registeredSuccess: action.registeredSuccess}\r\n        case REGISTRATE_ERROR:\r\n            return {...state, message: action.errorMessage}\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst registrationSuccessAC = (registeredSuccess: boolean)\r\n    : IRegistrateSuccess => ({type: REGISTRATE_SUCCESS, registeredSuccess});\r\nexport const registrationErrorAC = (errorMessage: string)\r\n    : IRegistrateError => ({type: REGISTRATE_ERROR, errorMessage});\r\n\r\n\r\nexport const registrationTC = (email:string, password:string) =>\r\n     async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n        try {\r\n            dispatch(isLoadingAC(true));\r\n            const data = await registrationAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(registrationErrorAC(data.error));\r\n            } else\r\n                dispatch(registrationSuccessAC(data.success))\r\n        } catch (e) {\r\n            dispatch(registrationErrorAC(e.response.data.error))\r\n        }\r\n         dispatch(isLoadingAC(false));\r\n}\r\n\r\nexport default registrationReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport authReducer from './auth_reducer';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport newPasswordReducer from \"./newPswd_reducer\";\r\nimport profileReducer from \"./profile_reducer\";\r\nimport passwordRecoveringReducer from \"./pswdRecover_reducer\";\r\nimport registrationReducer from \"./registr_reducer\";\r\n\r\nconst reducerPack = combineReducers({\r\n    auth: authReducer,\r\n    newPass: newPasswordReducer,\r\n    profile: profileReducer,\r\n    recoverPass: passwordRecoveringReducer,\r\n    registr: registrationReducer\r\n})\r\nexport type RootState = ReturnType<typeof reducerPack>\r\n\r\nconst store = createStore(reducerPack, applyMiddleware(thunkMiddleware) );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Input.module.css'\r\n\r\ninterface IPropsInput {\r\n    inputPlaceholder?: string | undefined,\r\n    value?: string  | undefined,\r\n    checked?: boolean | undefined,\r\n    inputType?:string | undefined,\r\n    inputOnChange?: (value: string ) => void,\r\n    inputOnChangeChecked?: (value: boolean ) => void\r\n}\r\nconst Input: React.FC<IPropsInput> = ({\r\n                                          inputPlaceholder,\r\n                                          value ,\r\n                                          checked,\r\n                                          inputType,\r\n                                          inputOnChange,\r\n                                          inputOnChangeChecked\r\n                                      }) => {\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (inputOnChange) {\r\n            inputOnChange(e.currentTarget.value)\r\n        } else if(inputOnChangeChecked) {\r\n            inputOnChangeChecked(e.currentTarget.checked)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.inputWrapper}>\r\n            <input onChange={onChange} placeholder={inputPlaceholder}\r\n                   value={value} checked={checked} type={inputType}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport s from './Button.module.css';\r\n\r\ninterface IPropsButton {\r\n    buttonOnClick?: () => void,\r\n    buttonName?: string\r\n}\r\n\r\nconst Button: React.FC<IPropsButton> = ({buttonOnClick, buttonName}) => {\r\n    return (\r\n        <div className={s.buttonWrapper}>\r\n            <button onClick={buttonOnClick}>{buttonName? buttonName : 'submit'}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport s from './Loading.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\n\r\n\r\nconst Loading = () => {\r\n    let [points, setPoints] = useState<string>('.');\r\n    let isLoading = useSelector((state: RootState) => state.auth.isLoading);\r\n    const loadingProgress = () => {\r\n        setTimeout(() => { points.length < 5\r\n            ?setPoints(points+'.')\r\n            :setPoints('.')}, 1000);\r\n        return points\r\n    };\r\n    return (\r\n\r\n            <span className={s.loadingProgress}>\r\n                {isLoading&&'LOADING'+loadingProgress()}\r\n            </span>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport styles from './loginization.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Loading from \"../../common/loadingToggle/Loading\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRememberMe: (value: boolean) => void,\r\n    signIn: () => void,\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    loginError: string,\r\n    isLoading: boolean,\r\n}\r\n\r\nconst Loginization: React.FC<IProps> = ({login, password, setPassword,\r\n                                            setLogin, setRememberMe, signIn,\r\n                                            rememberMe,loginError, isLoading}) => {\r\n  return (\r\n    <div className={styles.loginizationWrapper}>\r\n      <h2>Loginization Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'checkbox'} checked={rememberMe} inputOnChangeChecked={setRememberMe}/>\r\n        </div>\r\n        <div>\r\n            <Button buttonName={'Sign In'} buttonOnClick={signIn}/>\r\n        </div>\r\n        {isLoading && <Loading/>}\r\n        {loginError? <span>loginError</span> : null}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loginization;\r\n","import React, {useState} from 'react';\r\nimport Loginization from \"./loginization\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginizationTC} from \"../../../bll/auth_reducer\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {TO_PROFILE} from \"../../common/routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst LoginizationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {authSuccess, errorMessage, isLoading} = useSelector((state: RootState) => state.auth)\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\nconst signIn = async () => {\r\n    await dispatch(loginizationTC(login, password, rememberMe))\r\n\r\n}\r\n\r\n    return (\r\n        <>\r\n            {!authSuccess\r\n                ? <Loginization setLogin={setLogin} setPassword={setPassword}\r\n                                setRememberMe={setRememberMe} loginError={errorMessage}\r\n                                login={login} password={password} rememberMe={rememberMe}\r\n                                signIn={signIn} isLoading={isLoading}\r\n                />\r\n                : <Redirect to={TO_PROFILE}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginizationContainer;\r\n","import React from 'react';\r\nimport LoginizationContainer from \"./loginizationContainer\";\r\n\r\n;\r\n\r\n\r\nconst LoginizationPage = () => {\r\n    return (\r\n        <LoginizationContainer />\r\n    );\r\n};\r\n\r\nexport default LoginizationPage;\r\n","import React from 'react';\r\nimport styles from './profile.module.css'\r\n\r\n\r\nconst ProfilePage = () => {\r\n  return (\r\n    <div className={styles.profileWrappe}>\r\n      <h2>Profile Page</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport styles from './registr.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Loading from \"../../common/loadingToggle/Loading\";\r\n\r\ninterface IProps {\r\n    setLogin: (value: string) => void,\r\n    setPassword: (value: string) => void,\r\n    setRepeatingPassword: (value: string) => void,\r\n    wrongRepeatingPassword: () => void,\r\n    registerMe: () => void,\r\n    login: string,\r\n    password: string,\r\n    repeatingPassword: string,\r\n    similar: boolean\r\n    messageFromServer: string\r\n    isLoading: boolean\r\n}\r\n\r\nconst Registration: React.FC<IProps> = ({login, password,\r\n                                            repeatingPassword,\r\n                                            setPassword, setLogin, setRepeatingPassword,\r\n                                            registerMe, similar,\r\n                                            wrongRepeatingPassword, messageFromServer, isLoading}) => {\r\n    return (\r\n    <div className={styles.registrationWrapper}>\r\n        <h2>Registration Page</h2>\r\n        <div>\r\n            <Input inputOnChange={setLogin}\r\n                   inputType={'text'} value={login} inputPlaceholder={'login or email'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={password} inputOnChange={setPassword}\r\n                   inputPlaceholder={'your password'}/>\r\n        </div>\r\n        <div>\r\n            <Input inputType={'password'} value={repeatingPassword} inputOnChange={setRepeatingPassword}\r\n                   inputPlaceholder={'repeat your password'}/>\r\n                   {!similar && <span>password does not match!</span>}\r\n        </div>\r\n        <div>\r\n            <Button  buttonOnClick={similar? registerMe : wrongRepeatingPassword} buttonName={'Sign Up'}/>\r\n            {isLoading && <Loading/>}\r\n            {<span>{messageFromServer}</span>}\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Registration;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Registration from \"./registration\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationErrorAC, registrationTC} from \"../../../bll/registr_reducer\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {TO_AUTH} from \"../../common/routes\";\r\n\r\n\r\nconst RegistrationContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {registeredSuccess, message} = useSelector((state: RootState) => state.registr)\r\n    const {isLoading} = useSelector((state: RootState) => state.auth);\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [repeatingPassword, setRepeatingPassword] = useState<string>('');\r\n    const [similar, setSimilar] = useState<boolean>(false);\r\n    useEffect(()=> {\r\n        if(repeatingPassword === password && repeatingPassword) setSimilar(true)\r\n            else setSimilar(false)\r\n    }, [repeatingPassword, password]);\r\n    const registerMe = () => {dispatch(registrationTC(login, password))\r\n    }\r\n    const wrongRepeatingPassword = () => {\r\n        dispatch(registrationErrorAC('wrong credentials'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!registeredSuccess\r\n           ? <Registration setLogin={setLogin}\r\n                          setPassword={setPassword}\r\n                          login={login} password={password}\r\n                          repeatingPassword={repeatingPassword}\r\n                          setRepeatingPassword={setRepeatingPassword}\r\n                          similar={similar}\r\n                          registerMe={registerMe}\r\n                           messageFromServer={message}\r\n                          wrongRepeatingPassword={wrongRepeatingPassword}\r\n                           isLoading={isLoading}\r\n            />\r\n            : <Redirect to={TO_AUTH}/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegistrationContainer;\r\n","import React from 'react';\r\nimport RegistrationContainer from \"./registrationContainer\";\r\n\r\n\r\nconst RegistrationPage = () => {\r\n    return (\r\n        <RegistrationContainer />\r\n    );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","import React from 'react';\r\nimport styles from './newPswd.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Loading from \"../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsNewPswd {\r\n    setNewPassword: (value: string) => void,\r\n    setNewPasswordRepeat: (value: string) => void,\r\n    newPassword: string,\r\n    newPasswordRepeat: string,\r\n    responseStatusMessage: string,\r\n    getDataFromServer: ()=> void,\r\n    similar: boolean,\r\n    differentPassword: string,\r\n    isLoading: boolean\r\n}\r\n\r\nconst NewPswd: React.FC<IPropsNewPswd> = ({newPassword, isLoading, setNewPassword,\r\n                                              newPasswordRepeat,setNewPasswordRepeat,\r\n                                              differentPassword,getDataFromServer,\r\n                                              responseStatusMessage}) => {\r\n  return (\r\n    <div className={styles.newPasswordWrapper}>\r\n      <h2>New Password Page</h2>\r\n        <div>\r\n            <Input inputType='password' value={newPassword}\r\n                   inputOnChange={setNewPassword} inputPlaceholder='New password'\r\n            />\r\n        </div>\r\n        <div>\r\n            <Input inputType='password' value={newPasswordRepeat}\r\n                   inputOnChange={setNewPasswordRepeat} inputPlaceholder='Repeat new password'\r\n            />\r\n\r\n        </div>\r\n        <div>\r\n            <span>{differentPassword}</span>\r\n            <Button buttonName='set new password'\r\n                    buttonOnClick={getDataFromServer}\r\n\r\n            />\r\n            {isLoading && <Loading/>}\r\n            <span>{responseStatusMessage}</span>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPswd;\r\n","import React, {useEffect, useState} from 'react';\r\nimport NewPswd from \"./NewPswd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {newPasswordTC} from \"../../../bll/newPswd_reducer\";\r\n\r\n\r\nconst NewPswdContainer = (props: any) => {\r\n    const dispatch = useDispatch();\r\n    const [similar, setSimilar] = useState(false);\r\n    let [newPassword, setNewPassword] = useState<string>('');\r\n    let [newPasswordRepeat, setNewPasswordRepeat] = useState<string>('');\r\n    const [differentPassword, setDifferentPassword] = useState<string>('');\r\n\r\n    let responseStatusMessage = useSelector((state: RootState) => state.newPass.message);\r\n    const isLoading = useSelector((state: RootState) => state.auth.isLoading)\r\n\r\n    useEffect(()=> {\r\n        if(newPassword === newPasswordRepeat && newPasswordRepeat) {\r\n            setSimilar(true);\r\n            setDifferentPassword('');\r\n        } else {\r\n            setSimilar(false)\r\n            setDifferentPassword('Enter similar pass')\r\n        }\r\n    }, [newPassword, newPasswordRepeat]);\r\n\r\n    const resetPasswordToken = props.match.params.token;\r\n    const getDataFromServer = async() => {\r\n        // Вызов санки\r\n       similar && dispatch(newPasswordTC(newPassword, resetPasswordToken))\r\n        };\r\n\r\n    return (\r\n        <NewPswd newPassword={newPassword} setNewPassword={setNewPassword}\r\n                 newPasswordRepeat={newPasswordRepeat} setNewPasswordRepeat={setNewPasswordRepeat}\r\n                  responseStatusMessage={responseStatusMessage}\r\n                 getDataFromServer={getDataFromServer} similar={similar} differentPassword={differentPassword}\r\n                 isLoading={isLoading}\r\n\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(NewPswdContainer);\r\n","import React from 'react';\r\nimport NewPswdContainer from \"./NewPswdContainer\";\r\n\r\n// Отрисовка\r\nconst NewPswdPage = () => {\r\n    return (\r\n        <NewPswdContainer/>\r\n    );\r\n};\r\n\r\nexport default NewPswdPage;\r\n","import React from 'react';\r\nimport styles from './pswdRecover.module.css'\r\nimport Input from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Loading from \"../../common/loadingToggle/Loading\";\r\n\r\ninterface IPropsPswdRecover {\r\n    putUserEmail: (value: string) => void,\r\n    userEmail: string,\r\n    responseStatus: boolean,\r\n    getDataFromServer: ()=> void,\r\n    responseStatusMessage: string,\r\n    isLoading: boolean\r\n}\r\n\r\nconst PswdRecover: React.FC<IPropsPswdRecover> = ({putUserEmail, userEmail,responseStatusMessage,\r\n                                                      getDataFromServer,isLoading  }) => {\r\n  return (\r\n    <div className={styles.pswdRecoverWrapper}>\r\n        <h2>Password Recovering Page</h2>\r\n        <div>\r\n            <Input inputType='email' value={userEmail} inputOnChange={putUserEmail}\r\n                   inputPlaceholder={'email'}\r\n            />\r\n            <span> {responseStatusMessage} </span>\r\n        </div>\r\n        <div>\r\n            <Button buttonName='Recover' buttonOnClick={getDataFromServer}/>\r\n        </div>\r\n        {isLoading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PswdRecover;\r\n","import React, {useState} from 'react';\r\nimport PswdRecover from \"./PswdRecover\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../bll/store\";\r\nimport {passwordRecoverTC} from \"../../../bll/pswdRecover_reducer\";\r\n\r\n\r\nconst PswdRecoverContainer = () => {\r\n    //\r\n    let [userEmail, putUserEmail] = useState<string>('');\r\n    let {success, message} = useSelector((state: RootState) => state.recoverPass);\r\n    const isLoading = useSelector((state: RootState) => state.auth.isLoading)\r\n    const dispatch = useDispatch();\r\n    const getDataFromServer = () => {\r\n        // Вызов санки\r\n        dispatch(passwordRecoverTC(userEmail))\r\n    };\r\n\r\n    return (\r\n        <PswdRecover userEmail={userEmail} putUserEmail={putUserEmail} responseStatus={success}\r\n                     getDataFromServer={getDataFromServer} responseStatusMessage={message}\r\n                     isLoading={isLoading}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PswdRecoverContainer;\r\n","import React from 'react';\r\nimport PswdRecoverContainer from \"./PswdRecoverContainer\";\r\n\r\n// Отрисовка\r\nconst PswdRecoverPage = () => {\r\n    return (\r\n        <PswdRecoverContainer/>\r\n    );\r\n};\r\n\r\nexport default PswdRecoverPage;\r\n","import React from \"react\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport LoginizationPage from \"../features/loginization/loginizationPage\";\r\nimport ProfilePage from \"../features/profile/profile\";\r\nimport RegistrationPage from \"../features/registration/registrationPage\";\r\nimport NewPswdPage from \"../features/newPassword/NewPswdPage\";\r\nimport PswdRecoverPage from \"../features/passwordRecover/PswdRecoverPage\";\r\n\r\nexport const TO_AUTH = '/auth';\r\nexport const TO_NEW_PASSWORD = '/new-password:token';\r\nexport const TO_PROFILE = '/profile';\r\nexport const TO_RECOVER_PASSWORD = '/recover-password';\r\nexport const TO_REGISTRATION = '/registration';\r\n\r\nexport const AllRoutes: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={TO_AUTH} render={()=> <LoginizationPage />} />\r\n            <Route path={TO_NEW_PASSWORD} render={()=> <NewPswdPage />} />\r\n            <Route path={TO_PROFILE} render={()=> <ProfilePage />} />\r\n            <Route path={TO_RECOVER_PASSWORD} render={()=> <PswdRecoverPage />} />\r\n            <Route path={TO_REGISTRATION} render={()=> <RegistrationPage />} />\r\n            <Route exact path='/' render={()=> <Redirect to={TO_AUTH}/>} />\r\n            <Route path='*' render={()=> <div>404 BAD GATEWAY</div>} />\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {TO_AUTH, TO_NEW_PASSWORD, TO_PROFILE, TO_RECOVER_PASSWORD, TO_REGISTRATION} from \"../routes\";\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className={styles.headerWrapper}>\r\n      <NavLink to={TO_AUTH}>LoginizationPage</NavLink>\r\n      <NavLink to={TO_NEW_PASSWORD}>NewPasswordPage</NavLink>\r\n      <NavLink to={TO_PROFILE}>ProfilePage</NavLink>\r\n      <NavLink to={TO_RECOVER_PASSWORD}>PasswordRecoveringPage</NavLink>\r\n      <NavLink to={TO_REGISTRATION}>RegistrationPage</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\nimport './App.module.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from '../bll/store';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Header from './common/header/headers';\r\nimport s from './App.module.css';\r\nimport {AllRoutes} from \"./common/routes\";\r\n\r\n\r\nconst App: React.FC = (props) => {\r\n    let [isLoading, setIsLoading] = useState<boolean>(true);\r\n    let [points, setPoints] = useState<string>('.');\r\n    const loadingProgress = () => {\r\n        setTimeout(()=>{points.length<5?setPoints(points+'.'):setPoints('.')}, 1000)\r\n        return points\r\n        // let pointsArr = ['.', '.', '.', '.', '.']\r\n        // let loadingPoints = pointsArr[0];\r\n        // for (let i = 0; i < pointsArr.length; i++){\r\n        //     loadingPoints += [i]\r\n        // }\r\n    }\r\n  return (\r\n    <div className={s.App}>\r\n            <Header />\r\n\r\n\r\n\r\n            <AllRoutes />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Main from './ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Main />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}